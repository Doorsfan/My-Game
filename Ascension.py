import libtcodpy as libtcod
import math
import textwrap
import os
import time
import datetime
import traceback
import time

import cPickle

from itertools import islice
import sys
import random


#Make determined Light Factor of Tile for random Dungeons based on terrain, as in, Caves are damp and dark, adjust tile set to reflect this
#Make Stealth system that is determined by Skill in Sneak * Light factor * Disguise Versus Detection of Enemy
#Low enough visibility, will reduce your detection range.
#if you are in range of the entity trying to detect you (their "Sight radius"), they will roll to see if they detect you or not.
#If they detect you, they start moving towards you, to gain a even bigger chanse of finding you.
#This also increases their detection, for a set number of turns.


#Quest Concept : The Shady Lady Quest Lined
#Depending on how far you have gotten/What you do, you get different far in the quest line.
#The Shady Lady is a Assasin sent on a secret quest

#her Quest is to Obtain Greed eternal from Hirachi, who was previously a god, but was cast out for stealing from the Pantheon
#Hirachi is not longer considered a god, for stealing the blade - Almost all gods are wiped out, hirachi survives because he is not a god anymore
#!IMPORTANT! !READ!

#This is a WORK IN PROGRESS. Some of the functions are incomplete or left-overs from experiments,
#a lot of the variable names are not final or just set for personal use (See: Not proffesional level of use)
#Features that remain to be implemented:

#Index overview, Proper Commenting, Clean-up of Code and Binding of Variables to Classes


#actual size of the window
SCREEN_WIDTH = 150
SCREEN_HEIGHT = 69
EQUIP_LIST = []

SUPERSPECIAL = 255

LOAD_FACTOR = 0


COMBAT_MISSED = 0

sound_level2 = 1

DEBUFF = False

General_Tab = True #General tab always starts out as True, this is the "Default" tab, that we resort to.
Combat_Tab = False #Combat tab, is the tab that displays information about Combat, in greater detail.
Story_Tab = False #Story tab, is the tab that displays information regarding Story elements.

#size of the map
MAP_WIDTH = 96 #Width of map
MAP_HEIGHT = 49 #Height of Map
SAVE = 0

PASSED = False

shopping_list = []

#sizes and coordinates relevant for the GUI
BAR_WIDTH = 20
PANEL_HEIGHT = 10
PANEL_Y = SCREEN_HEIGHT - PANEL_HEIGHT
MSG_X = BAR_WIDTH + 2 #?
MSG_WIDTH = SCREEN_WIDTH - BAR_WIDTH - 2 #Msg box width
MSG_HEIGHT = PANEL_HEIGHT - 1 #Msg box height
INVENTORY_WIDTH = 150 #Width of Inventory
CHARACTER_SCREEN_WIDTH = 30 #Character screen width
LEVEL_SCREEN_WIDTH = 40 #Width of level up menu screen

#parameters for dungeon generator
ROOM_MAX_SIZE = 10 #Max size of room
ROOM_MIN_SIZE = 5 #Min size of room
MAX_ROOMS = 40 #Amount of max rooms
MAX_ROOM_MONSTERS = 10 #Amount of max monsters in a room
MAX_ROOM_ITEMS = 5 #Amount of items in a room
stairs_count = False #stairs boolean

TURN = 4 #Turn counter
MINUTE = 59
HOUR = 2
REGEN = 2 #How much you regen per 5 turns
TORCH_RADIUS = 5

xp_bonus = 0
burn = 0
burning = False
demon_bolt_cast = False
drain_life_cast = False
corruption1 = False
corrupted1 = False
moved = False
Tutorial = False
Tutorial_show = False
wilderness_factor = False
dungeon_enter = False

hit_name = ''

TrueSecond = time.time()


name_tutorial = False


encounter = False

MENU_BACKGROUND = False
map_stuff_add = []
map_stuff_remove = []

clicked = 0



#exp and lvl-ups
LEVEL_UP_BASE = 200 #Base xp
LEVEL_UP_FACTOR = 150 #more xp per lvl to level up


LIGHTNING_RANGE = 5 #range of lightning
CONFUSE_RANGE = 8 #range of confuse
CONFUSE_NUM_TURNS = 10 #Nr of Confuse turns
FIREBALL_RADIUS = 3 #Fireball radius
FIREBALL_DAMAGE = 25 #Fireball dmg
BRAWL_RANGE = 1 #Brawl range
FOV_ALGO = 0  #default FOV algorithm
FOV_LIGHT_WALLS = True  #light walls or not


LIMIT_FPS = 20  #20 frames-per-second maximum

color_dark_wall = libtcod.Color(0, 0, 100) #Color of dark walls
color_light_wall = libtcod.Color(130, 110, 50) #Color of light walls
color_dark_ground = libtcod.Color(50, 50, 150) #Color of dark ground
color_light_ground = libtcod.Color(200, 180, 50) #color of light ground



class Tile:
    #a tile of the map and its properties
    def __init__(self, blocked, light_level=0, Thickness=0, colour1=0, colour2=0, colour3=0, corner_stone=False, order_road=False, white_decoration=False, burning=False,
                 lava=False, town=False, tower=False, city_wall=False, forest=False, water=False, city_gate=False, gate=False, mountain=False, order=False, block_sight = None):
        self.blocked = blocked
        self.light_level = light_level
        self.Thickness = Thickness
        self.colour1 = colour1
        self.colour2 = colour2
        self.colour3 = colour3

        
        self.corner_stone = corner_stone
        self.order_road = order_road
        self.white_decoration = white_decoration
        self.burning = burning
        
        self.lava = lava
        self.town = town
        self.tower = tower
        self.city_wall = city_wall
        
        self.forest = forest
        self.water = water
        self.gate = gate
        self.city_gate = city_gate
        self.mountain = mountain
        self.order = order

        #all tiles start unexplored
        self.explored = False

        #by default, if a tile is blocked, it also blocks sight
        if block_sight is None: block_sight = blocked
        self.block_sight = block_sight
        

class Rect:
    #a rectangle on the map. used to characterize a room.
    def __init__(self, x, y, w, h):
        self.x1 = x
        self.y1 = y
        self.x2 = x + w
        self.y2 = y + h

    def center(self):
        center_x = (self.x1 + self.x2) / 2
        center_y = (self.y1 + self.y2) / 2
        return (center_x, center_y)

    def intersect(self, other):
        #returns true if this rectangle intersects with another one
        return (self.x1 <= other.x2 and self.x2 >= other.x1 and
                self.y1 <= other.y2 and self.y2 >= other.y1)

class Debuff:
    def __init__(self, turns=0, damage=0, amounts=0, healing=0, reduction=0, tick=0, reduction1=0, reduction2=0, reduction3=0, reduction4=0, kind='', name='', source=''
                 , debuffs={}, dispel_list=[],
                 Dispelable=False, Effect=None, Death=None, Stat1=None, Stat2=None, Stat3=None,
                 Stat4=None, color=libtcod.white, other_color=libtcod.white):
        self.turns = turns
        self.damage = damage
        self.amounts = amounts
        self.healing = healing
        self.reduction = reduction
        self.tick = tick
        self.reduction1 = reduction1
        self.reduction2 = reduction2
        self.reduction3 = reduction3
        self.reduction4 = reduction4
        self.kind = kind
        
        
        self.name = name
        self.source = source
        self.debuffs = debuffs
        self.debuff_list = debuff_list
        self.Dispelable = Dispelable
        self.dispel_list = dispel_list
        self.Effect = Effect
        self.Death = Death
        self.Stat1 = Stat1
        self.Stat2 = Stat2
        self.Stat3 = Stat3
        self.Stat4 = Stat4
        self.color = color
        self.other_color = other_color

    def revoke(self, temp=None):
        message(self.name + ' was removed.')

        

        

    def debuff_apply(self, temp=None):
        message(self.name + ' Applied')

class Memory:
    def __init__(self, x=0, y=0, duration=0, level=0,playerClass=None, standing=None, power_level=None):
        self.x = x
        self.y = y
        self.duration = duration
        self.level = level
        self.playerClass = playerClass
        self.standing = standing
        self.power_level = power_level
class Energy: 
    def __init__(self, energy):
        self.energy = energy

class Weather:
    def __init__(self, wind_strength=None, wind_direction=None, rain_strength=None, thunder_strength=None, snow_strength=None, sand_strength=None, acid_rain=False, temprature=0):
        self.wind_strength = wind_strength
        self.wind_direction = wind_direction
        self.rain_strength = rain_strength
        self.thunder_strength = thunder_strength
        self.snow_strength = snow_strength
        self.sand_strength = sand_strength
        self.acid_rain = acid_rain
        self.temprature = temprature


class Quest:
    def __init__(self, Quest_Main, Quest_Second, Quest_name, Range, completed, rewards=[], error=[]):
        
        self.Quest_Main = Quest_Main
        self.Quest_Second = Quest_Second
        self.Quest_name = Quest_name
        self.Range = Range
        self.completed = completed
        self.rewards = rewards
        self.error = error

class Message:
    def __init__(self, x, y, string, color):
        self.x = x
        self.y = y
        self.string = string
        self.color = color

class Object:
    #this is a generic object: the player, a monster, an item, the stairs...
    #it's always represented by a character on screen.
    def __init__(self, x, y, char, name, color, blocks=False, always_visible=False, cooked=False, currency=False, slot=None,  item=None, hear=1000, vision=0,
                 defense_bonus=None, fighter=None, id_number=0, last_seen_x=0, last_seen_y=0,
                 cook_turns=None, offense=0, current_energy=0, energy=10, max_energy=500, is_equipped=False, weight=5,
                 weapon_min=0, weapon_max=0, weapon_agi=0, Conceal_Bonus=0, weapon_str=0, Rank=1, weapon_type='', faction='', Memory=[0, 0,0,0,0],
                 monster_type='', tale_told='', damage=0, use_function = None, eat_function = None, patrol = None, env = None, ai=None):


        self.x = x
        self.y = y
        self.char = char
        self.name = name
        self.color = color
        self.blocks = blocks
        self.always_visible = always_visible
        self.cooked = cooked
        self.currency = currency

        self.slot = slot

        self.item = item
        self.hear = hear
        self.vision = vision

        self.defense_bonus = defense_bonus


        self.fighter = fighter
        self.id_number = id_number
        self.last_seen_x = last_seen_x
        self.last_seen_y = last_seen_y
        self.cook_turns = cook_turns
        self.offense = offense
        self.current_energy=current_energy
        self.energy = energy
        self.max_energy = max_energy
        self.is_equipped=is_equipped
        self.weight = weight
        self.weapon_min = weapon_min
        self.weapon_max = weapon_max
        self.weapon_agi = weapon_agi
        self.Conceal_Bonus = Conceal_Bonus
        self.weapon_str = weapon_str
        self.Rank = Rank




        self.weapon_type = weapon_type
        self.faction = faction
        
        
        self.Memory = Memory
        self.monster_type = monster_type
        self.tale_told = tale_told
        self.damage = damage

        self.env = env
        self.patrol = patrol

        self.use_function = use_function
        self.eat_function = eat_function


        if self.fighter:  #let the fighter component know who owns it
            self.fighter.owner = self

        self.ai = ai
        if self.ai:  #let the AI component know who owns it
            self.ai.owner = self

        if self.item:  #let the Item component know who owns it
            self.item.owner = self

    

    def move(self, dx, dy, player=False):
        global objects, map
        #move by the given amount, if the destination is not blocked
        if not is_blocked(self.x + dx, self.y + dy):

            if self.name != 'player':
                
                try:
                    make_sound(self, sound_level2=1000)



                    if len(self.fighter.debuffs) > 0:
                        
                        for i in self.fighter.debuffs:
                            if i.turns % i.tick == 0:
                                i.debuff_apply()
                            i.turns -= 1

                        for i in self.fighter.debuffs:
                            if i.turns == 0:
                                self.fighter.debuffs.remove(i)
                                Dungeon.debuffs[2].remove(i)
                except:
                    print "Error in Moving : " + str(e)
                        
                

            if Dungeon.Terrain_type != 'West Gate':
                if Dungeon.Terrain_type == 'Wilderness':
                    if map[self.x+dx][self.y+dy].city_gate == True:
                        self.x += dx
                        self.y += dy
                    elif map[self.x+dx][self.y+dy].order == False and map[self.x+dx][self.y+dy].town == False and map[self.x+dx][self.y+dy].city_wall == False:
                        self.x += dx
                        self.y += dy
                else:
                    self.x += dx
                    self.y += dy
            
            
            else:
                if map[self.x+ dx][self.y + dy].order == False and map[self.x + dx][self.y + dy].gate == False:
                    self.x += dx
                    self.y += dy
            
            for i in objects:
                if i.name == "Lava":
                    xLava = i.x
                    yLava = i.y
                    
                    for e in objects:
                        if e.x == xLava and e.name != "Lava" and e.y == yLava and e.fighter != None:
                            stuff = libtcod.random_get_int(0, 1, 6)
                            e.fighter.take_damage(stuff)
                            
                            message(e.name + " takes " + str(stuff) + " damage from the Lava!", libtcod.red)         
                        
            
                
            

            if player == True:
                for i in objects:
                    if libtcod.map_is_in_fov(fov_map, i.x, i.y):
                        if i.fighter and i.monster_type != 'NPC':
                            try:
                                if 'Stunned' not in i.monster.debuffs:
                                    Energy.energy += get_weight(None)

                                    break
                            except:
                                if i.tale_told != 'Stunned':
                                    Energy.energy += get_weight(None)
                                    break
                                
                        elif i.fighter and i.monster_type == 'NPC':
                            if i.tale_told == 'Attacked' or i.tale_told == 'Done and Attacked':
                                Energy.energy += get_weight(None)
                                break
            return True
        return False

    

    def move_towards(self, target_x, target_y):
        #vector from this object to the target, and distance
        dx = target_x - self.x
        dy = target_y - self.y
        distance = math.sqrt((dx ** 2) + (dy ** 2))

        #normalize it to length 1 (preserving direction), then round it and
        #convert to integer so the movement is restricted to the map grid
        
        dx = int(round(dx / distance))
        
        
        dy = int(round(dy / distance))
        


        current_x = self.x
        current_y = self.y

        if(self.name == "Clever Barrel"):
            self.move(dx, dy)
            return False


        

        try:
            libtcod.map_compute_fov(fov_map, self.x, self.y, self.vision, FOV_LIGHT_WALLS, FOV_ALGO)
            
            if libtcod.map_is_in_fov(fov_map, player.x, player.y):
                if self.monster_type == 'NPC' and self.tale_told == 'Attacked':
                    self.move(dx, dy)
                
        except:
            pass
        

        if self.x == current_x and self.y == current_y:
            if map[self.x+1][self.y].block_sight:



                x = player.x
                y = player.y



                for i in range(15): #Checks East

                    if self.x+i == x and self.y+1 == y:
                        self.move(1,1)
                        break

                    if self.x+i == x and self.y-1 == y:
                        self.move(1, -1)
                        break




            if map[self.x-1][self.y].block_sight: #Checks West

                F = 2

                x = player.x
                y = player.y

                for i in range(15):
                    if self.x-i == x and self.y-1 == y:
                        self.move(-1, -1)
                        break
                    if self.x-i == x and self.y+1 == y:
                        self.move(-1, 1)
                        break

            if map[self.x+1][self.y].block_sight == True and self.x+2 == player.x:
                if map[self.x+1][self.y-1].block_sight == False:
                    self.move(1, -1)
                elif map[self.x+1][self.y+1].block_sight == False:
                    self.move(1, 1)





            if map[self.x][self.y-1].block_sight: #Checks North





                for i in range(15):
                    if self.x-1 == player.x and self.y-i == player.y:
                        self.move(-1, -1)
                        break
                    if self.x-1 == player.x and self.y+i == player.y:
                        self.move(-1, 1)
                        break

                    if self.x+1 == player.x and self.y-i == player.y:
                        self.move(1, -1)
                        break
                    if self.x+1 == player.x and self.y+i == player.y:
                        self.move(1, 1)
                        break



            if map[self.x][self.y+1].block_sight: #Checks South





                for i in range(15):
                    if self.x+1 == player.x and self.y-i == player.y:
                        self.move(1, -1)
                        break
                    if self.x+1 == player.x and self.y+i == player.y:
                        self.move(1, 1)
                        break


        
                
        

        
    def distance_to(self, other):
        #return the distance to another object
        dx = other.x - self.x
        dy = other.y - self.y
        return math.sqrt(dx ** 2 + dy ** 2)

    def distance(self, x, y):
        #return the distance to some coordinates
        return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2)

    def send_to_back(self):
        #make this object be drawn first, so all others appear above it if they're in the same tile.
        global objects
        objects.remove(self)
        objects.insert(0, self)

    def draw(self):
        global HOUR, MINUTE
        if map[self.x][self.y].explored and not (libtcod.map_is_in_fov(fov_map, self.x, self.y)):
            if self.name == 'Order Guard':
                for i in objects:
                    if i.name == 'Torch' and torch_distance(self, i.x, i.y) <= 6:
                        thing = torch_distance(self, i.x, i.y)
                        
                        libtcod.console_set_default_foreground(con, libtcod.Color(int(255/thing),int(255/thing),0))
                        libtcod.console_put_char(con, self.x, self.y, '.', libtcod.BKGND_NONE)
        #only show if it's visible to the player; or it's set to "always visible" and on an explored tile
        if (libtcod.map_is_in_fov(fov_map, self.x, self.y) or
                (self.always_visible and map[self.x][self.y].explored)):

            self.last_seen_x = self.x
            self.last_seen_y = self.y
            
            #set the color and then draw the character that represents this object at its position
            libtcod.console_set_default_foreground(con, self.color)
            libtcod.console_put_char(con, self.x, self.y, self.char, libtcod.BKGND_NONE)
            
            
        elif map[self.x][self.y].explored:
            
            try:
                if self.ai == None and self.name != "Dying Man":
                    libtcod.console_set_default_foreground(con, self.color)
                    libtcod.console_put_char(con, self.x, self.y, self.char, libtcod.BKGND_NONE)
                elif self.ai != None:
                    libtcod.console_set_default_foreground(con, libtcod.white)
                    libtcod.console_put_char(con, self.last_seen_x, self.last_seen_y, '?', libtcod.BKGND_NONE)

                    if self.last_seen_x != self.x and self.last_seen_y != self.y:
                        for i in objects:
                            if i.name == 'Torch' and torch_distance(self, i.x, i.y) <= i.radius:
                                thing = torch_distance(self, i.x, i.y)
                    
                            libtcod.console_put_char_ex(con, self.x, self.y, '.', libtcod.Color(int(255/thing),int(255/thing),0), libtcod.black)    
            except Exception as e:
                pass

            

    def clear(self):
        #erase the character that represents this object
        libtcod.console_put_char(con, self.x, self.y, ' ', libtcod.BKGND_NONE)


class Sound:
    def __init__(self, N=0, NW=0, W=0, SW=0, S=0, SE=0, E=0, NE=0):
        self.N = N
        self.NW = NW
        self.W = W
        self.SW = SW
        self.S = S
        self.SE = SE
        self.E = E
        self.NE = E

class Dungeon:
    def __init__(self, dungeon_level=0, danger_level=0, damage_min=0, skill_buffer=0, poop=0, age=0, Rivers = 0, count=0
                 , damage_max=0, Terrain_type='', temp='', temp2='', helm_info='', currencies={}, Spread=[], Shop=[], temp3=[], mountain_density=[], mountain_size=[], forest_density=[],
                 materials=[], explored=[], stuff=[], craft_list=[], copy=[], Terrain_list=[], Terrain_list2=[], Special=[], Dungeon_spawn=[], pot_list=[], cooking=[],
                 skills=['No skills'], recipies=[], original_recipies=[], skill_numbers=[], reputations=[], original=[], debuffs=[],
                 craft_names=[],journal='', xp={}, move={}, wall={},
                 Character=None):
        self.dungeon_level = dungeon_level
        self.danger_level = danger_level
        self.damage_min = damage_min
        self.skill_buffer = skill_buffer
        self.poop = poop
        self.age = age
        self.Rivers = Rivers
        self.count = count
        self.mountain_density = mountain_density
        self.mountain_size = mountain_size
        self.forest_density = forest_density
        self.damage_max = damage_max
        
        self.Terrain_type = Terrain_type
        self.temp = temp
        self.temp2 = temp2
        self.helm_info = helm_info
        self.currencies = currencies
        self.Spread = Spread
        self.Shop = Shop
        self.temp3 = temp3
        self.materials = materials
        self.explored = explored
        self.stuff = stuff
        self.craft_list = craft_list
        self.copy = copy
        self.Terrain_list = Terrain_list
        self.Terrain_list2 = Terrain_list2
        self.Special = Special
        self.Dungeon_spawn = Dungeon_spawn 
        self.pot_list = pot_list
        self.cooking = cooking
        self.skills = skills
        self.recipies = recipies
        self.original_recipies = original_recipies
        self.skill_numbers = skill_numbers
        self.reputations = reputations
        self.original = original
        self.debuffs = debuffs
        self.craft_names = craft_names
        self.journal = journal
        self.xp = xp
        self.move = move
        self.wall = wall
        
        self.Character = Character

#This is a Class that defines the energy differences and transfers to the monsters to reflect how many attacks/movements they get to do, compared to the player.
#The difference factor becomes greater, the greater the impact of respective weapon or movement is.
#This can cause a defficiency, i.e, a negative value, that can cause a "Energy debt", i.e, the enemy gets to spend a chunk of time to beat on you.

        


#Need to save attributes of this class - UNSAVED
        

    
        

##'Fire Resistance (+5% from ' + 'temp' + ')',
                               #'Cold Resistance (+5% from ' + 'temp' + ')',
                               #'Lightning Resistance (+5% from ' + 'temp' + ')',
                               #'Spirit Resistance (+5% from ' + 'temp' + ')',
class Fighter:
    #combat-related properties and methods for the PLAYER.
    def __init__(self, hp, max_hp, Race, Sub_race, Base_Endurance, Endurance, Base_Strength,
                 Strength, Base_Intellect, Intellect, Base_Spirit, Spirit, Base_Luck, Luck, Base_Agility,
                 Agility, Life_regen, Stamina, Max_stamina, Ki, Max_Ki, stat_defense, defense, xp, corruption, Life_leech, satiation
                 , max_satiation, metabolism, max_corruption, power_level=0, Block_Duration=0, Block_Bonus=0, Combat_damage=0, Crit_damage=0, stairs_out_x=0,
                 stairs_out_y=0, stairs_in_x=0, stairs_in_y=0, gold=0, fire_res=0, cold_res=0, lightning_res=0, spirit_res=0, Talent_Points=5, VISIBILITY=100,Base_Hearing=15, Hearing=15,
                  damage='', damage2='', scaling='', scaling2='',
                 scaling3='', scaling4='',Right=[], Left=[], Both=[], head=[],
                 neck=[], shoulders=[], chest=[], belt=[], gloves=[], bracers=[], legs=[], boots=[], ring1=[], ring2=[], trinket1=[],
                 trinket2=[] , traits=[], off1=[], off2=[], off3=[], off4=[], defense1=[], defense2=[], defense3=[], defense4=[], twoh1=[], twoh2=[], twoh3=[], twoh4=[],
                 elements1=[], elements2=[], elements3=[], elements4=[], unarmed1=[], unarmed2=[], unarmed3=[], unarmed4=[], read=[],
                 skill1=[' '], skill2=['Unarmed'], skill3=['Unarmed'], skill4=[' '], start = '', Debuffs=[], Buffs=[], Taken=[], name_state='', Name='', Class='',
                 Gender='', event=[], levels={}, kicked=False, past_first_level=False, wilderness_factor=False, death_function=None):
        
        self.base_max_hp = max_hp
        self.hp = hp
        self.Race = Race
        self.Sub_race = Sub_race
        self.Base_Hearing = Base_Hearing
        self.Hearing = Hearing
        self.Class = Class
        self.Gender = Gender
        self.Base_Endurance = Base_Endurance
        self.Endurance = Endurance
        self.Base_Strength = Base_Strength
        self.Strength = Strength
        self.Base_Intellect = Base_Intellect
        self.Intellect = Intellect
        self.Base_Spirit = Base_Spirit
        self.Spirit = Spirit
        self.Base_Luck = Base_Luck
        self.Luck = Luck
        self.Base_Agility = Base_Agility
        self.Agility = Agility
        self.Life_regen = Life_regen
        self.Stamina = Stamina
        self.Max_stamina = Max_stamina
        self.Ki = Ki
        self.Max_Ki = Max_Ki

        self.stat_defense = stat_defense
        self.base_defense = defense

        self.base_xp = xp
        self.corruption = corruption
        self.Life_leech = Life_leech
        self.satiation = satiation
        self.max_satiation = max_satiation
        self.metabolism = metabolism
        self.max_corruption = max_corruption
        self.power_level = power_level
        self.Block_Duration = Block_Duration
        self.Block_Bonus = Block_Bonus
        self.Combat_damage = Combat_damage
        self.Crit_damage = Crit_damage
        self.stairs_out_x = stairs_out_x
        self.stairs_out_y = stairs_out_y
        self.stairs_in_x = stairs_in_x
        self.stairs_in_y = stairs_in_y
        self.gold = gold

        

        self.fire_res = fire_res
        self.cold_res = cold_res
        self.lightning_res = lightning_res
        self.spirit_res = spirit_res

        self.Talent_Points = Talent_Points
        self.VISIBILITY = VISIBILITY



        self.damage = damage
        self.damage2 = damage2

        self.scaling = scaling
        self.scaling2 = scaling2


        self.Right = Right
        self.Left = Left
        self.Both = Both
        self.head = head
        self.neck = neck
        self.shoulders = shoulders
        self.chest = chest
        self.belt = belt
        self.gloves = gloves
        self.bracers = bracers
        self.legs = legs
        self.boots = boots
        self.ring1 = ring1
        self.ring2 = ring2
        self.trinket1 = trinket1
        self.trinket2 = trinket2

        self.traits = traits
        
        self.off1 = off1
        self.off2 = off2
        self.off3 = off3
        self.off4 = off4
        
        self.defense1 = defense1
        self.defense2 = defense2
        self.defense3 = defense3
        self.defense4 = defense4
        
        self.twoh1 = twoh1
        self.twoh2 = twoh2
        self.twoh3 = twoh3
        self.twoh4 = twoh4
        
        self.elements1 = elements1
        self.elements2 = elements2
        self.elements3 = elements3
        self.elements4 = elements4
        
        self.unarmed1 = unarmed1
        self.unarmed2 = unarmed2
        self.unarmed3 = unarmed3
        self.unarmed4 = unarmed4

        self.read = read
        
        self.skill1 = skill1
        self.skill2 = skill2
        self.skill3 = skill3
        self.skill4 = skill4
        self.start = start
        self.Debuffs = Debuffs
        self.Buffs = Buffs

        self.Taken = Taken
        
        self.name_state = name_state
        self.Name = Name

        self.event = event
        self.levels = levels
        self.kicked = kicked
        self.past_first_level = past_first_level
        self.wilderness_factor = wilderness_factor
        self.death_function = death_function



    @property
    def defense(self):  #return actual defense, by summing up the bonuses from all equipped items

        return self.stat_defense + int(round(self.Endurance/5)) + self.Block_Bonus

    @property
    def max_hp(self):  #return actual max_hp, by summing up the bonuses from all equipped items

        return self.base_max_hp
    @property
    def xp(self):  #return actual xp yield

        return self.base_xp

    def attack(self, target, derp=False):
##  Implement the energy yield and relativity of energy costs versus breakpoint
        global hit_name

        

        
        if derp == True:
            maximum = 1
            strength = 1
            if get_equipped_in_left_slot(player.fighter.Right, 'Shield') != None and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:
                #Access the weight attributes in respective hand, make a scaling modification to the damage:
                #    Ideas for scaling Modification: Weight, Level (Player), Block Value, Material (Not Implemented)
                #    Put a scaling factor to how much stamina it costs, based on the weight of the Shield
                #    Look into making the printed Str value different colour apart from Yellow based on said weight.
                #    Weight threshholds? 
                
##                strength = int(round(player.fighter.Base_Strength/5)) Trash
                player.fighter.Combat_damage = libtcod.random_get_int(0, 1, maximum) + strength - target.fighter.defense + 1000
                
            elif get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None and get_equipped_in_left_slot(player.fighter.Left, 'Shield') != None:
                player.fighter.Combat_damage = libtcod.random_get_int(0, 1, maximum) + strength - target.fighter.defense + 1000
                
            elif get_equipped_in_left_slot(player.fighter.Right, 'Shield') != None and get_equipped_in_left_slot(player.fighter.Left, 'Shield') != None:
                player.fighter.Combat_damage = libtcod.random_get_int(0, 1, maximum) + strength - target.fighter.defense + 1000
                


        if derp == False:
            player.fighter.Combat_damage = 0
        player.fighter.Crit_damage = 0

        hit = libtcod.random_get_int(0, 1, 100) + self.Base_Agility
        try:
            hit -= target.fighter.evade
        except:
            pass
        
        second_hit_roll = libtcod.random_get_int(0, 1, 100) + self.Base_Agility
        try:
            second_hit_roll -= target.fighter.evade
        except:
            pass

        hit_name = target.name
        

        if target.name == 'Old Orc':

            if target.tale_told == 'Stunned':
                target.tale_told = 'Done and Attacked'


            if target.tale_told == 'Done':
                target.tale_told = 'Done and Attacked'
                message('After the trust i put in you, you try to kill me?!', libtcod.red)

            elif target.tale_told == '':
                target.tale_told = 'Attacked'
                with open('derp.rtf') as f:
                    lines = list(islice(f, 122, 138))
                inspect_menu('Actions and Consequences', lines, 60)

            if target.tale_told != 'Done and Attacked':
                stuff = libtcod.random_get_int(0, 1, 3)

                if stuff == 2:
                    derp2 = libtcod.random_get_int(0, 1, 4)
                    if derp2 == 1:
                        message('I will fight you, if i must!', libtcod.red)
                    if derp2 == 2:
                        message('I may be old, but i can still fight!', libtcod.red)
                    if derp2 == 3:
                        message('Your end draws near!', libtcod.red)
                    if derp2 == 4:
                        message('You dare?!', libtcod.red)

        else:
            if target.tale_told == 'Stunned':
                target.tale_told = 'Done and Attacked'


            if target.tale_told == 'Done':
                target.tale_told = 'Done and Attacked'
                

            elif target.tale_told == '':
                target.tale_told = 'Attacked'




        #a simple formula for attack damage

        if derp == True:
            if player.fighter.Sub_race == 'Child of the Order':
                player.fighter.Combat_damage *= (1.00 + (player.fighter.Base_Spirit/50))
                if target.fighter.race == 'Demon' or target.fighter.race == 'Undead':
                    player.fighter.Combat_damage = player.fighter.Combat_damage * 1.10


            if player.fighter.Sub_race == 'Mumuh-khan':
                player.fighter.Combat_damage *= 1.25

            if len(player.fighter.traits) > 0:
                if 'Betrayer (+% Damage against Friendly NPCs)' in player.fighter.traits:
                    if target.tale_told == 'Attacked' or target.tale_told == 'Done and Attacked':
                        player.fighter.Combat_damage *= 1.10

            message('You slam the ' + str(target.name) + '!', libtcod.green)

            player.fighter.Combat_damage = int(player.fighter.Combat_damage)
            
            message('The ' + str(target.name) + ' takes ' + str(player.fighter.Combat_damage) + ' damage!', libtcod.red)

            target.fighter.take_damage(player.fighter.Combat_damage)

            
            
            
            

        if len(player.fighter.Right) == 0 and len(player.fighter.Left) == 0 and derp == False:

            minimum = 1
            maximum = 10
            strength = int(round(player.fighter.Base_Strength/5))
            player.fighter.Combat_damage = libtcod.random_get_int(0, minimum, maximum) + strength - target.fighter.defense

            if player.fighter.Sub_race == 'Child of the Order':
                player.fighter.Combat_damage *= (1.00 + (player.fighter.Base_Spirit/50))
                if target.fighter.race == 'Demon' or target.fighter.race == 'Undead':
                    player.fighter.Combat_damage = player.fighter.Combat_damage * 1.10


            if player.fighter.Sub_race == 'Mumuh-khan':
                player.fighter.Combat_damage *= 1.25

            if len(player.fighter.traits) > 0:
                if 'Betrayer (+% Damage against Friendly NPCs)' in player.fighter.traits:
                    if target.tale_told == 'Attacked' or target.tale_told == 'Done and Attacked':
                        player.fighter.Combat_damage *= 1.10

            player.fighter.Combat_damage = int(round(player.fighter.Combat_damage)) + player.fighter.Crit_damage
            player.fighter.Crit_damage = 0



            if player.fighter.Combat_damage > 0:
                #make the target take some damage

                named_npcs = ['Old Marek', 'Captain Dalmer']
                if target.name in named_npcs:
                    message('Your attack hits ' + target.name + ' for ' + str(player.fighter.Combat_damage) + ' damage.', libtcod.light_red)
                if target.name not in named_npcs:
                    message('Your attack hits the ' + target.name + ' for ' + str(player.fighter.Combat_damage) + ' damage.', libtcod.light_red)
                target.fighter.take_damage(player.fighter.Combat_damage)
                player.fighter.heal(player.fighter.Life_leech)

            if player.fighter.Combat_damage <= 0:
                named_npcs = ['Old Marek', 'Captain Dalmer']
                if target.name in named_npcs:
                    message("Your attack hits " + target.name + ", but doesn't cause any damage!", libtcod.cyan)
                if target.name not in named_npcs:
                    message("Your attack hits the " + target.name + ", but doesn't cause any damage!", libtcod.cyan)

            Energy.energy += get_weight(None)

        if len(player.fighter.Right) != 0 and len(player.fighter.Left) != 0 and derp == False:




            if hit > 25 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None and len(player.fighter.Right) > 0:
                
                minimum = player.fighter.Right[0].weapon_min
                maximum = player.fighter.Right[0].weapon_max
                strength = player.fighter.Right[0].weapon_str
                agility = player.fighter.Right[0].weapon_agi
                player.fighter.Combat_damage = libtcod.random_get_int(0, minimum, maximum) + strength - target.fighter.defense + agility
                try:
                    player.fighter.Combat_damage += (player.fighter.Right[0].fire + player.fighter.Right[0].ice + player.fighter.Right[0].lightning)
                except:
                    pass
                    
                try:
                    player.fighter.Combat_damage += (player.fighter.Right[0].spirit)
                except:
                    pass

                crit_chanse = libtcod.random_get_int(0, 1, 100)
                to_crit = player.fighter.Right[0].to_crit

                

                


                if crit_chanse <= to_crit:
                    
                    
                    if player.fighter.Right[0].name == 'Iron Axe':
                        named_npcs = ['Old Marek', 'Captain Dalmer']
                        if target.name in named_npcs:
                            message('You stab ' + target.name + ' in a vital spot!', libtcod.light_red)
                        elif target.name not in named_npcs:
                            message('You stab the ' + target.name + ' in a vital spot!', libtcod.light_red)
                        player.fighter.Crit_damage += libtcod.random_get_int(0, 5, 11) + int(round(self.Base_Agility/4)) + int(round(self.Base_Strength/5)) - target.fighter.defense
                       

                    if player.fighter.Right[0].name == 'Club':
                        if target.fighter.armored == True:
                            message('You break a piece of the ' + target.fighter.name + 's armor!', libtcod.light_red)
                            target.fighter.defense -= 2

                    elif player.fighter.Right[0].name == 'Pile of Bones':
                        named_npcs = ['Captain Dalmer']

                        if target.name in named_npcs and target.fighter.armored == True:
                            stuff = libtcod.random_get_int(0, 1, 2)
                            target.fighter.defense -= stuff
                            if stuff == 2:
                                message('You break a larger piece of ' + target.name + 's armor!', libtcod.light_red)
                            else:
                                message('You break a smaller piece of ' + target.name + 's armor!', libtcod.light_red)

                    elif player.fighter.Right[0].name == 'Sword': #Swords can bypass the target.fighter.defense by half, but never remove it.

                        named_npcs = ['Captain Dalmer']

                        if target.name in named_npcs:
                            message('You lunge at ' + target.name + ', hitting a weak spot!', libtcod.light_red)
                            player.fighter.Crit_damage += int(round(player.fighter.Combat_damage * 0.5))

                        elif target.name not in named_npcs:
                            message('You lunge at the ' + target.name + ' hitting a weak spot!', libtcod.light_red)
                            player.fighter.Crit_damage += int(round(player.fighter.Combat_damage * 0.5))

                    elif player.fighter.Right[0].name == 'Sword of Flame':
                        if target.fighter.burn == 0:
                            message('The ' + target.name + ' is set ablaze!', libtcod.dark_orange)
                        elif target.fighter.burn >= 1:
                            message('The flames burn even brighter!', libtcod.dark_orange)
                        target.fighter.burn += 4
                        





                
                        

                if player.fighter.Sub_race == 'Child of the Order':
                    player.fighter.Combat_damage *= (1.00 + (player.fighter.Base_Spirit/50))
                    if target.fighter.race == 'Demon' or target.fighter.race == 'Undead':
                        player.fighter.Combat_damage = player.fighter.Combat_damage * 1.10


                if player.fighter.Sub_race == 'Mumuh-khan':
                    player.fighter.Combat_damage *= 1.25

                if len(player.fighter.traits) > 0:
                    if 'Betrayer (+% Damage against Friendly NPCs)' in player.fighter.traits:
                        if target.tale_told == 'Attacked' or target.tale_told == 'Done and Attacked':
                            player.fighter.Combat_damage *= 1.10

                player.fighter.Combat_damage = int(round(player.fighter.Combat_damage)) + player.fighter.Crit_damage
                player.fighter.Crit_damage = 0



                if player.fighter.Combat_damage > 0:
                    #make the target take some damage

                    named_npcs = ['Old Marek', 'Captain Dalmer']
                    if target.name in named_npcs:
                        message('Your attack hits ' + target.name + ' for ' + str(player.fighter.Combat_damage) + ' damage.', libtcod.light_red)
                    if target.name not in named_npcs:
                        message('Your attack hits the ' + target.name + ' for ' + str(player.fighter.Combat_damage) + ' damage.', libtcod.light_red)
                    target.fighter.take_damage(player.fighter.Combat_damage)
                    player.fighter.heal(player.fighter.Life_leech)

                if player.fighter.Combat_damage <= 0:
                    named_npcs = ['Old Marek', 'Captain Dalmer']
                    if target.name in named_npcs:
                        message("Your attack hits " + target.name + ", but doesn't cause any damage!", libtcod.cyan)
                    if target.name not in named_npcs:
                        message("Your attack hits the " + target.name + ", but doesn't cause any damage!", libtcod.cyan)

            if hit <= 25 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None and len(player.fighter.Right) > 0:
                named_npcs = ['Old Marek', 'Captain Dalmer']
                if target.name in named_npcs:
                    message('Your attack misses ' + target.name + '!', libtcod.cyan)
                if target.name not in named_npcs:
                    message('Your attack misses the ' + target.name + '!', libtcod.cyan)

                player.fighter.Crit_damage = 0

            Energy.energy += get_weight(player.fighter.Right)

            
            

            if second_hit_roll > 25 and len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:
                minimum = player.fighter.Left[0].weapon_min
                maximum = player.fighter.Left[0].weapon_max
                strength = player.fighter.Left[0].weapon_str
                agility = player.fighter.Left[0].weapon_agi
                player.fighter.Combat_damage = libtcod.random_get_int(0, minimum, maximum) + strength - target.fighter.defense + agility

                try:
                    player.fighter.Combat_damage += (player.fighter.Left[0].fire + player.fighter.Left[0].ice + player.fighter.Left[0].lightning)
                except:
                    pass
                try:
                    player.fighter.Combat_damage += (player.fighter.Left[0].spirit)
                except:
                    pass

                crit_chanse = libtcod.random_get_int(0, 1, 100)
                to_crit = player.fighter.Left[0].to_crit
                


                if crit_chanse <= to_crit:
                    
                    
                    if player.fighter.Left[0].name == 'Iron Axe':
                        named_npcs = ['Old Marek', 'Captain Dalmer']
                        if target.name in named_npcs:
                            message('You stab ' + target.name + ' in a vital spot!', libtcod.light_red)
                        elif target.name not in named_npcs:
                            message('You stab the ' + target.name + ' in a vital spot!', libtcod.light_red)
                        player.fighter.Crit_damage += libtcod.random_get_int(0, 5, 11) + int(round(self.Base_Agility/4)) + int(round(self.Base_Strength/5)) - target.fighter.defense
                       

                    if player.fighter.Left[0].name == 'Club':
                        if target.fighter.armored == True:
                            message('You break a piece of the ' + target.fighter.name + 's armor!', libtcod.light_red)
                            target.fighter.defense -= 2

                    elif player.fighter.Left[0].name == 'Pile of Bones':
                        named_npcs = ['Captain Dalmer']

                        if target.name in named_npcs and target.fighter.armored == True:
                            stuff = libtcod.random_get_int(0, 1, 2)
                            target.fighter.defense -= stuff
                            if stuff == 2:
                                message('You break a larger piece of ' + target.name + 's armor!', libtcod.light_red)
                            else:
                                message('You break a smaller piece of ' + target.name + 's armor!', libtcod.light_red)

                    elif player.fighter.Left[0].name == 'Sword': #Swords can bypass the target.fighter.defense by half, but never remove it.

                        named_npcs = ['Captain Dalmer']

                        if target.name in named_npcs:
                            message('You lunge at ' + target.name + ', hitting a weak spot!', libtcod.light_red)
                            player.fighter.Crit_damage += int(round(player.fighter.Combat_damage * 0.5))

                        elif target.name not in named_npcs:
                            message('You lunge at the ' + target.name + ' hitting a weak spot!', libtcod.light_red)
                            player.fighter.Crit_damage += int(round(player.fighter.Combat_damage * 0.5))

                    elif player.fighter.Left[0].name == 'Sword of Flame':
                        if target.fighter.burn == 0:
                            message('The ' + target.name + ' is set ablaze!', libtcod.dark_orange)
                        elif target.fighter.burn >= 1:
                            message('The flames burn even brighter!', libtcod.dark_orange)
                        target.fighter.burn += 4

                if player.fighter.Sub_race == 'Child of the Order':
                    player.fighter.Combat_damage *= (1.00 + (player.fighter.Base_Spirit/50))
                    if target.fighter.race == 'Demon' or target.fighter.race == 'Undead':
                        player.fighter.Combat_damage = player.fighter.Combat_damage * 1.10


                elif player.fighter.Sub_race == 'Mumuh-khan':
                    player.fighter.Combat_damage *= 1.25

                if len(player.fighter.traits) > 0:
                    if 'Betrayer (+% Damage against Friendly NPCs)' in player.fighter.traits:
                        if target.tale_told == 'Attacked' or target.tale_told == 'Done and Attacked':
                            player.fighter.Combat_damage *= 1.10

                player.fighter.Combat_damage = int(round((int(round(player.fighter.Combat_damage)) + player.fighter.Crit_damage)/2))
                player.fighter.Crit_damage = 0



                if player.fighter.Combat_damage > 0 and target.fighter.status != 'Dead':
                    #make the target take some damage

                    named_npcs = ['Old Marek', 'Captain Dalmer']
                    if target.name in named_npcs:
                        message('Your attack hits ' + target.name + ' for ' + str(player.fighter.Combat_damage) + ' damage.', libtcod.light_red)
                    elif target.name not in named_npcs:
                        message('Your attack hits the ' + target.name + ' for ' + str(player.fighter.Combat_damage) + ' damage.', libtcod.light_red)
                    target.fighter.take_damage(player.fighter.Combat_damage)
                    player.fighter.heal(player.fighter.Life_leech)

                elif player.fighter.Combat_damage <= 0:
                    named_npcs = ['Old Marek', 'Captain Dalmer']
                    if target.name in named_npcs:
                        message("Your attack hits " + target.name + ", but doesn't cause any damage!", libtcod.cyan)
                    elif target.name not in named_npcs:
                        message("Your attack hits the " + target.name + ", but doesn't cause any damage!", libtcod.cyan)

            if second_hit_roll <= 25 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None and len(player.fighter.Left) > 0 and target.fighter.status == 'Alive':
                named_npcs = ['Old Marek', 'Captain Dalmer']
                if target.name in named_npcs:
                    message('Your attack misses ' + target.name + '!', libtcod.cyan)
                elif target.name not in named_npcs:
                    message('Your attack misses the ' + target.name + '!', libtcod.cyan)

                player.fighter.Crit_damage = 0

            Energy.energy += get_weight(player.fighter.Left)

            
            



        elif len(player.fighter.Right) != 0 or len(player.fighter.Left) != 0 and derp == False:
            
            
            
            if hit > 25 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None or get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:
                
                
                message('Took path of left or right' + str(Energy.energy))


                if len(player.fighter.Right) != 0:
                    Energy.energy += get_weight(player.fighter.Right)
                    minimum = player.fighter.Right[0].weapon_min
                    maximum = player.fighter.Right[0].weapon_max
                    strength = player.fighter.Right[0].weapon_str
                    agility = player.fighter.Right[0].weapon_agi
                    player.fighter.Combat_damage = libtcod.random_get_int(0, minimum, maximum) + strength - target.fighter.defense + agility
                    try:
                        player.fighter.Combat_damage += (player.fighter.Right[0].fire + player.fighter.Right[0].ice + player.fighter.Right[0].lightning)
                    except:
                        pass
                    try:
                        player.fighter.Combat_damage += (player.fighter.Right[0].spirit)
                    except:
                        pass

                    

                elif len(player.fighter.Left) != 0:
                    minimum2 = player.fighter.Left[0].weapon_min
                    maximum2 = player.fighter.Left[0].weapon_max
                    strength2 = player.fighter.Left[0].weapon_str
                    agility2 = player.fighter.Left[0].weapon_agi

                    Energy.energy += get_weight(player.fighter.Left)
                    player.fighter.Combat_damage = libtcod.random_get_int(0, minimum2, maximum2) + strength2 - target.fighter.defense + agility2
                    try:
                        player.fighter.Combat_damage += (player.fighter.Left[0].fire + player.fighter.Left[0].ice + player.fighter.Left[0].lightning)
                    except:
                        pass
                    try:
                        player.fighter.Combat_damage += (player.fighter.Left[0].spirit)
                    except:
                        pass


                if len(player.fighter.Right) > 0 and hit > 25:
                    crit_chanse = libtcod.random_get_int(0, 1, 100)
                    to_crit = player.fighter.Right[0].to_crit
                    


                    if crit_chanse <= to_crit:
                        
                        
                        
                        if player.fighter.Right[0].name == 'Iron Axe':
                            named_npcs = ['Old Marek', 'Captain Dalmer']
                            if target.name in named_npcs:
                                message('You stab ' + target.name + ' in a vital spot!', libtcod.light_red)
                            elif target.name not in named_npcs:
                                message('You stab the ' + target.name + ' in a vital spot!', libtcod.light_red)
                            player.fighter.Crit_damage += libtcod.random_get_int(0, 5, 11) + int(round(self.Base_Agility/4)) + int(round(self.Base_Strength/5)) - target.fighter.defense
                           

                        elif player.fighter.Right[0].name == 'Club':
                            if target.fighter.armored == True:
                                message('You break a piece of the ' + target.fighter.name + 's armor!', libtcod.light_red)
                                target.fighter.defense -= 2

                        elif player.fighter.Right[0].name == 'Pile of Bones':
                            named_npcs = ['Captain Dalmer']

                            if target.name in named_npcs and target.fighter.armored == True:
                                stuff = libtcod.random_get_int(0, 1, 2)
                                target.fighter.defense -= stuff
                                if stuff == 2:
                                    message('You break a larger piece of ' + target.name + 's armor!', libtcod.light_red)
                                else:
                                    message('You break a smaller piece of ' + target.name + 's armor!', libtcod.light_red)

                        elif player.fighter.Right[0].name == 'Sword': #Swords can bypass the target.fighter.defense by half, but never remove it.

                            named_npcs = ['Captain Dalmer']

                            if target.name in named_npcs:
                                message('You lunge at ' + target.name + ', hitting a weak spot!', libtcod.light_red)
                                player.fighter.Crit_damage += int(round(player.fighter.Combat_damage * 0.5))

                            elif target.name not in named_npcs:
                                message('You lunge at the ' + target.name + ' hitting a weak spot!', libtcod.light_red)
                                player.fighter.Crit_damage += int(round(player.fighter.Combat_damage * 0.5))

                        elif player.fighter.Right[0].name == 'Sword of Flame':
                            if target.fighter.burn == 0:
                                message('The ' + target.name + ' is set ablaze!', libtcod.dark_orange)
                            elif target.fighter.burn >= 1:
                                message('The flames burn even brighter!', libtcod.dark_orange)
                            target.fighter.burn += 4
                        

                elif len(player.fighter.Left) > 0 and hit > 25:
                    crit_chanse = libtcod.random_get_int(0, 1, 100)
                    to_crit = player.fighter.Left[0].to_crit



                    if crit_chanse <= to_crit:
                        
                        
                        if player.fighter.Left[0].name == 'Iron Axe':
                            named_npcs = ['Old Marek', 'Captain Dalmer']
                            if target.name in named_npcs:
                                message('You stab ' + target.name + ' in a vital spot!', libtcod.light_red)
                            elif target.name not in named_npcs:
                                message('You stab the ' + target.name + ' in a vital spot!', libtcod.light_red)
                            player.fighter.Crit_damage += libtcod.random_get_int(0, 5, 11) + int(round(self.Base_Agility/4)) + int(round(self.Base_Strength/5)) - target.fighter.defense
                           

                        elif player.fighter.Left[0].name == 'Club':
                            if target.fighter.armored == True:
                                message('You break a piece of the ' + target.fighter.name + 's armor!', libtcod.light_red)
                                target.fighter.defense -= 2

                        elif player.fighter.Left[0].name == 'Pile of Bones':
                            named_npcs = ['Captain Dalmer']

                            if target.name in named_npcs and target.fighter.armored == True:
                                stuff = libtcod.random_get_int(0, 1, 2)
                                target.fighter.defense -= stuff
                                if stuff == 2:
                                    message('You break a larger piece of ' + target.name + 's armor!', libtcod.light_red)
                                else:
                                    message('You break a smaller piece of ' + target.name + 's armor!', libtcod.light_red)

                        elif player.fighter.Left[0].name == 'Sword': #Swords can bypass the target.fighter.defense by half, but never remove it.

                            named_npcs = ['Captain Dalmer']

                            if target.name in named_npcs:
                                message('You lunge at ' + target.name + ', hitting a weak spot!', libtcod.light_red)
                                player.fighter.Crit_damage += int(round(player.fighter.Combat_damage * 0.5))

                            elif target.name not in named_npcs:
                                message('You lunge at the ' + target.name + ' hitting a weak spot!', libtcod.light_red)
                                player.fighter.Crit_damage += int(round(player.fighter.Combat_damage * 0.5))

                        elif player.fighter.Left[0].name == 'Sword of Flame':
                            if target.fighter.burn == 0:
                                message('The ' + target.name + ' is set ablaze!', libtcod.dark_orange)
                            elif target.fighter.burn >= 1:
                                message('The flames burn even brighter!', libtcod.dark_orange)
                            target.fighter.burn += 4


                if player.fighter.Sub_race == 'Child of the Order':
                    player.fighter.Combat_damage *= (1.00 + (player.fighter.Base_Spirit/50))
                    if target.fighter.race == 'Demon' or target.fighter.race == 'Undead':
                        player.fighter.Combat_damage = player.fighter.Combat_damage * 1.10
                        


                elif player.fighter.Sub_race == 'Mumuh-khan':
                    player.fighter.Combat_damage *= 1.25

                if len(player.fighter.traits) > 0:
                    if 'Betrayer (+% Damage against Friendly NPCs)' in player.fighter.traits:
                        if target.tale_told == 'Attacked' or target.tale_told == 'Done and Attacked':
                            player.fighter.Combat_damage *= 1.10

                player.fighter.Combat_damage = int(round(player.fighter.Combat_damage)) + player.fighter.Crit_damage
                player.fighter.Crit_damage = 0

                



                if player.fighter.Combat_damage > 0 and hit > 25:
                    #make the target take some damage

                    named_npcs = ['Old Marek', 'Captain Dalmer']
                    if 'Off Talent 3' in player.fighter.event:
                        #Sleep
                        pass
                    if target.name in named_npcs:
                        message('You' + ' attack ' + target.name + ' for ' + str(player.fighter.Combat_damage) + ' damage.', libtcod.light_red)
                    elif target.name not in named_npcs:
                        message('You' + ' attack the ' + target.name + ' for ' + str(player.fighter.Combat_damage) + ' damage.', libtcod.light_red)
                    target.fighter.take_damage(player.fighter.Combat_damage)
                    player.fighter.heal(player.fighter.Life_leech)

                if player.fighter.Combat_damage <= 0 and hit > 25:
                    named_npcs = ['Old Marek', 'Captain Dalmer']
                    if target.name in named_npcs:
                        message("You hit " + target.name + ", but you don't manage to cause any damage!", libtcod.cyan)
                    elif target.name not in named_npcs:
                        message("You hit the " + target.name + ", but you don't manage to cause any damage!", libtcod.cyan)
                elif hit <= 25:
                    named_npcs = ['Old Marek', 'Captain Dalmer']
                    if target.name in named_npcs:
                        message('You' + ' attack ' + target.name + ', but miss!', libtcod.cyan)
                    elif target.name not in named_npcs:
                        message('You' + ' attack the ' + target.name + ', but miss!', libtcod.cyan)

                    player.fighter.Crit_damage = 0
                    

        
        
        if len(player.fighter.Both) != 0 and derp == False:

            Energy.energy += get_weight(player.fighter.Both)

            if hit > 25:
                player.fighter.Combat_damage = libtcod.random_get_int(0, player.fighter.Both[0].weapon_min , player.fighter.Both[0].weapon_max)
                player.fighter.Combat_damage += player.fighter.Both[0].weapon_str - target.fighter.defense
                try:
                    player.fighter.Combat_damage += (player.fighter.Both[0].fire + player.fighter.Both[0].ice + player.fighter.Both[0].lightning)
                except:
                    pass
                try:
                    player.fighter.Combat_damage += (player.fighter.Both[0].spirit)
                except:
                    pass

                if player.fighter.Both[0].name == 'Burning Rage':
                    thing = libtcod.random_get_int(0, 0, 2)
                    if thing == 0:
                        message('Suffer as i did!', libtcod.red)
                    if thing == 1:
                        message('They shall slay you, as you slew me!', libtcod.red)

                    if thing == 2:
                        message('Our fates are sealed.', libtcod.red)

                   
                    
                    player.fighter.hp -= 2

            else:


                named_npcs = ['Old Marek', 'Captain Dalmer']
                if target.name in named_npcs:
                    message('You' + ' attack ' + target.name + ', but miss!', libtcod.cyan)
                elif target.name not in named_npcs:
                    message('You' + ' attack the ' + target.name + ', but miss!', libtcod.cyan)

                player.fighter.Crit_damage = 0
            
            

        if hit > 25:

            try:
                if(get_weapon_in_slot(player.fighter.Left) != None):
                    if(get_weapon_in_slot(player.fighter.Left)).hit_effect != None:
                        proc = libtcod.random_get_int(0, 1, 100)
                        if(proc < (get_weapon_in_slot(player.fighter.Left).proc_chanse)):
                            (get_weapon_in_slot(player.fighter.Left)).hit_effect()
            except Exception as e:
                print str("ERROR IN HIT" + str(e))
            if(get_weapon_in_slot(player.fighter.Right) != None):
                if(get_weapon_in_slot(player.fighter.Right)).hit_effect != None:
                    proc = libtcod.random_get_int(0, 1, 100)
                    if(proc < (get_weapon_in_slot(player.fighter.Right).proc_chanse)):
                        (get_weapon_in_slot(player.fighter.Right)).hit_effect()

    def take_damage(self, damage):
        #apply damage if possible
        message('derp')


            #check for death. if there's a death function, call it




    def heal(self, amount):
        #heal by the given amount, without going over the maximum
        self.hp += amount
        if self.hp > self.max_hp:
            self.hp = self.max_hp



class Buff:
    def __init__(self,name, duration, effect, buffs):
        self.name = name
        self.duration = duration
        self.effect = effect
        self.buffs = buffs


    
            
    

def scalings():


    #Current project, search CURRENT to find

    if len(player.fighter.Right) == 0 and len(player.fighter.Left) == 0 and len(player.fighter.Both) == 0:

        player.fighter.damage = 'Unarmed: ' + str(player.fighter.Base_Strength/5)
        player.fighter.scaling = 'Damage from Strength : ' + 'Strength/5'

        player.fighter.damage2 = ''
        player.fighter.scaling2 = ''

    elif len(player.fighter.Right) != 0 and len(player.fighter.Left) == 0:

        stuff = player.fighter.Right[0].weapon_min
        try:
            stuff += player.fighter.Right[0].fire
            stuff += player.fighter.Right[0].ice
            stuff += player.fighter.Right[0].lightning
            stuff += player.fighter.Right[0].spirit
        except:
            pass
        stuff2 = player.fighter.Right[0].weapon_max
        try:
            stuff2 += player.fighter.Right[0].fire
            stuff2 += player.fighter.Right[0].ice
            stuff2 += player.fighter.Right[0].lightning
            stuff2 += player.fighter.Right[0].spirit
        except:
            pass

        player.fighter.damage = 'Right Hand: ' + str(stuff) + ' to ' + str(stuff2) + '.'
        
        try:
            player.fighter.damage += ' (Fire(' + str(player.fighter.Right[0].fire) + '), Ice(' + str(player.fighter.Right[0].ice)
        except:
            pass
        try:
            player.fighter.damage += '), Lightning(' + str(player.fighter.Right[0].lightning) + '), Spirit(' + str(player.fighter.Right[0].spirit) + '))'
        except:
            pass
        player.fighter.scaling = 'Damage from Strength : ' + str(player.fighter.Right[0].weapon_str)

        player.fighter.damage2 = ''
        player.fighter.scaling2 = 'Damage from Agility : ' + str(player.fighter.Right[0].weapon_agi)

    elif len(player.fighter.Right) != 0 and len(player.fighter.Left) != 0:

        stuff = player.fighter.Right[0].weapon_min
        try:
            stuff += player.fighter.Right[0].fire
            stuff += player.fighter.Right[0].ice
            stuff += player.fighter.Right[0].lightning
            stuff += player.fighter.Right[0].spirit
        except:
            pass
        stuff2 = player.fighter.Right[0].weapon_max
        try:
            stuff2 += player.fighter.Right[0].fire
            stuff2 += player.fighter.Right[0].ice
            stuff2 += player.fighter.Right[0].lightning
            stuff2 += player.fighter.Right[0].spirit
        except:
            pass
        
        player.fighter.damage = 'Right Hand: ' + str(stuff) + ' to ' + str(stuff2) + '.'
        try:
            player.fighter.damage += ' (Fire(' + str(player.fighter.Right[0].fire) + '), Ice(' + str(player.fighter.Right[0].ice)
        except:
            pass
        try:
            player.fighter.damage += '), Lightning(' + str(player.fighter.Right[0].lightning) + '), Spirit(' + str(player.fighter.Right[0].spirit) + '))'
        except:
            pass
        player.fighter.scaling = 'Damage from Strength : ' + str(player.fighter.Right[0].weapon_str)

        stuff3 = player.fighter.Left[0].weapon_min
        try:
            stuff += player.fighter.Left[0].fire
            stuff += player.fighter.Left[0].ice
            stuff += player.fighter.Left[0].lightning
            stuff += player.fighter.Left[0].spirit
        except:
            pass
        stuff4 = player.fighter.Left[0].weapon_max
        try:
            stuff2 += player.fighter.Left[0].fire
            stuff2 += player.fighter.Left[0].ice
            stuff2 += player.fighter.Left[0].lightning
            stuff2 += player.fighter.Left[0].spirit
        except:
            pass

        player.fighter.damage2 = 'Left Hand: ' + str(stuff3) + ' to ' + str(stuff4) + '.'
        try:
            player.fighter.damage2 += ' (Fire(' + str(player.fighter.Left[0].fire) + '), Ice(' + str(player.fighter.Left[0].ice)
        except:
            pass
        try:
            player.fighter.damage2 += '), Lightning(' + str(player.fighter.Left[0].lightning) + '), Spirit(' + str(player.fighter.Left[0].spirit) + '))'
        except:
            pass
        player.fighter.scaling2 = 'Damage from Agility : ' + str(player.fighter.Right[0].weapon_agi)

        player.fighter.scaling3 = 'Damage from Strength : ' + str(player.fighter.Left[0].weapon_str)
        player.fighter.scaling4 = 'Damage from Agility : ' + str(player.fighter.Left[0].weapon_agi)


    elif len(player.fighter.Right) == 0 and len(player.fighter.Left) != 0:

        stuff = player.fighter.Left[0].weapon_min
        try:
            stuff += player.fighter.Left[0].fire
            stuff += player.fighter.Left[0].ice
            stuff += player.fighter.Left[0].lightning
            stuff += player.fighter.Left[0].spirit
        except:
            pass
        stuff2 = player.fighter.Left[0].weapon_max
        try:
            stuff2 += player.fighter.Left[0].fire
            stuff2 += player.fighter.Left[0].ice
            stuff2 += player.fighter.Left[0].lightning
            stuff2 += player.fighter.Left[0].spirit
        except:
            pass

        player.fighter.damage = 'Left Hand: ' + str(stuff) + ' to ' + str(stuff2) + '.'
        try:
            player.fighter.damage += ' (Fire(' + str(player.fighter.Left[0].fire) + '), Ice(' + str(player.fighter.Left[0].ice)
        except:
            pass
        try:
            player.fighter.damage += '), Lightning(' + str(player.fighter.Left[0].lightning) + '), Spirit(' + str(player.fighter.Left[0].spirit) + '))'
        except:
            pass
        player.fighter.scaling = 'Damage from Strength : ' + str(player.fighter.Left[0].weapon_str)

        player.fighter.damage2 = ''
        player.fighter.scaling2 = 'Damage from Agility : ' + str(player.fighter.Left[0].weapon_agi)





    elif len(player.fighter.Both) > 0:

        stuff = player.fighter.Both[0].weapon_min
        try:
            stuff += player.fighter.Both[0].fire
            stuff += player.fighter.Both[0].ice
            stuff += player.fighter.Both[0].lightning
            stuff += player.fighter.Both[0].spirit
        except:
            pass
        stuff2 = player.fighter.Both[0].weapon_max
        try:
            stuff2 += player.fighter.Both[0].fire
            stuff2 += player.fighter.Both[0].ice
            stuff2 += player.fighter.Both[0].lightning
            stuff2 += player.fighter.Both[0].spirit
        except:
            pass

        

        player.fighter.damage = 'Both Hands: ' + str(stuff) + ' to ' + str(stuff2) + '.'
        try:
            player.fighter.damage += ' (Fire(' + str(player.fighter.Both[0].fire) + '), Ice(' + str(player.fighter.Both[0].ice)
        except:
            pass
        try:
            player.fighter.damage += '), Lightning(' + str(player.fighter.Both[0].lightning) + '), Spirit(' + str(player.fighter.Both[0].spirit) + ')'
        except:
            pass
        player.fighter.scaling = 'Damage from Strength : ' + str(player.fighter.Both[0].weapon_str)

        player.fighter.damage2 = ''
        player.fighter.scaling2 = 'Damage from Agility : ' + str(player.fighter.Both[0].weapon_agi)







class Monster:
    global xp_bonus
    #combat-related properties and methods for MONSTERS.
    def __init__(self, hp, defense, Strength, agility, current_energy, energy, max_energy, xp, level, min_dam, max_dam, minimum_hit, evade=0, burn=0, armor_pen=0,stun_duration=0,
                 monster_type='',
                 status = 'Alive', debuffs=[], armored=False, race=None, death_function=None, ability1=None, ability2=None, ability3=None, max_hp=None):
        self.base_max_hp = hp
        self.hp = hp
        
        self.defense = defense

        self.Strength = Strength
        self.agility = agility

        self.current_energy = current_energy
        self.energy = energy
        
        self.max_energy = max_energy
        self.base_xp = xp
        self.level = level
        self.min_dam = min_dam
        self.max_dam = max_dam
        self.minimum_hit = minimum_hit
        self.evade = evade
        self.burn = burn
        self.armor_pen = armor_pen
        self.stun_duration = stun_duration
        self.monster_type= monster_type
        self.status = status
        self.debuffs = debuffs
        self.armored = armored

        self.race = race
        self.death_function = death_function
        self.ability1 = ability1
        self.ability2 = ability2
        self.ability3 = ability3
        self.max_hp = max_hp

        if self.max_hp == None:
            self.max_hp = self.hp

    def attack(self, target):
        global burn, burning

        monster = self.owner 

        
        if monster.tale_told == 'Stunned':
            
            return

        
        
        

        

        if self.owner.name == 'Old Orc':
            hit = libtcod.random_get_int(0, 80, 100) - target.fighter.defense

            damage = libtcod.random_get_int(0, 10, 15) - player.fighter.defense




            for object in objects:
                if object.name == 'Old Orc':
                    if self.owner.tale_told == 'Attacked' or self.owner.tale_told == 'Aggroed':


                        stuff = libtcod.random_get_int(0, 1, 3)

                        damage = libtcod.random_get_int(0, 10, 15) - player.fighter.defense

                        if stuff == 2:
                            derp2 = libtcod.random_get_int(0, 1, 4)
                            if derp2 == 1:
                                message('I will fight you, if i must!', libtcod.red)
                            if derp2 == 2:
                                message('I may be old, but i can still fight!', libtcod.red)
                            if derp2 == 3:
                                message('Your end draws near!', libtcod.red)
                            if derp2 == 4:
                                message('You dare?!', libtcod.red)

                    if self.owner.tale_told == 'Done and Attacked':
                        stuff = libtcod.random_get_int(0, 1, 6)
                        if stuff == 1:
                            message('Betrayer!', libtcod.red)
                        if stuff == 2:
                            message('Scum!!', libtcod.red)
                        damage = libtcod.random_get_int(0, 15, 20) - player.fighter.stat_defense

        elif self.owner.name == 'Captain Dalmer':
            hit = libtcod.random_get_int(0, 100, 100) - target.fighter.defense

            damage = libtcod.random_get_int(0, 12, 15) - player.fighter.defense

        

        
        else:
            hit = libtcod.random_get_int(0, self.minimum_hit, 100) - target.fighter.defense

            damage = libtcod.random_get_int(0, self.min_dam, self.max_dam) - target.fighter.defense

            try:
                if self.armor_pen <= target.fighter.defense:
                    damage += self.armor_pen
                elif self.armor_pen > target.fighter.defense:
                    damage += (target.fighter.defense)
            except:
                pass

        #Implement Undying so that the lower Hp you are, the more damage resistance you gain.

        
            

        if hit >= 80 and damage > 0:
        #make the target take some damage

            if 'Block Talent 6' in player.fighter.event:
                reduction = (1 - (player.fighter.hp/player.fighter.max_hp))/2

                
                    

                if reduction > 0:
                    if player.fighter.hp <= player.fighter.max_hp/2:
                        reduction = 0.75

                    damage *= reduction

                    damage = int(round(damage))

            

            

                

            if damage > 0:
                message('The ' + self.owner.name.capitalize() + ' hits you ' + 'for ' + str(damage) + ' physical damage.', libtcod.red)
                player.fighter.hp -= damage
                if "Off Talent 2" in player.fighter.event:
                    factor = libtcod.random_get_int(0, 0, 100)
                    if factor <= 35:
                        
                        if player.fighter.Stamina < player.fighter.Max_stamina:
                            message('You regain some stamina!', libtcod.yellow)
                            if (player.fighter.Stamina - player.fighter.Max_stamina) <= -5:
                                player.fighter.Stamina += 5
                            elif (player.fighter.Stamina - player.fighter.Max_stamina) > -5 and (player.fighter.Stamina - player.fighter.Max_stamina) <= -1:
                                player.fighter.Stamina += (player.fighter.Max_stamina - player.fighter.Stamina)

            poison = ['White Skull Hunter'] 

            if len(player.fighter.Debuffs) == 0:
                poison = libtcod.random_get_int(0, 0, 100)
                if poison >= 90:
                    thing = Debuff(turns=3, damage=3, kind='Poison', name='Poison')
            
                

                    player.fighter.Debuffs.append(thing)
                    message('A quick-acting poison burns in your veins!', libtcod.red)
            else:
                thing = 0
                for i in player.fighter.Debuffs:
                    if i.name != 'Poison':
                        thing += 1
                if thing == len(player.fighter.Debuffs):
                    poison = libtcod.random_get_int(0, 0, 100)
                    if poison >= 90:
                        thing = Debuff(turns=3, damage=3, kind='Poison', name='Poison')
                        player.fighter.Debuffs.append(thing)
                        message('A quick-acting poison burns in your veins!', libtcod.red)
                    
                    

            if player.fighter.hp <= 0:
                player_death(player)

            if self.owner.name == 'Flaming Imp':
                burn += 2
                burning = True

        

        if hit >= 80 and damage <= 0:
            message('The ' + self.owner.name.capitalize() + ' does not manage to harm you!', libtcod.light_blue)
        if hit <= 79:
            message('The ' + self.owner.name.capitalize() + "'s attack misses!", libtcod.light_blue)
            





    def take_damage(self, damage):

        for object in objects:
            if self.owner.name == 'Old Orc':
                if self.owner.tale_told == 'Done' and self.owner.name == 'Old Orc':
                    self.owner.tale_told = 'Done and Attacked'
                    message('After the trust i put in you, you try to kill me?!', libtcod.red)

                if self.owner.tale_told == '' and self.owner.name == 'Old Orc':

                    self.owner.tale_told = 'Attacked'
                    with open('derp.rtf') as f:
                        lines = list(islice(f, 118, 133))
                    inspect_menu('Actions and Consequences', lines, 60)


        


        #apply damage if possible
        if damage > 0:
            if self.owner.name == 'Malformed Figure':
                self.hp -= int(round(damage*0.9))
                spawn = libtcod.random_get_int(0, 0, 3)
                if spawn == 0:
                    message('I am what festers in your heart..', libtcod.red)
                if spawn == 1:
                    message('I am that which gnaws at your soul..', libtcod.red)
                if spawn == 2:
                    message("You can't kill me.. After all... I.. Am.. YOU.", libtcod.red)
            else:
                self.hp -= damage

            #check for death. if there's a death function, call it
            if self.hp <= 0 and self.status == 'Alive':
                self.status = 'Dead'
                function = self.death_function
                if function is not None:
                    function(self.owner)

                if self.owner != player:
                    
                    try:
                        if (self.level - player.level) >= -3:#yield experience to the player
                            player.fighter.xp += self.base_xp + xp_bonus
                    except:
                        player.fighter.xp += self.base_xp + xp_bonus



class BasicMonster:
    #AI for a basic monster.
    def take_turn(self):
        #a basic monster takes its turn. if you can see it, it can see you
        monster = self.owner

        for i in range(0,10):
            if monster.tale_told == 'Stunned' + str(i):
                monster.tale_told = 'Stunned' + str(i)
                message('The ' + str(monster.name) + ' is stunned for ' + str(monster.tale_told[-1]) + ' turns!', libtcod.green)
                if monster.tale_told == 'Stunned' or monster.tale_told == 'Stunned1':
                    monster.tale_told = 'Attacked'
                    
                    message('The ' + str(monster.name) + ' is no longer stunned!', libtcod.red)
                
                return
        

        #self.owner.name for name



        x = monster.x
        y = monster.y

        x2 = monster.distance_to(player)



        if monster.monster_type != 'NPC':
            if libtcod.map_is_in_fov(fov_map, monster.x, monster.y):
                
                if 'Stunned' not in monster.tale_told:
                    monster.current_energy += monster.energy
                count = 0
                
                            
                            
                    
                

                if monster.tale_told == '' and monster.name == 'Hirachi':
                    message("Another lost soul, in search of answers..?", libtcod.yellow)
                    message("No.. You're not like the others...", libtcod.yellow)
                    message("Then i'm afraid you must die.", libtcod.yellow)
                    thing = Debuff(turns=None, damage='soul_burn', kind='', name='Soul Burn', Death=False)
                    
                    player.fighter.Debuffs.append(thing)
                    message('A quick-acting poison burns in your veins!', libtcod.red)
                    
                    with open('derp.rtf') as f:
                        line = list(islice(f, 927, 946))
                    inspect_menu('Debuffs: Soul burn', line, 68)
                    monster.tale_told = 'Told'


                



                
            

                if monster.fighter.monster_type == 'Swarm':
                    
                        
                            
                         
                    message('Swarm')

                    if monster.distance_to(player) >= 1.5 and monster.tale_told != 'Stunned' and monster.current_energy > monster.max_energy:
                        monster.move_towards(player.x, player.y)
                    elif monster.x-1 == player.x and monster.y-1 == player.y and monster.tale_told != 'Stunned' and monster.current_energy > monster.max_energy:
                        #South-east of the Player
                        #x: - is Left, + is Right
                        #Y: + is , - is Up
                        #X is first, Y is second
                        if monster.move(-1,0) == True: #Move West
                            monster.current_energy -= 100

                        elif monster.move(0, -1) == True: #Move North
                            monster.current_energy -= 100

                        

                        if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
                            
                            monster.fighter.attack(player)
                            monster.current_energy -= 100

                            if monster.x == player.x and monster.y-1 == player.y and monster.current_energy > monster.max_energy: #South of the player
                                if monster.move(-1, -1) == True: #North West
                                    monster.current_energy -= 100
                                elif monster.move(-1, 0) == True: #West
                                    monster.current_energy -= 100
                            elif monster.x-1 == player.x and monster.y == player.y and monster.current_energy > monster.max_energy: #East of the player
                                if monster.move(-1, -1) == True: #North west
                                    monster.current_energy -= 100
                                elif monster.move(0, -1) == True: #North
                                    monster.current_energy -= 100

                    elif monster.x-1 == player.x and monster.y == player.y and monster.current_energy > monster.max_energy: #East of the Player
                        if monster.move(-1, -1) == True: #North-west one step
                            monster.current_energy -= 100

                            if monster.move(-1, 1) == True: #South-west one step
                                monster.current_energy -= 100

                            elif monster.move(-1, 0) == True: #West one step
                                monster.current_energy -= 100

                            

                        elif monster.move(0, -1) == True: #North one stop
                            monster.current_energy -= 100


                        elif monster.move(-1, 1) == True: #South-west 1 step
                            monster.current_energy -= 100

                            if monster.move(-1, -1) == True: #north-west 1 step
                                monster.current_energy -= 100

                            elif monster.move(-1, 0) == True: #West 1 step
                                monster.current_energy -= 100
                            

                            

                        elif monster.move(0, 1) == True: #South 1 step
                            monster.current_energy -= 100

                        
                                

                        if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
                            message('lol2')
                            monster.fighter.attack(player)
                            monster.current_energy -= 100

                    elif monster.x-1 == player.x and monster.y+1 == player.y and monster.current_energy > monster.max_energy: #North-east
                        if monster.move(-1, 0) == True: #West
                            monster.current_energy -= 100

                            if monster.move(-1, 1) == True: #South-west
                                monster.current_energy -= 100

                            elif monster.move(-1, 0) == True: #West
                                monster.current_energy -= 100

                        elif monster.move(0, 1) == True: #South
                            monster.current_energy -= 100

                            if monster.move(-1, 1) == True: #South-west
                                monster.current_energy -= 100

                            elif monster.move(0, 1) == True: #South
                                monster.current_energy -= 100
                                

                        if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
                            message('lol3')
                            monster.fighter.attack(player)
                            monster.current_energy -= 100
                    elif monster.x == player.x and monster.y+1 == player.y and monster.current_energy > monster.max_energy: #North

                        if monster.move(-1, 1) == True: #South-west
                            monster.current_energy -= 100

                        elif monster.move(-1, 0) == True: #west
                            monster.current_energy -= 100


                        if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
                            message('lol4')
                            monster.fighter.attack(player)
                            monster.current_energy -= 100

                    elif monster.x == player.x and monster.y-1 == player.y and monster.current_energy > monster.max_energy: #South

                        if monster.move(-1, -1) == True: #North West
                            monster.current_energy -= 100

                        elif monster.move(-1, 0) == True:
                            monster.current_energy -= 100


                        if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
                            message('lol4')
                            monster.fighter.attack(player)
                            monster.current_energy -= 100

                    elif monster.x+1 == player.x and monster.y-1 == player.y and monster.current_energy > monster.max_energy: #South-west

                        if monster.move(0, -1) == True: #North
                            monster.current_energy -= 100

                        if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
                            message('lol5')
                            monster.fighter.attack(player)
                            monster.current_energy -= 100

                    elif monster.x+1 == player.x and monster.y+1 == player.y and monster.current_energy > monster.max_energy: #North-west

                        if monster.move(0, 1) == True: #South
                            monster.current_energy -= 100


                        if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
                            message('lol6')
                            monster.fighter.attack(player)
                            monster.current_energy -= 100

                    elif monster.x+1 == player.y and monster.y == player.y and monster.current_energy > monster.max_energy: #West

                        if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
                            message('lol7')
                            monster.fighter.attack(player)
                            monster.current_energy -= 100

                    if monster.tale_told != 'Stunned' and monster.distance_to(player) <= 1.5 and monster.current_energy > monster.max_energy:
##                        message(str(monster.fighter.monster_type))
                        message('lol11 PROBLEM')
                        monster.fighter.attack(player)

                        if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
##                            message(str(monster.fighter.monster_type))
                            message('lol12 PROBLEM')
                            monster.fighter.attack(player)
                            monster.current_energy -= 100

                            if player.fighter.hp > 0 and monster.current_energy > monster.max_energy:
##                                message(str(monster.fighter.monster_type))
                                message('lol13 PROBLEM')
                                monster.fighter.attack(player)
                        
               
                    

        elif monster.monster_type == 'NPC':
            for object in objects:
                
                if object.tale_told == 'Attacked' or object.tale_told == 'Done and Attacked':
                    try:
                        if monster.distance_to(player) <= monster.sight:
                            try:
                                if monster.name == 'Old Orc':
                                    if monster.current_energy > 500:
                                        monster.current_energy = 0
                                    monster.current_energy += 250
                                    monster.max_energy = 500
                                else:
                                    if object.current_energy < object.max_energy*2:
                                        object.current_energy += object.energy
                                        
                                    

                            except:
                                pass

                            

                            if monster.distance_to(player) >= 2 and monster.current_energy > monster.max_energy:
                                
                                monster.move_towards(player.x, player.y)
                                if monster.name != 'Old Orc':
                                    object.current_energy -= 100
                                else:
                                    object.current_energy -= 250
                                

                            if player.fighter.hp > 0 and monster.distance_to(player) <= 1.99:
                                if object.current_energy > monster.max_energy:
                                    
                                    monster.fighter.attack(player)
                                    object.current_energy -= 100
                    except:
                        if libtcod.map_is_in_fov(fov_map, monster.x, monster.y):
                            if object.tale_told == 'Attacked' or object.tale_told == 'Done and Attacked':

                            
                            
                                try:
                                    if monster.name == 'Old Orc':
                                        if monster.current_energy > 500:
                                            monster.current_energy = 0
                                        monster.current_energy += 250
                                        monster.max_energy = 500
                                    else:
                                        monster.current_energy += monster.energy
                                        message('The ' + str(monster.name) + "'s energy is " + str(monster.current_energy) + ' out of ' + str(monster.max_energy))
        ##                            message('The old orcs energy is' + str(monster.current_energy) + ' out of' + str(monster.max_energy))
                                except:
                                    pass

                                

                                if monster.distance_to(player) >= 2 and monster.current_energy > monster.max_energy:
                                    
                                    monster.move_towards(player.x, player.y)
                                    if monster.name != 'Old Orc':
                                        monster.current_energy -= 100
                                    else:
                                        monster.current_energy -= 250
                                    

                                if player.fighter.hp > 0 and monster.distance_to(player) <= 1.99:
                                    if object.current_energy > monster.max_energy:
                                        
                                        monster.fighter.attack(player)
                                        object.current_energy -= 100


            #close enough, attack! (if the player is still alive.)

        if monster.fighter.burn >= 10:
            
            message('The ' + monster.name + ' is a walking inferno!', libtcod.light_red)

            message('The ' + monster.name + ' is severely burned for ' + str(12 + (player.fighter.Base_Spirit/10)) + ' damage.', libtcod.dark_orange)
            monster.fighter.take_damage(12 + (player.fighter.Base_Spirit/10))
            monster.fighter.burn -= 1

        elif monster.fighter.burn >= 5 and monster.fighter.burn < 9:


            message('The ' + monster.name + ' is engulfed in flames!', libtcod.light_red)
            message('The ' + monster.name + ' is badly burned for ' + str(8 + (player.fighter.Base_Spirit/10)) + ' damage.', libtcod.dark_orange)
            monster.fighter.take_damage(8 + (player.fighter.Base_Spirit/10))
            monster.fighter.burn -= 1

        elif monster.fighter.burn > 0 and monster.fighter.burn <= 4:


            message('The ' + monster.name + ' is burned for ' + str(5 + (player.fighter.Base_Spirit/10)) + ' damage.', libtcod.dark_orange)
            monster.fighter.take_damage(5 + (player.fighter.Base_Spirit/10))
            monster.fighter.burn -= 1

class ConfusedMonster:
    #AI for a temporarily confused monster (reverts to previous AI after a while).
    def __init__(self, old_ai, num_turns=CONFUSE_NUM_TURNS):
        self.old_ai = old_ai
        self.num_turns = num_turns

    def take_turn(self):
        if self.num_turns > 0:  #still confused...
            #move in a random direction, and decrease the number of turns confused
            self.owner.move(libtcod.random_get_int(0, -1, 1), libtcod.random_get_int(0, -1, 1))
            self.num_turns -= 1

        else:  #restore the previous AI (this one will be deleted because it's not referenced anymore)
            self.owner.ai = self.old_ai
            message('The ' + self.owner.name + ' is no longer confused!', libtcod.red)

class StunnedMonster:
    #AI for a temporarily confused monster (reverts to previous AI after a while).
    def __init__(self, old_ai, num_turns=(2)):
        self.old_ai = old_ai
        self.num_turns = num_turns

    def take_turn(self):
        if self.num_turns > 0:  #still confused...
            #move in a random direction, and decrease the number of turns confused
            self.owner.move(0,0)
            self.num_turns -= 1

        else:  #restore the previous AI (this one will be deleted because it's not referenced anymore)
            self.owner.ai = self.old_ai
            message('The ' + self.owner.name + ' is no longer stunned!', libtcod.red)

## Add attribute of Weight, use for calculation of energy consumption mixed in with accomedation of Sub_Race, also Add Energy Consumption based on weapon_type
class Item:   
    #an item that can be picked up and used.
    def __init__(self, defense_bonus=0, weight=0, crit=0, to_crit=0, block_bonus=0, weapon_min=0, weapon_max=0, weapon_agi=0, weapon_str=0, fire=0, ice=0, lightning=0, spirit=0,
                 ammo=0, ammo_cost=0, fire_range=0, Conceal_Bonus=0, armor_pen=0, worth=0, quantity=0, amount=1, index=0, proc_chanse=0, rarity='', fire_mode='',
                 name='', readable='no', weapon_type='', hit_effect=None, slot=None, decoration=False, is_equipped=False, use_function=None, eat_function=None, read_function=None ):


        
        self.defense_bonus = defense_bonus
        self.weight = weight
        self.crit = crit
        self.to_crit = to_crit
        self.block_bonus = block_bonus
        


        self.weapon_min = weapon_min
        self.weapon_max = weapon_max
        self.weapon_agi = weapon_agi
        self.weapon_str = weapon_str
        self.fire = fire
        self.ice = ice
        self.lightning = lightning
        self.spirit = spirit
        self.ammo = ammo
        self.ammo_cost = ammo_cost
        self.fire_range = fire_range
        self.Conceal_Bonus = Conceal_Bonus
        self.armor_pen = armor_pen
        self.worth = worth
        self.quantity = quantity
        self.amount = amount
        self.index = index
        self.proc_chanse = proc_chanse
        self.rarity = rarity
        self.fire_mode = fire_mode

        self.name = name
        self.readable = readable
        self.weapon_type= weapon_type
        self.hit_effect = hit_effect



        self.slot = slot
        self.decoration = decoration
        self.is_equipped = is_equipped

        self.use_function = use_function
        self.eat_function = eat_function
        self.read_function = read_function
    

    def pick_up(self, Fix=False):
        global inventorylist, objects
        if self.decoration == True:
            return
        if self.owner.name == "Gold":
            message('You picked up some gold.', libtcod.green)
            player.fighter.gold += libtcod.random_get_int(0, 2, 18)
            objects.remove(self.owner)
            return
        #add to the player's inventory and remove from the map
        
        stuff = 0
        temp = []

        try:
            if self.owner.currency == True:
                
                try:
                    Dungeon.currencies[self.owner.name] += self.amount
                except:
                    Dungeon.currencies[self.owner.name] = self.amount

                message('You picked up ' + str(self.amount) + ' ' + self.owner.name + '!', libtcod.green)

                objects.remove(self.owner)

                return

            
        except:
            pass
            

        for object in objects:  #look for an item in the player's tile
            if object.x == player.x and object.y == player.y and object.item and object.name == self.owner.name:
                temp.append(object)

        count = 0
        

        try:
            if self.owner.item.rarity == 'Material':

                if self.owner not in Dungeon.materials:
                    
                    Dungeon.materials.append(self.owner)

                    count = 0
                    
                    for i in Dungeon.materials:
                        if i.name == self.owner.name:
                            
                            thing = count
                        count += 1

                    Dungeon.materials[thing].item.quantity += self.owner.item.amount
                    if(Fix == False):
                        objects.remove(self.owner)
                else:
                    count = 0
                    
                    for i in Dungeon.materials:
                        if i.name == self.owner.name:
                            
                            thing = count
                        count += 1

                    Dungeon.materials[thing].item.quantity += self.owner.item.amount
                    if(Fix == False):
                        objects.remove(self.owner)
                        
                    

                    
                    

            

                
        except:
            pass


                
       
        for i in inventorylist:
            try:
                if i.item.rarity != 'Material':
                    

            
                    stuff += 1
                    if len(i) < 25:
                        
                        
                        
                        i.append(self.owner)
                        if(Fix == False):
                            objects.remove(self.owner)
                        break
                    
                    elif stuff == len(inventorylist):
                        
                        inventorylist.append([])
                        inventorylist[stuff].append(self.owner)
                        if(Fix == False):
                            objects.remove(self.owner)
                        break
            except:
                stuff += 1
                if len(i) < 25:
                    
                    
                    
                    try:
                        if self.owner.item.rarity != 'Material':
                            i.append(self.owner)
                            if(Fix == False):
                                objects.remove(self.owner)
                            break
                    except:
                        craft = ['Iron Ore', 'Mithril Ore', 'Leather Bands']
                        if self.owner.name not in craft:
                            i.append(self.owner)
                        if(Fix == False):
                            objects.remove(self.owner)
                        break
                
                elif stuff == len(inventorylist):
                    
                    inventorylist.append([])
                    inventorylist[stuff].append(self.owner)
                    if(Fix == False):
                        objects.remove(self.owner)
                    break
        
        
        if self.owner.name == 'Runed Hilt':
            if 'Greed, My Old Friend' not in Quest.Quest_name:
                message('Quest added!', libtcod.green)
                Quest.Quest_name.append('Greed, My Old Friend')
                
                Quest.Quest_Main.append('Inspect the Hilt          ')
        if self.owner.name == 'Strange Key':
            message('You feel dark energy pulsating from the Strange Key.', libtcod.red)

        else:
            try:
                if self.owner.item.rarity == 'Material':
                    message('You picked up some ' + self.owner.name + '!', libtcod.green)
                    
            except:
                try:
                    if self.owner.decoration == False:

                        message('You picked up a ' + self.owner.name + '!', libtcod.green)
                except:
                    message('You picked up a ' + self.owner.name + '!', libtcod.green)

    def drop(self):

        #special case: if the object has the Equipment component, dequip it before dropping
        if self.owner.is_equipped:
            message('You have to de-equip items before dropping them!', libtcod.red)
            return

        #add to the map and remove from the player's inventory. also, place it at the player's coordinates
        
        stuff = 0
        self.owner.x = player.x
        self.owner.y = player.y
        
       
        for i in inventorylist:
            stuff += 1
            if self.owner in i:
                
                if Dungeon.Terrain_type != 'West Gate':
                    objects.append(self.owner)
                
                    self.owner.send_to_back()
                    self.owner.always_visible = False
                    i.remove(self.owner)
                else:
                    objects.append(self.owner)
                
                    self.owner.send_to_back()
                    self.owner.always_visible = False
                    i.remove(self.owner)
                    Dungeon.stuff.append(self.owner)
                    message('You dropped in West gate')
               
                
                
                if len(i) == 24 and len(inventorylist) == (stuff + 1):
                    if len(inventorylist[stuff]) == 0:
                        inventorylist.remove(inventorylist[stuff])
                        break
                    
                    inventorylist[0].append((inventorylist[stuff])[0])
                    inventorylist[stuff].remove((inventorylist[stuff])[0])
                    
                break

        message('You dropped a ' + self.owner.name + '.', libtcod.yellow)

 

    def sell(self, careful=False, sale=True):

        stuff = 0

        sold = False
       
        for i in inventorylist:
            stuff += 1
            if self.owner in i:
                
                try:
                    if self.owner.item.worth > 0:
                        if careful == True:
                            try:
                                if self.owner.item.rarity == 'Uncommon' or self.owner.item.rarity == '' and self.owner.item.worth > 0:
                                    shop_message('Do you wish to sell ' + self.owner.name + ' for ' + str(self.worth) + ' gold? y/n', libtcod.green)
                                    
                                elif self.owner.item.rarity == 'Rare' and self.owner.item.worth > 0:
                                    
                                    shop_message('Do you wish to sell ' + self.owner.name + ' for ' + str(self.worth) + ' gold? y/n', libtcod.dark_cyan)
                                    
                                    
                                elif self.owner.item.rarity == 'Artifact' and self.owner.item.worth > 0:
                                    shop_message('Do you wish to sell ' + self.owner.name + ' for ' + str(self.worth) + ' gold? y/n', libtcod.orange)
                                    
                                    
                                elif self.owner.item.rarity == 'Shatm' and self.owner.item.worth > 0:
                                    shop_message('Do you wish to sell ' + self.owner.name + ' for ' + str(self.worth) + ' gold? y/n', libtcod.red)
                            except:
                                shop_message('Do you wish to sell ' + self.owner.name + ' for ' + str(self.worth) + ' gold? y/n', libtcod.green)
        
                            
                            break
                                                           
                        
                        else:
                            try:
                                if self.owner.item.rarity == 'Uncommon' or self.owner.item.rarity == '' and self.owner.item.worth > 0:
                                    shop_message('You sold ' + self.owner.name + ' for ' + str(self.worth) + ' gold!', libtcod.green)
                                    
                                elif self.owner.item.rarity == 'Rare' and self.owner.item.worth > 0:
                                    
                                    shop_message('You sold ' + self.owner.name + ' for ' + str(self.worth) + ' gold!', libtcod.dark_cyan)
                                    
                                    
                                elif self.owner.item.rarity == 'Artifact' and self.owner.item.worth > 0:
                                    shop_message('You sold ' + self.owner.name + ' for ' + str(self.worth) + ' gold!', libtcod.orange)
                                    
                                    
                                elif self.owner.item.rarity == 'Shatm' and self.owner.item.worth > 0:
                                    shop_message('You sold ' + self.owner.name + ' for ' + str(self.worth) + ' gold!', libtcod.red)
                            except:
                                shop_message('Do you wish to sell ' + self.owner.name + ' for ' + str(self.worth) + ' gold? y/n', libtcod.green)

                                
                            if sale == True:
                                player.fighter.gold += self.owner.item.worth
                                i.remove(self.owner)
                                break

                                
                      
                except:
                    try:
                        if self.owner.item.worth > 0:
                            shop_message('You sold ' + self.owner.name + ' for ' + str(self.worth) + ' gold!', libtcod.green)

                                
                            player.fighter.gold += self.owner.item.worth
                            i.remove(self.owner)
                    
                                                     
                    except:
                        shop_message('You cannot sell that item.', libtcod.yellow)
                
                    
                           
                
                if len(i) == 24 and len(inventorylist) == (stuff + 1):
                    if len(inventorylist[stuff]) == 0:
                        inventorylist.remove(inventorylist[stuff])
                        break
                    
                    inventorylist[0].append((inventorylist[stuff])[0])
                    inventorylist[stuff].remove((inventorylist[stuff])[0])
                    
                break
        

        
            

        
        



    def use(self):

        listofdoom = ['minor', 'lesser']

        
        if self.owner.name == 'Minor Healing Potion':
            if cast_heal('minor') == 'cancelled':
                return
            start = 0

            for i in inventorylist:
                if self.owner in i:
                    inv = inventorylist[start]
                    break
                start += 1

            inventorylist[start].remove(self.owner)
            return
       
        

        if self.use_function in listofdoom:
            
            if cast_heal(self.use_function) == 'cancelled':
                return
            else:
                pass
        #just call the "use_function" if it is defined
        
        if self.use_function is None and self.use_function not in listofdoom:

            start = 0

            for i in inventorylist:
                if self.owner in i:
                    inv = inventorylist[start]
                    break
                start += 1


            for object in inv:
                if object.name == self.owner.name and object.slot == 'Right Hand' and object.item.slot == 'Right Hand' and object.item.is_equipped == False:
                    message('You switched the hand you hold your ' + str(self.owner.name) + ' in.', libtcod.green)

                    object.slot = 'Left Hand'
                    object.item.slot = 'Left Hand'

                    break



                elif object.name == self.owner.name and object.slot == 'Left Hand' and object.item.slot == 'Left Hand' and object.item.is_equipped == False:
                    message('You switched the hand you hold your ' + str(self.owner.name) + ' in.', libtcod.green)

                    object.slot = 'Right Hand'
                    object.item.slot = 'Right Hand'

                    break


                elif object.name == self.owner.name and object.item.slot == 'Ring1' and object.slot == 'Ring1':
                    message('You switched the finger you have your ' + str(self.owner.name) + ' on.', libtcod.green)

                    object.slot = 'Ring2'
                    object.item.slot = 'Ring2'

                    break

                elif object.name == self.owner.name and object.item.slot == 'Ring2' and object.slot == 'Ring2':
                    message('You switched the finger you have your ' + str(self.owner.name) + ' on.', libtcod.green)

                    object.slot = 'Ring1'
                    object.item.slot = 'Ring1'

                    break

                elif object.name == self.owner.name and object.item.slot == 'Trinket1' and object.slot == 'Trinket1':
                    message('You switched where you have your ' + str(self.owner.name) + '.', libtcod.green)

                    object.slot = 'Trinket2'
                    object.item.slot = 'Trinket2'

                    break

                elif object.name == self.owner.name and object.item.slot == 'Trinket2' and object.slot == 'Trinket2':
                    message('You switched where you have your ' + str(self.owner.name) + '.', libtcod.green)

                    object.slot = 'Trinket1'
                    object.item.slot = 'Trinket1'

                    break



        else:
            
            if self.use_function != 'cancelled':
                start = 0

                for i in inventorylist:
                    if self.owner in i:
                        inv = inventorylist[start]
                        break
                    start += 1

                inventorylist[start].remove(self.owner)   #destroy after use, unless it was cancelled for some reason

    def read(self):
        
        
        
        
        
        if self.owner.name == 'Dusty Journal':
            with open('derp.rtf') as f:
                line = list(islice(f, 198, 223))
            inspect_menu('Captain Dalmers Journal', line, 68)

            player.fighter.event.append('Captains Arena Event and Journal')

            

            

        elif self.owner.name == 'A Study of Demonroaches':
            with open('derp.rtf') as f:
                line = list(islice(f, 304, 327))
            inspect_menu('A Study of Demonroaches', line, 68)

            

        elif self.owner.name == 'Very Old Diary':
            with open('derp.rtf') as f:
                line = list(islice(f, 304, 327))
            inspect_menu('A Study of Demonroaches', line, 68)

            

        elif self.owner.name == "Garret's Journal 1/2":
            with open('derp.rtf') as f:
                line = list(islice(f, 304, 327))
            inspect_menu("Garret's Journal 1/2", line, 68)

            

          

        elif self.owner.name == "Garret's Journal 2/2":
            with open('derp.rtf') as f:
                line = list(islice(f, 304, 327))
            inspect_menu("Garret's Journal 2/2", line, 68)

            
        
        if self.owner.name not in player.fighter.read:
            
            
            xp = int(round(int((player.fighter.levels[str(player.level)]))/20))
            player.fighter.read.append(self.owner.name)
            player.fighter.xp += xp
            message('You gain ' + str(xp) + ' experience.', libtcod.green)

                
            

    def eat(self):

        if self.eat_function is None:
            random = libtcod.random_get_int(0, 0, 3)
            if random == 0:
                message("You can't eat that..")
            if random == 1:
                message("Doesn't look very... tasty.")
            if random == 2:
                message("You try to chew on the " + self.owner.name + ".")
                message('You break a tooth.', libtcod.red)
            if random == 3:
                message("On second thought, you're not THAT hungry...")




        else:
            if self.eat_function() != 'cancelled':
                start = 0

                for i in inventorylist:
                    if self.owner in i:
                        inv = inventorylist[start]
                        break
                    start += 1

                inventorylist[start].remove(self.owner)

    def inspect(self):
        if self.owner.name == 'Runed Hilt':
            if 'Inspect the Hilt' in Quest.Quest_Main:
                Quest.Quest_Main.remove('Inspect the Hilt')
                Quest.Quest_Main.append('Find the Other Pieces')

                with open('derp.rtf') as f:
                    lines = list(islice(f, 902, 926))
            
            
        if self.owner.name == 'Dagger':
            with open('derp.rtf') as f:
                lines = list(islice(f, 0, 4))
        if self.owner.name == 'Sword':
            with open('derp.rtf') as f:
                lines = list(islice(f, 5,9))
        inspect_menu(self.owner.name, lines, 60)

    def weight(self):
        return self.owner.weight

    def toggle_equip(self):  #toggle equip/dequip status
        if self.is_equipped == True:
            self.dequip()
        else:
            self.equip()

    def equip(self, slot=None, Fixed=False, Dequip=False):
        global xp_bonus, TORCH_RADIUS, fov_recompute, burn, burning, inventorylist
        #if the slot is already being used, dequip whatever is there first
        if(Dequip == True and Fixed == True):
            if str(self.slot) == 'Head' and len(player.fighter.head) > 0:
                player.fighter.head[0].pick_up(True)
                Reset_Stats(player.fighter.head[0], None)
                player.fighter.head = []
            if str(self.slot) == 'Neck' and len(player.fighter.neck) > 0:
                player.fighter.neck[0].pick_up(True)
                Reset_Stats(player.fighter.neck[0], None)
                player.fighter.neck = []
            if str(self.slot) == 'Shoulders' and len(player.fighter.shoulders) > 0:
                player.fighter.shoulders[0].pick_up(True)
                Reset_Stats(player.fighter.shoulders[0], None)
                player.fighter.shoulders = []
            if str(self.slot) == 'Chest' and len(player.fighter.chest) > 0:
                player.fighter.chest[0].pick_up(True)
                Reset_Stats(player.fighter.chest[0], None)
                player.fighter.chest = []
            if str(self.slot) == 'Bracers' and len(player.fighter.bracers) > 0:
                player.fighter.bracers[0].pick_up(True)
                Reset_Stats(player.fighter.bracers[0], None)
                player.fighter.bracers = []
            if str(self.slot) == 'Gloves' and len(player.fighter.gloves) > 0:
                
                player.fighter.gloves[0].pick_up(True)
                Reset_Stats(player.fighter.gloves[0], None)
                player.fighter.gloves = []
            if str(self.slot) == 'Belt' and len(player.fighter.belt) > 0:
                player.fighter.belt[0].pick_up(True)
                Reset_Stats(player.fighter.belt[0], None)
                player.fighter.belt = []
            if str(self.slot) == 'Legs' and len(player.fighter.legs) > 0:
                player.fighter.legs[0].pick_up(True)
                Reset_Stats(player.fighter.legs[0], None)
                player.fighter.legs = []
            if str(self.slot) == 'Boots' and len(player.fighter.boots) > 0:
                player.fighter.boots[0].pick_up(True)
                Reset_Stats(player.fighter.boots[0], None)
                player.fighter.boots = []
            
            if str(self.slot) == 'Left Ring' and len(player.fighter.ring1) > 0:
                    player.fighter.ring1[0].pick_up(True)
                    Reset_Stats(player.fighter.ring1[0], None)
                    player.fighter.ring1 = []
                

            if str(self.slot) == 'Right Ring' and len(player.fighter.ring2) > 0:
                
                    player.fighter.ring2[0].pick_up(True)
                    Reset_Stats(player.fighter.ring2[0], self)
                    player.fighter.ring2 = []


            if str(self.slot) == 'Left Trinket':
                if len(player.fighter.trinket1) > 0:
                    player.fighter.trinket1[0].pick_up(True)
                    Reset_Stats(player.fighter.trinket1[0], None)
                    player.fighter.trinket1 = []


            if str(self.slot) == 'Right Trinket':
                if len(player.fighter.trinket2) > 0:
                    player.fighter.trinket2[0].pick_up(True)
                    Reset_Stats(player.fighter.trinket2[0], None)
                    player.fighter.trinket2 = []


            if(str(self.slot) == "Left Hand"):
                if len(player.fighter.Left) > 0:
                    player.fighter.Left[0].pick_up(True)
                    Reset_Stats(player.fighter.Left[0], None)
                    player.fighter.Left = []

            if(str(self.slot) == "Right Hand"):
                if len(player.fighter.Right) > 0:
                    player.fighter.Right[0].pick_up(True)
                    Reset_Stats(player.fighter.Right[0], None)
                    player.fighter.Right = []

            if(str(self.slot) == "Both"):
                if len(player.fighter.Both) > 0:
                    player.fighter.Both[0].pick_up(True)
                    Reset_Stats(player.fighter.Both[0], None)
                    player.fighter.Both = []

                
            
        if(Fixed == True and Dequip == False):
        
            if str(self.slot) == 'Head':
                
                if len(player.fighter.head) > 0:
                    player.fighter.head[0].pick_up(True)
                    Reset_Stats(player.fighter.head[0], self)
                    player.fighter.head = []
                    player.fighter.head.append(self)
                elif len(player.fighter.head) == 0:
                    player.fighter.head.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Neck':
                if len(player.fighter.neck) > 0:
                    player.fighter.neck[0].pick_up(True)
                    Reset_Stats(player.fighter.neck[0], self)
                    player.fighter.neck = []
                    player.fighter.neck.append(self)
                elif len(player.fighter.neck) == 0:
                    player.fighter.neck.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Shoulders':
                if len(player.fighter.shoulders) > 0:
                    player.fighter.shoulders[0].pick_up(True)
                    Reset_Stats(player.fighter.shoulders[0], self)
                    player.fighter.shoulders = []
                    player.fighter.shoulders.append(self)
                elif len(player.fighter.shoulders) == 0:
                    player.fighter.shoulders.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Chest':
                if len(player.fighter.chest) > 0:
                    player.fighter.chest[0].pick_up(True)
                    Reset_Stats(player.fighter.chest[0], self)
                    player.fighter.chest = []
                    player.fighter.chest.append(self)
                elif len(player.fighter.chest) == 0:
                    player.fighter.chest.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Bracers':
                if len(player.fighter.bracers) > 0:
                    player.fighter.bracers[0].pick_up(True)
                    Reset_Stats(player.fighter.bracers[0], self)
                    player.fighter.bracers = []
                    player.fighter.bracers.append(self)
                elif len(player.fighter.bracers) == 0:
                    player.fighter.bracers.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Gloves':
                if len(player.fighter.gloves) > 0:
                    player.fighter.gloves[0].pick_up(True)
                    Reset_Stats(player.fighter.gloves[0], self)
                    player.fighter.gloves = []
                    player.fighter.gloves.append(self)
                elif len(player.fighter.gloves) == 0:
                    player.fighter.gloves.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Belt':
                if len(player.fighter.belt) > 0:
                    player.fighter.belt[0].pick_up(True)
                    Reset_Stats(player.fighter.belt[0], self)
                    player.fighter.belt = []
                    player.fighter.belt.append(self)
                elif len(player.fighter.belt) == 0:
                    player.fighter.belt.append(self)
                    Reset_Stats(None, self)


            if str(self.slot) == 'Legs':
                if len(player.fighter.legs) > 0:
                    player.fighter.legs[0].pick_up(True)
                    Reset_Stats(player.fighter.legs[0], self)
                    player.fighter.legs = []
                    player.fighter.legs.append(self)
                elif len(player.fighter.legs) == 0:
                    player.fighter.legs.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Boots':
                if len(player.fighter.boots) > 0:
                    player.fighter.boots[0].pick_up(True)
                    Reset_Stats(player.fighter.boots[0], self)
                    player.fighter.boots = []
                    player.fighter.boots.append(self)
                elif len(player.fighter.boots) == 0:
                    player.fighter.boots.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Left Ring':
                if len(player.fighter.ring1) > 0:
                    player.fighter.ring1[0].pick_up(True)
                    Reset_Stats(player.fighter.ring1[0], self)
                    player.fighter.ring1 = []
                    player.fighter.ring1.append(self)
                elif len(player.fighter.ring1) == 0:
                    player.fighter.ring1.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Right Ring':
                if len(player.fighter.ring2) > 0:
                    player.fighter.ring2[0].pick_up(True)
                    Reset_Stats(player.fighter.ring2[0], self)
                    player.fighter.ring2 = []
                    player.fighter.ring2.append(self)
                elif len(player.fighter.ring2) == 0:
                    player.fighter.ring2.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Left Trinket':
                if len(player.fighter.trinket1) > 0:
                    player.fighter.trinket1[0].pick_up(True)
                    Reset_Stats(player.fighter.trinket1[0], self)
                    player.fighter.trinket1 = []
                    player.fighter.trinket1.append(self)
                elif len(player.fighter.trinket1) == 0:
                    player.fighter.trinket1.append(self)
                    Reset_Stats(None, self)

            if str(self.slot) == 'Right Trinket':
                if len(player.fighter.trinket2) > 0:
                    player.fighter.trinket2[0].pick_up(True)
                    Reset_Stats(player.fighter.trinket2[0], self)
                    player.fighter.trinket2 = []
                    player.fighter.trinket2.append(self)
                elif len(player.fighter.trinket2) == 0:
                    player.fighter.trinket2.append(self)
                    Reset_Stats(None, self)

            if(str(self.slot) == "Left Hand"):
                if len(player.fighter.Left) > 0:
                    player.fighter.Left[0].pick_up(True)
                    Reset_Stats(player.fighter.Left[0], self)
                    player.fighter.Left = []
                    player.fighter.Left.append(self)
                    Reset_Stats(None, self)
                elif len(player.fighter.Left) == 0:
                    player.fighter.Left.append(self)
                    Reset_Stats(None, self)
            if(str(self.slot) == "Right Hand"):
                if len(player.fighter.Right) > 0:
                    player.fighter.Right[0].pick_up(True)
                    Reset_Stats(player.fighter.Right[0], self)
                    player.fighter.Right = []
                    player.fighter.Right.append(self)
                elif len(player.fighter.Right) == 0:
                    player.fighter.Right.append(self)
                    Reset_Stats(None, self)
            if(str(self.slot) == "Both"):
                if len(player.fighter.Both) > 0:
                    player.fighter.Both[0].pick_up(True)
                    Reset_Stats(player.fighter.Both[0], self)
                    player.fighter.Both = []
                    player.fighter.Both.append(self)
                    
                
                elif len(player.fighter.Both) == 0:
                    player.fighter.Both.append(self)
                    Reset_Stats(None, self)

            if self.name == 'Strange Amulet':

                self.name = 'Amulet of Kings'
                xp_bonus += 100
                player.fighter.max_hp -= 5
                player.fighter.heal(-5)

            elif self.name == 'Bone-inlaid shield':
                self.name = 'Skull Shield'
                player.fighter.max_hp -= 5
                player.fighter.heal(-5)

                player.fighter.Life_leech += 2
            elif self.name == 'Fiery Sword':
                TORCH_RADIUS += 3
                self.owner.name = 'Sword of Flame'

                fov_recompute = True

            elif self.name == 'Defiance':
                message('A voice echoes through your mind..', libtcod.red)
                message('Unrelenting, Unforgiving! I REFUSE to yield!', libtcod.red)



            if self.weapon_type == 'Axe':
                if self.slot == 'Left Hand':

                    if len(player.fighter.Right) > 0:
                        
         
                        if get_equipped_in_left_slot(player.fighter.Right, 'Axe') == None:
                            
                            
                            player.fighter.skill2 = 'Slash (55)'
                            
                        elif get_equipped_in_left_slot(player.fighter.Right, 'Axe') != None:
                            player.fighter.skill2 = 'Whirlwind'

                        else:
                            player.fighter.skill2 = 'Slash'
                    else:
                        player.fighter.skill2 = 'Slash'

                    

                elif self.slot == 'Right Hand':
                    if len(player.fighter.Left) > 0:
         
                        if get_equipped_in_left_slot(player.fighter.Left, 'Axe') != None:
                            player.fighter.skill2 = 'Whirlwind'

                        else:
                            player.fighter.skill2 = 'Slash'
                    else:
                        player.fighter.skill2 = 'Slash'

            if self.weapon_type == 'Shield':
                if self.slot == 'Left Hand':
                    if len(player.fighter.Right) > 0:
         
                        if get_equipped_in_left_slot(player.fighter.Right, 'Shield') != None:
                            player.fighter.skill3 = 'Bastion'
                        else:
                            player.fighter.skill3 = 'Block'
                    else:
                        player.fighter.skill3 = 'Block'

                elif self.slot == 'Right Hand':
                    if len(player.fighter.Left) > 0:
         
                        if get_equipped_in_left_slot(player.fighter.Left, 'Shield') != None:
                            player.fighter.skill3 = 'Bastion'
                        else:
                            player.fighter.skill3 = 'Block'
                    else:
                        player.fighter.skill3 = 'Block'
            scalings()



    def dequip(self):
        global xp_bonus, TORCH_RADIUS, fov_recompute
        #dequip object and show a message about it



        try:
            if self.owner.is_equipped == True:
                if self.owner.slot == 'Left Hand':
                    if self.owner in player.fighter.Left:
                        self.owner.is_equipped = False
                elif self.owner.slot == 'Right Hand':
                    if self.owner in player.fighter.Right:
                        self.owner.is_equipped = False
                        
        except Exception as e:
            message(str(self.owner.slot) + ' SLOT PROBLEM')

        

        message('Dequipped ' + self.owner.name + ' from ' + self.owner.slot + '.', libtcod.light_yellow)
        if self.owner.name == 'Amulet of Kings':
            xp_bonus -= 100
            player.fighter.max_hp += 5
            player.fighter.heal(+5)

        if self.owner.name == 'Skull shield':
            player.fighter.max_hp += 5
            player.fighter.heal(+5)

            player.fighter.Life_leech -= 2
        if self.owner.name == 'Sword of Flame':
            TORCH_RADIUS -= 3
            fov_recompute = True

        if self.owner.weapon_type == 'Axe':

            if self.owner.slot == 'Right Hand':
                if len(player.fighter.Left) > 0:

                    if get_equipped_in_left_slot(player.fighter.Left, 'Axe') != None:
                        player.fighter.skill2 = 'Slash'

                    elif get_equipped_in_left_slot(player.fighter.Left, 'Shield') != None:
                        player.fighter.skill2 = 'Unarmed'
                        player.fighter.skill3 = 'Block'
                else:
                    player.fighter.skill2 = 'Unarmed'
                    player.fighter.skill3 = 'Unarmed'
                    
            elif self.owner.slot == 'Left Hand':
                if len(player.fighter.Right) > 0:

                    if get_equipped_in_left_slot(player.fighter.Right, 'Axe') != None:
                        player.fighter.skill2 = 'Slash'

                    elif get_equipped_in_left_slot(player.fighter.Right, 'Shield') != None:
                        player.fighter.skill2 = 'Unarmed'
                        player.fighter.skill3 = 'Block'
                else:
                    player.fighter.skill2 = 'Unarmed'
                    player.fighter.skill3 = 'Unarmed'
                    
        if self.owner.weapon_type == 'Shield':

            if self.owner.slot == 'Right Hand':
                if len(player.fighter.Left) > 0:
                
                    if get_equipped_in_left_slot(player.fighter.Left, 'Axe') != None:
                        player.fighter.skill2 = 'Slash'
                        player.fighter.skill3 = 'Unarmed'

                    elif get_equipped_in_left_slot(player.fighter.Left, 'Shield') != None:
                        player.fighter.skill2 = 'Unarmed'
                        player.fighter.skill3 = 'Block'
                else:
                    player.fighter.skill3 = 'Unarmed'

            elif self.owner.slot == 'Left Hand':
                if len(player.fighter.Right) > 0:
                    if get_equipped_in_left_slot(player.fighter.Right, 'Axe') != None:
                        player.fighter.skill2 = 'Slash'
                        player.fighter.skill3 = 'Unarmed'

                    elif get_equipped_in_left_slot(player.fighter.Right, 'Shield') != None:
                        player.fighter.skill2 = 'Unarmed'
                        player.fighter.skill3 = 'Block'
                else:
                    player.fighter.skill3 = 'Unarmed'

            if player.fighter.Block_Duration > 0:
                player.fighter.Block_Duration = 0
                player.fighter.defense -= player.fighter.Block_Bonus
                    
                    
                    





        player.fighter.Stamina = 0

def Reset_Stats(removing=None, adding=None):
    global player, objects
    if(removing != None and adding == None):
        try:
            player.fighter.defense -= removing.defense_bonus
        except Exception as e:
            pass
        try:
            player.fighter.Life_leech -= removing.Life_leech
        except Exception as e:
            pass
        
        try:
            player.fighter.VISIBILITY += removing.Conceal_Bonus
        except Exception as e:
            pass
        
    if(removing == None and adding != None):
        try:
            player.fighter.defense += adding.defense_bonus
        except Exception as e:
            pass
        try:
            player.fighter.Life_leech += adding.Life_leech
        except Exception as e:
            pass
        try:
            player.fighter.VISIBILITY += removing.Conceal_Bonus
        except Exception as e:
            player.fighter.VISIBILITY -= adding.Conceal_Bonus
    if(removing != None and adding != None):
        try:
            player.fighter.defense -= removing.defense_bonus
            player.fighter.defense += adding.defense_bonus
        except Exception as e:
            pass

        try:
            player.fighter.Life_leech -= removing.Life_leech
            player.fighter.Life_leech += adding.Life_leech
        except Exception as e:
            pass

        try:

            player.fighter.VISIBILITY += removing.Conceal_Bonus
            player.fighter.VISIBILITY -= adding.Conceal_Bonus
        except Exception as e:
            pass    


def add_quest(quest, secondary):
    Quest.Quest_Second.append(quest + ' secondary objective:' + secondary)

def reward_function(quest):
    
    if quest == 'A Voice Speaks':
        message('Got 250 xp from A Voice Speaks!', libtcod.green)
        player.fighter.xp += 250
        
    if quest == 'A Voice Speaks secondary objective:Kill Captain Dalmer':
        message('Got 100 xp from Kill Captain Dalmer!', libtcod.green)
        player.fighter.xp += 100
        
    
    
        

def main_complete(name, quest, turn_in=False, xp=0, item=None):
    
    for i in Quest.Quest_Main:
        if quest == i and i not in Quest.completed and i not in Quest.rewards:
            Quest.completed.append(i)
            

    for i in Quest.Quest_name:
        if name == i and i not in Quest.completed:
            Quest.completed.append(i)

    for i in Quest.completed:
        if i not in Quest.rewards and i not in Quest.error:
            Quest.rewards.append(i)
            Quest.error.append(i)

            
            
        
        
    if turn_in == True:

        message(name + ' completed!', libtcod.green)

        for i in Quest.rewards:
            if name in i:
                reward_function(i)
                Quest.rewards.remove(i)

        if len(Quest.rewards) == 1:
            if quest == Quest.rewards[0]:
                thing = Quest.rewards[0]
                reward_function(thing)
                Quest.rewards.remove(thing)
        else:
            for i in Quest.rewards:
                if quest in i:
                    reward_function(i)
                    Quest.rewards.remove(i)

        

        

        

        for i in Quest.Quest_Second:
            if name in i:
                if i not in Quest.completed:
                    Quest.Quest_Second.remove(i)

        temp2 = name

        name = quest

        temp = 0

        count = 0

        

        for i in Quest.Quest_Main:
            if i in Quest.completed and name == i:
                
                Quest.Quest_Main.remove(i)
      
                for i in Quest.Quest_name:
                    
                    if i in Quest.completed:
                        Quest.Quest_name.remove(i)
                    
                count = 0
        
                for i in Quest.completed:
                    
                    
                    if i in Quest.Quest_Second:
                        thing = Quest.Quest_Second[count]
                        Quest.Quest_Second.remove(thing)

                    count +=1

def secondary_complete(quest, secondary):
    for i in Quest.Quest_Second:
        if i not in Quest.completed and (quest and secondary in i):
            message(quest + ' : ' + secondary + ' complete!', libtcod.green)
            Quest.completed.append(i)
            


    

def quest_journal(header, width, increment, clear=False):
    global key, mouse 
    #calculate total height for the header (after auto-wrap) and one line per option
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0
    height = 20 + header_height
    #create an off-screen console that represents the menu's window
    window = libtcod.console_new(100, 100)

    libtcod.console_clear(0)
    libtcod.console_clear(window)
    

    #print the header, with auto-wrap

    img = libtcod.image_load('black_background.png')

    libtcod.image_blit_2x(img, 0, 0, 0, sx=0, sy=0, w=-1, h=-1)

    libtcod.image_blit_2x(img, 0, 50, 0, sx=0, sy=0, w=-1, h=-1)

    libtcod.console_print_rect_ex(window, 0, 0, 100, 100 , libtcod.white, libtcod.LEFT, header)


 
    factor = 0
    e = 0
    if increment > 0:
        factor = 1

    for i in range(increment*3, increment*3+3):
        try:
            if Quest.Quest_Main[i] in Quest.completed:
                libtcod.console_set_default_foreground(window, libtcod.green)
                libtcod.console_print_ex(window, 0, e*10+3, libtcod.white, libtcod.LEFT, chr(97+i) + ') ' + Quest.Quest_name[i] + ':')
                libtcod.console_set_default_foreground(window, libtcod.white)
            else:
                libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_ex(window, 0, e*10+3, libtcod.white, libtcod.LEFT, chr(97+i) + ') ' + Quest.Quest_name[i] + ':')
                libtcod.console_set_default_foreground(window, libtcod.white)
        except:
            pass
        e += 1

    e = 0

    for i in range(increment*3, increment*3+3):
        try:

            
            
            
            if Quest.Quest_Main[i] in Quest.completed:
                libtcod.console_set_default_foreground(window, libtcod.green)
                libtcod.console_print_ex(window, 5, e*10+5, libtcod.white, libtcod.LEFT, 'Main: ' + Quest.Quest_Main[i])
                libtcod.console_set_default_foreground(window, libtcod.white)
            else:
                libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_ex(window, 5, e*10+5, libtcod.white, libtcod.LEFT, 'Main: ' + Quest.Quest_Main[i])
                libtcod.console_set_default_foreground(window, libtcod.white)
            
            
            
                
        except:
            pass
        e += 1

    e = 0

    count = 0
    sort = 0

    iterate = Quest.Quest_name[increment*3:increment*3+3]

    

    for i in iterate:
        
        
        for d in Quest.Quest_Second:
            
            
            if i in d:

                first = d
                for z in first:
                    if z == ':':
                        second = first[sort:]
                        sort = 0
                        break

                    sort += 1
                    
                
                if e == 0:
                    if first in Quest.completed:
                        libtcod.console_set_default_foreground(window, libtcod.green)
                        libtcod.console_print_ex(window, 5, e*10+6+count, libtcod.green, libtcod.LEFT, 'Secondary' + str(second))
                        libtcod.console_set_default_foreground(window, libtcod.white)
                    else:
                        libtcod.console_set_default_foreground(window, libtcod.red)
                        libtcod.console_print_ex(window, 5, e*10+6+count, libtcod.red, libtcod.LEFT, 'Secondary' + str(second))
                        libtcod.console_set_default_foreground(window, libtcod.white)
                if e == 1:
                    if first in Quest.completed:
                        libtcod.console_set_default_foreground(window, libtcod.green)
                        libtcod.console_print_ex(window, 5, e*10+6+count-1, libtcod.green, libtcod.LEFT, 'Secondary' + str(second))
                        libtcod.console_set_default_foreground(window, libtcod.white)
                    else:
                        libtcod.console_set_default_foreground(window, libtcod.red)
                        libtcod.console_print_ex(window, 5, e*10+6+count-1, libtcod.red, libtcod.LEFT, 'Secondary' + str(second))
                        libtcod.console_set_default_foreground(window, libtcod.white)
                if e == 2:
                    if first in Quest.completed:
                        libtcod.console_set_default_foreground(window, libtcod.green)
                        libtcod.console_print_ex(window, 5, e*10+6+count-3, libtcod.green, libtcod.LEFT, 'Secondary' + str(second))
                        libtcod.console_set_default_foreground(window, libtcod.white)
                    else:
                        libtcod.console_set_default_foreground(window, libtcod.red)
                        libtcod.console_print_ex(window, 5, e*10+6+count-1-3, libtcod.red, libtcod.LEFT, 'Secondary' + str(second))
                        libtcod.console_set_default_foreground(window, libtcod.white)
                
                count += 1

        e += 1
        


        
                

##    for i in range(increment*3, increment*3+3):
##        try:
##            libtcod.console_print_ex(window, 5, e*10+7, libtcod.white, libtcod.LEFT, 'Second: ' + Quest.Quest_Second[i])
##        except:
##            pass
##        e += 1
##    e = 0

     

    
##    if len(Quest.Quest_Main) > (increment+1)*3:
        
    if len(Quest.Quest_Main) > (increment+1)*3:
        if increment == 0:
            libtcod.console_print_ex(window, 5, 1, libtcod.white, libtcod.LEFT, 'Page:     1 >>>')
        else:
            libtcod.console_print_ex(window, 5, 1, libtcod.white, libtcod.LEFT, 'Page: <<< ' + str(increment+1) + ' >>>')

    elif len(Quest.Quest_Main) > 3 and increment > 0:
        libtcod.console_print_ex(window, 5, 1, libtcod.white, libtcod.LEFT, 'Page: <<< ' + str(increment+1))
        
        

    #blit the contents of "window" to the root console
    x = SCREEN_WIDTH/2 - 50
    y = SCREEN_HEIGHT/2 - 20

    choice = 0

    
    
    while choice == 0:
        img = libtcod.image_load('black_background.png')

        libtcod.image_blit_2x(img, 0, 0, 0, sx=0, sy=0, w=-1, h=-1)

        libtcod.image_blit_2x(img, 0, 50, 0, sx=0, sy=0, w=-1, h=-1)

        

        libtcod.console_blit(window, 0, 0, 100, 100, 0, x, y, 1.0, 1.0)

        libtcod.console_set_default_foreground(0, libtcod.white)

        libtcod.console_flush()
        
    

        mouse = libtcod.Mouse()
        key = libtcod.Key()

        

        
        

        if len(Quest.Quest_name) > 0:
            libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)

            (a, b) = (mouse.cx, mouse.cy)

            key_char = chr(key.c)

            if mouse.lbutton_pressed:
                
                
                if ((increment+1)*3)+1 <= len(Quest.Quest_Main) and a >= 42 and a <= 44:
                    
                    thing = increment +1
                    libtcod.console_clear(0)
                    libtcod.console_clear(window)
                    message('Length of Quest Second is: ' + str(len(Quest.Quest_Second)))
                    quest_journal('Quests: Press Associated Quest Key for Info', 100, thing)
                    
                    choice = 'Done'
                    break
                if increment > 0 and a >= 36 and a <= 38:
                    thing = increment -1
                    libtcod.console_clear(0)
                    libtcod.console_clear(window)
                    quest_journal('Quests: Press Associated Quest Key for Info', 100, thing)
                    choice = 'Done'
                    break

            try:
                thing = key.c - 97
                if quest_check(Quest.Quest_name[thing]):
                    choice = 'Done'
                    break
                
            except:
                pass

            if key.vk == libtcod.KEY_ENTER:
                break
            

def quest_check(name):
    global key

    libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)

            

    key_char = chr(key.c)
    
    for i in Quest.Quest_name:
        if i == name:
            img = libtcod.image_load('black_background.png')

            libtcod.image_blit_2x(img, 0, 0, 0, sx=0, sy=0, w=-1, h=-1)

            if name == 'A Voice Speaks':
                (slice_min, slice_max) = (335, 350)
            if name == 'Greed, My Old Friend':
                (slice_min, slice_max) = (335, 350)
            with open('derp.rtf') as f:
                lines = list(islice(f, slice_min, slice_max))
            inspect_menu(name, lines, 100)

            return True

    return False


def get_weapon_in_slot(slot):
    try:
        return slot[0]
    except:
        return None    

def get_equipped_in_left_slot(slot, name):
    
    
    try:
        if slot[0].weapon_type == name:
            return slot[0]
    except:
        return None

def get_weight(slot):

    energy = 0

    if slot != None:
        energy += slot[0].weight

        if slot[0].weapon_type == 'Bladed':
            energy += 1000 #PH
        elif slot[0].weapon_type == 'Blunt':
            energy += 1000 #PH
        elif slot[0].weapon_type == 'Piercing':
            energy += 1000 #PH
        elif slot[0].weapon_type == 'Slashing':
            energy += 1000 #PH

        elif slot[0].weapon_type == 'Shield':
            energy += 1000 #PH
    #Put more weapon types when list is complete

    else:
        energy = 1000


    if player.fighter.Race == 'Human':
        if player.fighter.Sub_race == 'Child of the Order':
            energy = int(round(energy*0.85))
        elif player.fighter.Sub_race == 'Mumuh-khan':
            energy = int(round(energy*0.80))
        elif player.fighter.Sub_race == 'Kameerian':
            energy = int(round(energy*0.83))

        elif player.fighter.Sub_race == 'Braahks':
            energy = int(round(energy*0.85))

        elif player.fighter.Sub_race == 'Shaduriens':
            energy = int(round(energy*0.75))

    elif player.fighter.Race == 'Dwarf':
        if player.fighter.Sub_race == 'Sons of the Stone':
            energy = int(round(energy*0.95))

        elif player.fighter.Sub_race == 'Rahgon':
            energy = int(round(energy*0.92))

        elif player.fighter.Sub_race == 'Nizerd':
            energy = int(round(energy*0.90))
        elif player.fighter.Sub_race == 'Rohg':
            energy = int(round(energy*0.87))

        elif player.fighter.Sub_race == 'Xinutur':
            energy = int(round(energy*0.85))

    elif player.fighter.Race == 'Elf':
        if player.fighter.Sub_race == 'Ashen':
            energy = int(round(energy*0.80))

        elif player.fighter.Sub_race == 'Thismur':
            energy = int(round(energy*0.75))

        elif player.fighter.Sub_race == 'Leariim':
            energy = int(round(energy*0.77))

        elif player.fighter.Sub_race == 'Ishmur':
            energy = int(round(energy*0.72))

        elif player.fighter.Sub_race == 'Pyaritis':
            energy = int(round(energy*0.70))

    elif player.fighter.Race == 'Orc':
        if player.fighter.Sub_race == 'Bleak ones':
            energy = int(round(energy*0.79))
        elif player.fighter.Sub_race == 'Grim-Skull':
            energy = int(round(energy*0.76))

        elif player.fighter.Sub_race == 'Flame-bathed':
            energy = int(round(energy*0.72))

        elif player.fighter.Sub_race == 'Lost Brethren':
            energy = int(round(energy*0.74))

        elif player.fighter.Sub_race == 'Gravewalker':
            energy = int(round(energy*0.73))

    elif player.fighter.Race == 'Demonkin':
        if player.fighter.Sub_race == 'Soul Marked':
            energy = int(round(energy*0.83))
        elif player.fighter.Sub_race == 'Half-blood':
            energy = int(round(energy*0.80))
        elif player.fighter.Sub_race == 'Full-blood':
            energy = int(round(energy*0.79))
        elif player.fighter.Sub_race == 'Firstborn':
            energy = int(round(energy*0.77))
        elif player.fighter.Sub_race == "Sra'shir":
            energy = int(round(energy*0.81))

    elif player.fighter.Race == 'Undead':
        if player.fighter.Sub_race == 'Risen':
            energy = int(round(energy*1.40))
        elif player.fighter.Sub_race == 'Lich':
            energy = int(round(energy*0.75))
        elif player.fighter.Sub_race == 'Skeleton':
            energy = int(round(energy*0.60))
        elif player.fighter.Sub_race == 'Grave Stalker':
            energy = int(round(energy*0.55))

        elif player.fighter.Sub_race == 'Xanthu':
            energy = int(round(energy*0.66))

    elif player.fighter.Race == 'Ogre':
        if player.fighter.Sub_race == 'Half-Demon/Half-Ogre':
            energy = int(round(energy*1.10))
        elif player.fighter.Sub_race == 'Mechanicos':
            energy = int(round(energy*1.20))

        elif player.fighter.Sub_race == 'Warmongers':
            energy = int(round(energy*1.05))
        elif player.fighter.Sub_race == 'Lurkers':
            energy = int(round(energy*0.95))
        elif player.fighter.Sub_race == 'Godspawn':
            energy = int(round(energy*1.01))

    # 'Human', 'Dwarf', 'Elf', 'Orc', 'Demonkin', 'Undead', 'Ogre'


    #Half-Demon/Half-Ogre, Mechanicos, Warmongers, Lurkers, Godspawn

    

    
    return energy

    
        

def get_equipped_in_slot(slot, weapon_type):
    for i in range(0, len(inventorylist)):
        for item in inventorylist[i]:
            if item.is_equipped == True and item.weapon_type == weapon_type:
                return item
    return None




def is_blocked(x, y):
    #first test the map tile
    if map[x][y].blocked:
        return True

    #now check for any blocking objects
    for object in objects:
        if object.blocks and object.x == x and object.y == y:
            return True

    return False

def create_room(room):
    global map
    #go through the tiles in the rectangle and make them passable
    for x in range(room.x1 + 1, room.x2):
        for y in range(room.y1 + 1, room.y2):
            map[x][y].blocked = False
            map[x][y].block_sight = False

def kick(dx, dy):
    global map, fov_recompute, inventory


    x = player.x + dx
    y = player.y + dy

    breaking = libtcod.random_get_int(0, 1, 2)

    
    for object in objects:
        if 'Door' in object.name and object.x == x and object.y == y:
            if breaking == 1:
                breaking2 = libtcod.random_get_int(0, 1, 4)
                if breaking2 == 1:

                    message('The door breaks!', libtcod.dark_green)

                if breaking2 == 2:

                    message('The door shatters!', libtcod.dark_green)

                if breaking2 == 3:

                    message('You burst through the door!', libtcod.dark_green)

                if breaking2 == 4:

                    message('The door falls down, broken and defeated.', libtcod.dark_green)
                objects.remove(object)
                if 'start' in object.name:
                    if Dungeon.Terrain_type == 'Pits of Despair':
                        message('Hey! What are you doing?!', libtcod.red)

                        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=5, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=100,race='Beast', death_function=monster_death)

                        ai_component = BasicMonster()

                        monster = Object(player.x+5, y, 'g', 'Guard', libtcod.blue, blocks=True, fighter=fighter_component, ai=ai_component)

                        objects.append(monster)

                        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=5, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=10, minimum_hit=100,race='Beast', death_function=monster_death)

                        ai_component = BasicMonster()

                        monster = Object(player.x+5, y+2, 'g', 'Guard', libtcod.blue, blocks=True, fighter=fighter_component, ai=ai_component)

                        objects.append(monster)

                        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=5, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)

                        ai_component = BasicMonster()

                        monster = Object(player.x+5, y+3, 'g', 'Guard', libtcod.blue, blocks=True, fighter=fighter_component, ai=ai_component)

                        objects.append(monster)

                        for i in range(3):

                            fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)


                            monster = Object(25, 17+i, 'O', 'Barrel', libtcod.Color(127,101,63), blocks=True, fighter=fighter_component, ai=None)

                            objects.append(monster)

                        for i in range(2):

                            fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)


                            monster = Object(24, 17+i, 'O', 'Barrel', libtcod.Color(127,101,63), blocks=True, fighter=fighter_component, ai=None)

                            objects.append(monster)

                        for i in range(2):

                            fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)


                            monster = Object(23, 17+i, 'O', 'Barrel', libtcod.Color(127,101,63), blocks=True, fighter=fighter_component, ai=None)

                            objects.append(monster)

                        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)

                        smart_ai = BasicMonster()
                        monster = Object(20, 17, 'O', 'Clever Barrel', libtcod.Color(127,101,63),Rank=2, blocks=True, fighter=fighter_component, ai=smart_ai)

                        objects.append(monster)
                        
                        







                return True
            if breaking == 2:
                breaking3 = libtcod.random_get_int(0, 1, 5)
                if breaking3 == 1:
                    message('The Door still stands.', libtcod.red)

                if breaking3 == 2:
                    message('The Door mocks your efforts.', libtcod.red)

                if breaking3 == 3:
                    message('The Door stands tall.', libtcod.red)

                if breaking3 == 4:
                    message("The Door doesn't even budge.", libtcod.red)

                if breaking3 == 5:
                    message("The Door creaks. But nothing happens.", libtcod.red)
                return True

        if 'Steel Gate' in object.name and object.x == x and object.y == y:
            gate = False
            stuff = 0

            factor = None

            i = 0

            count = 0
            

           
            
            while factor == None:
                
                for object in inventorylist[i]:
                    if object.name == 'Strange Key':
                        inventorylist[i].remove(object)
                        for object in objects:
                            if object.name == 'Right Steel Gate' and object.x == x and object.y == y:
                                objects.remove(object)

                        message('Quest completed!')
                        break
                        
                        
                    count += 1

                    if count%25 != 0:
                        if count == len(inventorylist[i]):
                            
                            factor = 'Done'
                            break

                    elif count%25 == 0 and len(inventorylist) > 1:
                        i += 1
                        if (i + 1) > len(inventorylist):
                            
                            factor = 'Done'
                            break
                    elif count%25 == 0 and len(inventorylist) == 1:
                        
                        factor = 'Done'
                        break
                            


    if map[18][15] == map[x][y]:



        map[x][y] = Tile(False)


    if map[16][16] == map[x][y]:
        map[x][y] = Tile(False)

    if map[16][30] == map[x][y]:
        map[x][y] = Tile(False)

    if map[13][40] == map[x][y]:
        map[x][y] = Tile(False)

    if map[10][39] == map[x][y]:
        map[x][y] = Tile(False)

    if map[11][39] == map[x][y]:
        map[x][y] = Tile(False)

    if map[11][40] == map[x][y]:
        map[x][y] = Tile(False)

    if map[12][40] == map[x][y]:
        map[x][y] = Tile(False)



    return False



def create_h_tunnel(x1, x2, y):
    global map
    #horizontal tunnel. min() and max() are used in case x1>x2
    for x in range(min(x1, x2), max(x1, x2) + 1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

def create_v_tunnel(y1, y2, x):
    global map
    #vertical tunnel
    for y in range(min(y1, y2), max(y1, y2) + 1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

def wilderness(mountain=False):
    global map, objects, stairs, new_x, new_y, stairs1, stairs_count, fov_recompute, wilderness_factor

    factor = libtcod.random_get_int(0, 2, 2)
    if factor == 1 and 'Graveyard spawn in' not in player.fighter.event:
        player.fighter.event.append('Graveyard No spawn')
        
    if factor == 2 and 'Graveyard spawn in' not in player.fighter.event:
        player.fighter.event.append('Graveyard spawn')
        
    player.fighter.event.append('Graveyard spawn in')
    
        



    objects = [player]

    player.x = 10
    player.y = 10

    map = [[ Tile(False)
        for y in range(MAP_HEIGHT) ]
            for x in range(MAP_WIDTH) ]
       #WIDTH NR 1 #HEIGHT NR 2
    #LEFT SIDE
    for i in range(49):
        map[0][i] = Tile(True)
        if mountain == True:
            map[0][i].mountain = True


    #RIGHT SECTION
    for i in range(49):
        map[94][i] = Tile(True)
        if mountain == True:
            map[94][i].mountain = True


    #TOP SECTION
    for i in range(96):
        map[i][0] = Tile(True)
        if mountain == True:
            map[i][0].mountain = True


    #BOTTOM SECTION
    for i in range(96):
        map[i][48] = Tile(True)
        if mountain == True:
            map[i][48].mountain = True

    
    Dungeon.Terrain_type = 'Wilderness'
    Dungeon.dungeon_level = 0
    

    initialize_fov()
    fov_recompute = True
    player.fighter.wilderness_factor = True


def make_map(cave=False):
    global map, objects, stairs, new_x, new_y, stairs1, stairs_count, stairs_out, stairs_in

    #the list of objects with just the player
    objects = [player]

    #fill map with "blocked" tiles
    map = [[ Tile(True)
        for y in range(MAP_HEIGHT) ]
            for x in range(MAP_WIDTH) ]

    rooms = []
    num_rooms = 0

    for r in range(MAX_ROOMS):
        #random width and height
        w = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        h = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        #random position without going out of the boundaries of the map
        x = libtcod.random_get_int(0, 0, MAP_WIDTH - w - 10)
        y = libtcod.random_get_int(0, 0, MAP_HEIGHT - h - 10)

        #"Rect" class makes rectangles easier to work with
        new_room = Rect(x, y, w, h)

        if num_rooms == 4:
            new_room = Rect(x, y, 10, 10)

        failed = False

        #run through the other rooms and see if they intersect with this one
        if cave == False:
            for other_room in rooms:
                if new_room.intersect(other_room):
                    failed = True
                    break

        if failed == False or cave == True:
            #this means there are no intersections, so this room is valid

            #"paint" it to the map's tiles
            create_room(new_room)

            #add some contents to this room, such as monsters

            place_objects(new_room)

            if num_rooms == 4 and Dungeon.Terrain_type != 'The Descent':
                vault(new_room)

            #center coordinates of new room, will be useful later
            (new_x, new_y) = new_room.center()

            if num_rooms == 0:
                #this is the first room, where the player starts at
                player.x = new_x
                player.y = new_y

                if player.fighter.past_first_level == True:
                    stairs_in = Object(new_x, new_y, '>', 'stairs', libtcod.white, always_visible=True)
                    objects.append(stairs_in)
                    stairs_in.send_to_back()
                else:
                    if Dungeon.Terrain_type != 'The Descent':
                        stairs_out = Object(new_x, new_y, '<', 'stairs', libtcod.white, always_visible=True)
                        objects.append(stairs_out)
                        stairs_out.send_to_back()
            else:
                #all rooms after the first:
                #connect it to the previous room with a tunnel

                #center coordinates of previous room
                (prev_x, prev_y) = rooms[num_rooms-1].center()

                #draw a coin (random number that is either 0 or 1)
                if libtcod.random_get_int(0, 0, 1) == 1:
                    #first move horizontally, then vertically
                    create_h_tunnel(prev_x, new_x, prev_y)
                    create_v_tunnel(prev_y, new_y, new_x)
                else:
                    #first move vertically, then horizontally
                    create_v_tunnel(prev_y, new_y, prev_x)
                    create_h_tunnel(prev_x, new_x, new_y)
            

            #finally, append the new room to the list
            rooms.append(new_room)
            num_rooms += 1

    #create stairs at the center of the last room



    if player.fighter.past_first_level == True:
        stairs_out = Object(new_x, new_y, '<', 'stairs', libtcod.white, always_visible=True)
        objects.append(stairs_out)
        stairs_out.send_to_back()

    else:
        if Dungeon.Terrain_type == 'The Descent':
            stairs_out = Object(new_x, new_y, '<', 'stairs', libtcod.white, always_visible=True)
            objects.append(stairs_out)
            stairs_out.send_to_back()
        else:
            stairs_in = Object(new_x, new_y, '>', 'stairs', libtcod.white, always_visible=True)
            objects.append(stairs_in)
            stairs_in.send_to_back()


def door(direction, name, x, y):
    #Places a door at the X and Y co-ordinates of the current Map.


    if direction == 'Right' or direction == 'Left':
        obj = Object(x, y, '|', direction + ' ' + str(name), libtcod.grey, blocks=True)


    if direction == 'South' or direction == 'North':
        obj = Object(x, y, '_', direction + ' ' + str(name), libtcod.grey, blocks=True)





    objects.append(obj)



def secret_wall(x, y):

    obj = Object(x, y, '#', 'Odd looking wall', libtcod.yellow, blocks=True)

    objects.append(obj)








def random_choice_index(chances):  #choose one option from list of chances, returning its index
    #the dice will land on some number between 1 and the sum of the chances
    dice = libtcod.random_get_int(0, 1, sum(chances))

    #go through all chances, keeping the sum so far
    running_sum = 0
    choice = 0
    for w in chances:
        running_sum += w

        #see if the dice landed in the part that corresponds to this choice
        if dice <= running_sum:
            return choice
        choice += 1

def random_choice(chances_dict):
    #choose one option from dictionary of chances, returning its key
    chances = chances_dict.values()
    strings = chances_dict.keys()

    return strings[random_choice_index(chances)]



def from_dungeon_level(table):
    #returns a value that depends on level. the table specifies what value occurs after each level, default is 0.
    for (value, level) in reversed(table):
        if dungeon_level >= level:
            return value
    return 0

def monster_list(minimum, maximum, room, i, e, x, y):
    choice = libtcod.random_get_int(0, minimum, maximum)


    x = x+e
    y = y+i


    if choice == 1:
        #create an orc
        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
        ai_component = BasicMonster()

        monster = Object(x, y, 'o', 'Orc', libtcod.desaturated_green,
                         blocks=True, fighter=fighter_component, ai=ai_component)
    elif choice == 2:
        #create a Flaming Imp
        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
        ai_component = BasicMonster()

        monster = Object(x, y, 'i', 'Flaming Imp', libtcod.red,
                         blocks=True, fighter=fighter_component, ai=ai_component)

    elif choice == 3:
        #create a thug
        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
        ai_component = BasicMonster()

        monster = Object(x, y, 't', 'Thug', libtcod.Color(127,101,63),
                         blocks=True, fighter=fighter_component, ai=ai_component)

    elif choice == 4:
        
        #create a cave wolf
        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
        ai_component = BasicMonster()

        monster = Object(x, y, 'w', 'Cave Wolf', libtcod.grey,
                         blocks=True, fighter=fighter_component, ai=ai_component)
    elif choice == 5:
        #create a cave wolf alpha
        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
        ai_component = BasicMonster()

        monster = Object(x, y, 'W', 'Cave Wolf Alpha', libtcod.grey,
                         blocks=True, fighter=fighter_component, ai=ai_component)

    objects.append(monster)





def vault(room):

    for e in range(9):
        for i in range(9):
            monster_list(1, 5, room, i, e, room.x1+1, room.y1+1)


def place_objects(room):
    global xp_bonus, HOUR, MINUTE





    for i in range(libtcod.random_get_int(0, 0, 4)):
        #choose random spot for this monster
        #x = libtcod.random_get_int(0, room.x1+1, room.x2-1)
        x = libtcod.random_get_int(0, room.x1+1, room.x2-1)
        y = libtcod.random_get_int(0, room.y1+1, room.y2-1)

        #only place it if the tile is not blocked
        if not is_blocked(x, y):
            if Dungeon.Terrain_type == 'Random':
                choice = libtcod.random_get_int(0, 1, 100)
                if choice >= 1 and choice <= 20:
                    #create an orc
                    fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=80, level=1,
                                        min_dam=5, max_dam=10, minimum_hit=70, evade=55, race='Undead', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 'S', 'Soulless Shatm', libtcod.grey,
                                     blocks=True, fighter=fighter_component, energy=700, ai=ai_component)
                elif choice >= 21 and choice <= 40:
                    #create a Flaming Imp
                    fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=45, level=1,
                                        min_dam=1, max_dam=5, minimum_hit=50, evade=60,race='Beast', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 'J', 'Tundra Prowler', libtcod.light_blue,
                                     blocks=True, fighter=fighter_component, energy=500, ai=ai_component)

                    
                elif choice >= 41 and choice <= 60:
                    #create a thug
                    fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=30, level=1,
                                        min_dam=1, max_dam=5, minimum_hit=50, evade=75, monster_type='Swarm', race='Humanoid', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 'f', 'Frozen Skulker', libtcod.white,
                                     energy=250,blocks=True, fighter=fighter_component, ai=BasicMonster())

                elif choice >= 61 and choice <= 80:
                    #create a cave wolf
                    fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=70, level=1,
                                        min_dam=1, max_dam=5, minimum_hit=50, evade=60,race='Undead', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 's', 'Frozen Soul', libtcod.red,
                                     blocks=True, fighter=fighter_component, energy=300, ai=ai_component)
                elif choice >= 81 and choice <= 100:
                    #create a cave wolf alpha
                    fighter_component = Monster(hp=15, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=60, level=1,
                                        min_dam=1, max_dam=5, minimum_hit=50, evade=80, armor_pen=5, race='Beast', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 'o', 'White Skull Hunter', libtcod.white,
                                     blocks=True, fighter=fighter_component, energy=200, ai=ai_component)

                
            elif Dungeon.Terrain_type == 'The Descent':
                choice = libtcod.random_get_int(0, 1, 100)
                
                if choice >= 1 and choice <= 20:
                    #create an orc
                    fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=5000, max_energy=100, xp=85, level=1,
                                        min_dam=5, max_dam=10, minimum_hit=70, evade=30, monster_type='Swarm',race='Undead', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 'S', 'Soulless Shatm', libtcod.grey,
                                     blocks=True, fighter=fighter_component, energy=7000, ai=ai_component)
                elif choice >= 21 and choice <= 40:
                    #create a Flaming Imp
                    fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=5000, max_energy=100, xp=65, level=1,
                                        min_dam=1, max_dam=5, minimum_hit=50, evade=40, monster_type='Swarm',race='Beast', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 'J', 'Tundra Prowler', libtcod.blue,
                                     blocks=True, fighter=fighter_component, energy=5000, ai=ai_component)

                elif choice >= 41 and choice <= 60:
                    #create a thug
                    fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=5000, max_energy=100, xp=35, level=1,
                                        min_dam=1, max_dam=5, minimum_hit=50, evade=20, monster_type='Swarm', race='Humanoid', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 'f', 'Frozen Skulker', libtcod.white,
                                     energy=2500,blocks=True, fighter=fighter_component, ai=BasicMonster())

                elif choice >= 61 and choice <= 80:
                    #create a cave wolf
                    fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=5000, max_energy=100, xp=40, level=1,
                                        min_dam=1, max_dam=5, minimum_hit=50, evade=14, monster_type='Swarm', race='Undead', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 's', 'Frozen Soul', libtcod.red,
                                     blocks=True, fighter=fighter_component, energy=1500, ai=ai_component)
                elif choice >= 81 and choice <= 100:
                    #create a cave wolf alpha
                    fighter_component = Monster(hp=15, defense=1, Strength=2, agility=7, current_energy=0, energy=5000, max_energy=100, xp=30, level=1,
                                        min_dam=1, max_dam=5, minimum_hit=50, evade=13, armor_pen=5, monster_type='Swarm', race='Beast', death_function=monster_death)
                    ai_component = BasicMonster()

                    monster = Object(x, y, 'o', 'White Skull Hunter', libtcod.white,
                                     blocks=True, fighter=fighter_component, energy=2000, ai=ai_component)

            objects.append(monster)





def paint():
    global key, mouse, TORCH_RADIUS, map_stuff_add, map_stuff_remove
    factor = True


    while factor == True:
        TORCH_RADIUS = 5
        #render the screen. this erases the inventory and shows the names of objects under the mouse.

        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)

        (x, y) = (mouse.cx, mouse.cy)

          #cancel if the player right-clicked or pressed Escape

        #accept the target if the player clicked in FOV, and in case a range is specified, if it's in that range
        if mouse.lbutton_pressed:
            map[x][y].lava = True
            message('Added')
            
            libtcod.console_flush()
            render_all()
            

        if mouse.rbutton_pressed:
            map[x][y].lava = False
            message('Removed')
            
            
            libtcod.console_flush()
            render_all()
            

        libtcod.console_flush()
        render_all()

        key_char = chr(key.c)

        if key_char == 's':
            factor = False

def large_paint():
    global key, mouse, TORCH_RADIUS
    factor = True

    count = 0
    width = 3


    while factor == True:
        TORCH_RADIUS = 5
        #render the screen. this erases the inventory and shows the names of objects under the mouse.

        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)

        (x, y) = (mouse.cx, mouse.cy)

        

        

        
          #cancel if the player right-clicked or pressed Escape
                
        #accept the target if the player clicked in FOV, and in case a range is specified, if it's in that range
        if mouse.lbutton_pressed:
            for i in range(width):
                if count == 0:
                    map[x+i][y].forest = True
                    map[x-i][y].forest = True
                    
                    message('Added Forest')
                if count == 1:
                    map[x+i][y].lava = True
                    map[x-i][y].lava = True
                    message('Added Lava')

                if count == 2:
                    map[x+i][y].water = True
                    map[x-i][y].water = True
                    message('Added Water')
                if count == 3:
                    map[x+i][y].mountain = True
                    map[x-i][y].mountain = True
                    message('Added Mountains')

            
            
            libtcod.console_flush()
            render_all()
            
            
            

        if mouse.rbutton_pressed:
            for i in range(width):
                if count == 0:
                    map[x+i][y].forest = False
                    map[x-i][y].forest = False
                    message('Removed Forest')
                if count == 1:
                    map[x+i][y].lava = False
                    map[x-i][y].lava = False
                    message('Removed Lava')
                if count == 2:
                    map[x+i][y].water = False
                    map[x-i][y].water = False
                    message('Removed Water')

                if count == 3:
                    map[x+i][y].mountain = False
                    map[x-i][y].mountain = False
                    message('Removed Mountains')
            
            
            
            libtcod.console_flush()
            render_all()
            


        listofdoom = ['Forest', 'Lava', 'Water', 'Mountains']
        print 'Current element is: ' + str(listofdoom[count])
        print 'Current width is: ' + str(width)
            


        
        
        key_char = chr(key.c)

        if key_char == 'e':
            if count >= 0:
                count += 1
                if count == 1:
                    message('Current element is : Lava')
                if count == 2:
                    message('Current element is : Water')
                if count == 3:
                    message('Current element is : Mountains')
            
        if key_char == 'q':
            if count >= 1:
                count -= 1
                if count == 0:
                    message('Current element is : Forest')
                if count == 1:
                    message('Current element is : Lava')
                if count == 2:
                    message('Current element is : Water')

        if key_char == 'a':
            if width > 1:
                width -= 1
                message('Width is currently: ' + str(width))
        if key_char == 'd':
            width += 1
            message('Width is curently: ' + str(width))
                    
            

        if key_char == 's':
            factor = False
            break

def buff_print(number):
    global game_msgs2
    game_msgs2 = []

    thing = Message(0, 0, 'Buff name:', libtcod.yellow)
    message2(thing)

    first = Buff.buffs[number]
    color = Buff.buffs[number].color
    if Buff.buffs[number].other_color != libtcod.white:
        other_color = Buff.buffs[number].other_color
    else:
        other_color = libtcod.white
    

    thing = Message(0+len('Buff name:'), 0, first.name, color)
    message2(thing)

    thing = Message(0, 1, 'Source:', libtcod.yellow)
    message2(thing)

    thing = Message(0+len('Source:'), 1, first.source, other_color)
    message2(thing)

    thing = Message(0, 2, 'Gains:', libtcod.yellow)
    message2(thing)
    reduction1 = first.reduction1
    reduction2 = first.reduction2
    reduction3 = first.reduction3
    reduction4 = first.reduction4

    Stat1 = first.Stat1
    Stat2 = first.Stat2
    Stat3 = first.Stat3
    Stat4 = first.Stat4
    

    if reduction1 != 0 and Stat1 != None:
        thing = Message(0+len('Gains:'), 2, str(reduction1) + ' ' + Stat1)
        message2(thing)

        if reduction2 != 0 and Stat2 != None:
            thing = Message(0+len('Gains:'), 3, str(reduction2) + ' ' + Stat2)
            message2(thing)

            if reduction3 != 0 and Stat3 != None:
                thing = Message(0+len('Gains:'), 4, str(reduction3) + ' ' + Stat3)
                message2(thing)

                if reduction4 != 0 and Stat4 != None:
                    thing = Message(0+len('Gains:'), 5, str(reduction4) + ' ' + Stat4)
                    message2(thing)

    thing = Message(0, 7, 'Dispelable:', libtcod.yellow)
    message2(thing)

    if first.Dispelable == True:

        thing = Message(0+len('Dispelable:'), 7, 'Yes', libtcod.red)
        message2(thing)

        thing = Message(0+len('Dispelable:Yes'), 7, '(' + str(first.dispel_list) + ')', libtcod.white)
        message2(thing)
    else:
        thing = Message(0+len('Dispelable:'), 7, 'No', libtcod.green)
        message2(thing)
    

    if first.healing > 0:
        thing = Message(0, 9, 'Healing:', libtcod.yellow)
        message2(thing)

        thing = Message(0+len('Healing:'), 9, str(first.healing), libtcod.green)
        message2(thing)

        thing = Message(0+len(('Healing:' + str(first.healing) + ' ')), 9, 'hp every ', libtcod.yellow)
        message2(thing)

        thing = Message(0+len(('Healing:' + str(first.healing) + ' hp every ')), 9, str(first.tick), libtcod.green)
        message2(thing)

        thing = Message(0+len(('Healing:' + str(first.healing) + ' hp every ' + str(first.tick) + ' ')), 9, 'turns.', libtcod.yellow)
        message2(thing)

    if first.Effect != None:
        thing = Message(0, 11, 'Effect:', libtcod.yellow)
        message2(thing)

        thing = Message(0+len('Effect:'), 11, first.Effect, libtcod.white)
        message2(thing)

    
                    
            

def debuff_print(account, number):
    global game_msgs2

    game_msgs2 = []

    thing = Message(0, 0, 'Debuff Name: ', libtcod.yellow)
    message2(thing)
    
    thing = Message(0+len('Debuff Name: '), 0, account[number].kind, libtcod.white)
    message2(thing)

    thing = Message(0, 2, 'Dispelable:', libtcod.yellow)
    message2(thing)

    thing = Message(0, 9, 'Effect: ', libtcod.yellow)
    message2(thing)

    thing = Message(0 + len('Effect: '), 9, str(account[number].Effect), libtcod.white)
    message2(thing)

    thing = Message(0, 11, 'Lethal: ', libtcod.yellow)
    message2(thing)

    if account[number].Dispelable == False:
        

        

        thing2 = Message(0+len('Dispelable:'), 2, 'No', libtcod.red)
        message2(thing2)
    elif account[number].Dispelable == True:
        special = ''
        for i in account[number].dispel_list:
            special = special + i
        thing = Message(0+len('Dispelable:'), 2, 'Yes', libtcod.green)
        message2(thing)
        thing = Message(0+len('Dispelable:Yes '), 2, '(' + special + ')', libtcod.white)
        message2(thing)

    if account[number].Death == False:
        
        thing = Message(0 +len('Lethal: '), 11, 'No', libtcod.green)
    else:
        thing = Message(0+len('Lethal: '), 11, 'Yes', libtcod.red)

    message2(thing)
        
    if account[number].damage > 0:
        thing = Message(0, 1, 'Damage:', libtcod.yellow)
    
        message2(thing)
        thing2 = Message(0+len('Damage:'), 1, str(account[number].damage), libtcod.white)
        message2(thing2)
    else:
        thing = Message(0, 1, 'Damage:', libtcod.yellow)
        message2(thing)

        thing2 = Message(0+len('Damage:'), 1, '-', libtcod.white)
        message2(thing2)
        
    if account[number].tick > 0 and type(account[number].tick) == int:
        if account[number].tick == 1:
            thing2 = Message(11, 1, 'Ticks every turn.', libtcod.red)
            message2(thing2)
        else:
            thing = Message(11, 1, 'Ticks every: ', libtcod.yellow)
            message2(thing)
            thing2 = Message(11+len('Ticks every: '), 1, str(account[number].tick) + ' turns', libtcod.white)
            message2(thing2)
    else:
        thing = Message(11, 1, 'Ticks: ', libtcod.yellow)
        message2(thing)

        thing2 = Message(11+len('Ticks: '), 1, account[number].tick, libtcod.white)
        message2(thing2)
        

    if account[number].reduction1 > 0 or account[number].reduction1 < 0:
        thing2 = Message(0, 5, 'Gains/Reductions: ', libtcod.yellow)
        message2(thing2)
        if account[number].reduction1 < 0:
            thing2 = Message(0 + len('Gains/Reductions: '), 5, str(account[number].reduction1) + ' ' + account[number].Stat1, libtcod.red)
        elif account[number].reduction1 > 0:
            thing2 = Message(0 + len('Gains/Reductions: '), 5, '+' + str(account[number].reduction1) + ' ' + account[number].Stat1, libtcod.green)

        message2(thing2)

        if account[number].reduction2 > 0 or account[number].reduction2 < 0:
            if account[number].reduction2 < 0:
                thing2 = Message(0 + len('Gains/Reductions: '), 6, str(account[number].reduction2) + ' ' + account[number].Stat2, libtcod.red)
            elif account[number].reduction2 > 0:
                thing2 = Message(0 + len('Gains/Reductions: '), 6, '+' + str(account[number].reduction2) + ' ' + account[number].Stat2, libtcod.green)

            message2(thing2)

            if account[number].reduction3 > 0 or account[number].reduction3 < 0:
                if account[number].reduction3 < 0:
                    thing2 = Message(0 + len('Gains/Reductions: '), 7, str(account[number].reduction3) + ' ' + account[number].Stat3, libtcod.red)
                elif account[number].reduction3 > 0:
                    thing2 = Message(0 + len('Gains/Reductions: '), 7, '+' + str(account[number].reduction3) + ' ' + account[number].Stat3, libtcod.green)


                message2(thing2)

                if account[number].reduction4 > 0 or account[number].reduction4 < 0:
                    if account[number].reduction4 < 0:
                        thing2 = Message(0 + len('Gains/Reductions: '), 8, str(account[number].reduction4) + ' ' + account[number].Stat4, libtcod.red)
                    elif account[number].reduction4 > 0:
                        thing2 = Message(0 + len('Gains/Reductions: '), 8, '+' + str(account[number].reduction4) + ' ' + account[number].Stat4, libtcod.green)

                    message2(thing2)
    
def get_debuffs_under_mouse(x=None, y=None):
    global mouse, DEBUFF
    a_value = []


#thing1 = Debuff(turns=1, damage=2, tick=2, kind='Crippling Poison', name='Momentum', Dispelable=False, dispel_list='', reduction1= -5, reduction2=-5
#, Stat1='Defense', Stat2='Strength', color=libtcod.yellow)
#Buff.buffs.append(thing1)
    if(len(Buff.buffs) > 0):
        count = 106
        row1 = []
        row2 = []
        row3 = []
  
        for i in Buff.buffs:
            a_value.append(str(len(i.name + "(" + str(i.turns) + ") ")))
        for i in a_value:
            count += int(i)
            
            if(count > 149 and count <= 190): #row2 #row3 is 188 #41 difference
               
                row2.append(count - (2+49)) #The 49 represents of how much we have to subtract for each row, assuming from index 0, so row 1 = 1, 49*1 = 49
            if(count > 190):
               
                row3.append(count - (2+(49*2))) #See above, 49 * 2 
            if(count <= 149):
                
                row1.append(count - 2) #See above, 49 * 0
            
    
                
    #Player Buffs start at 106 Xish, 22 
    #the window ends at 147 Xish
    #Player Debuffs start at 108, 33 <- Move to 32
    if x == None and y == None:
        (x, y) = (mouse.cx, mouse.cy)
        if y == 22:
            #We are gonna search, row1
            count = 0
            for i in row1:
                if count != 0:
                    if x > row1[count - 1] and x <= i and mouse.lbutton_pressed:
#turns=0, damage=0, amounts=0, healing=0, reduction=0, tick=0, reduction1=0, reduction2=0, reduction3=0, reduction4=0, kind='', name='', source=''
                 #, debuffs={}, dispel_list=[],
                 #Dispelable=False, Effect=None, Death=None, Stat1=None, Stat2=None, Stat3=None,
                 #Stat4=None, color=libtcod.white, other_color=libtcod.white

                 #Figure out meny to print the Buff in
                        message("Name: " + Buff.buffs[count].name + " " + "temp")
                        
                        #debuff_print(account, 0) Gives us access to print menu for a Buff/Debuff
                if count == 0:
                    if x <= row1[count] and mouse.lbutton_pressed:

                        message("Found : " + Buff.buffs[count].name)
                count += 1


    

    Debuff.amounts = {}

    

    #NPC debuffs start at 108, 45 <- move to 42

    special = {}
    temp = 0 #This is the # of the Debuff
    count = 0 #This is the Y axis that we are going to Count on

    count2 = 0
    
    second_special = {}
    third_special = {}
        

    try:
        if len(Dungeon.debuffs[2]) > 0:
            for i in Dungeon.debuffs[2]:
                var = len(str(i.name + ' ' + '(' + str(i.turns) + ')'))
                second_special[108 + temp] = 108 + temp + var #This is the beginning Dictionary
##                third_special[108 + temp + var] = count #This is the Ending Dictionary
                third_special[count] = i.name
                temp += var
                count += 1

##            message(str(second_special))
##            message(str(third_special))
            #Fix so that iteration has appropiate sorted Dictionary to go on, look into later

            count = 0
            for i in second_special:
                if x >= i:
                    thing = second_special[i]
                    if x <= thing:
                        passing = count
                        message(str(count))

                count += 1
                        
                        
            
                    


                
    except Exception as e:
        pass

    


    
        

    

    if x >= 108 and y == 47 and len(Dungeon.debuffs[2]) > 0:
        #2 is 9
        
        count = 0
        count2 = 0

        thing = Dungeon.debuffs[2]

        if thing[0].turns >= 10:
            turns1 = 2
        else:
            turns1 = 1

        try:
            if thing[1].turns >= 10:
                turns2 = 3
            else:
                turns2 = 2
        except:
            pass

        try:
            if thing[2].turns >= 10:
                turns3 = 3
            else:
                turns3 = 2
        except:
            pass

        
        
        

        if x >= 108 and x <= 108 + len(thing[0].name) + 1 + turns1 and y == 47 and mouse.lbutton_pressed: #Mouse interaction to display more info about a Debuff
            #Pass on Information about name to relevant Menu to create display for information about Debuff
            if 'Debuff Check' in player.fighter.event:
                player.fighter.event.remove('Debuff Check')
            elif 'Debuff Check' not in player.fighter.event:
                player.fighter.event.append('Debuff Check')
            account = Dungeon.debuffs[2]
            

            if 'Debuff Check' in player.fighter.event:
                debuff_print(account, 0)

            return

        
        if x >= 108 + len(thing[0].name) + 3 + turns1 and x <= ((108 + len(thing[0].name) + 2 + turns1) + len(thing[1].name) + turns2)  and y == 47 and mouse.lbutton_pressed:

            if 'Debuff Check' in player.fighter.event:
                player.fighter.event.remove('Debuff Check')
            elif 'Debuff Check' not in player.fighter.event:
                player.fighter.event.append('Debuff Check')
            account = Dungeon.debuffs[2]
            

            if 'Debuff Check' in player.fighter.event:
                debuff_print(account, 1)

        if x >= (112 + len(thing[0].name) + turns1) + len(thing[1].name) + turns2 + 1:
            
            if y == 47 and mouse.lbutton_pressed and x <= ((112 + len(thing[0].name) + turns1) + len(thing[1].name) + turns2 + 1) + len(thing[2].name) + 2 + turns3:
        

                if 'Debuff Check' in player.fighter.event:
                    player.fighter.event.remove('Debuff Check')
                elif 'Debuff Check' not in player.fighter.event:
                    player.fighter.event.append('Debuff Check')
                account = Dungeon.debuffs[2]
                

                if 'Debuff Check' in player.fighter.event:
                    debuff_print(account, 2)


    try:
        subject = None

        list_of_doom = []
        for e in objects:
            if e.x == x and e.y == y and e.ai != None:
                
                subject = e
                subject2 = e.fighter
                break

        
        if subject != None:
            list_of_doom.append(subject.name) #Name
            try:
                list_of_doom.append(subject.tale_told) #Tale Told
                
                list_of_doom.append(subject2.debuffs) #Debuffs
            except:
                list_of_doom.append(subject.tale_told)
                list_of_doom.append('NO DEBUFFS')
            try:
                list_of_doom.append(subject2.burn)#Burn
            except:
                list_of_doom.append('NO BURN')#burn

            list_of_doom.append(subject2.hp)#current hp
            try:
                list_of_doom.append(subject2.max_hp)
            except:
                list_of_doom.append('NO MAX HP')

            try:
                list_of_doom.append(subject.monster_type)
            except:
                list_of_doom.append('NO MONSTER TYPE')
                            

            

        if len(list_of_doom) == 0:
            return None

        else:
            return list_of_doom
    except:
        return None


def debuff_name(name='', mob_name='', turns=0, damage=0, reduction=0, tick=0, kind='', Effect=None, Death=None, stat=None): #Make a Model that explains what kind of dot it is, what it reduces
    #how often it ticks, what kind of effect it is, if it is deadly or not
    if name == 'Bleeding' and 'Debuff Check' not in player.fighter.event:
        with open('derp.rtf') as f:
            lines = list(islice(f, 1005, 1009))

        temp = []
        x = libtcod.random_get_int(0, 1, 9)

        if x == 1:
             temp.append('"A silent, peaceful Death. A Coward'+ "'s way to go." + '"')
             temp.append('    ~ Warmaster Khaarn')
        if x == 2:
            temp.append('"The brush that paints the canvas of my fine arts."')
            temp.append('    ~ Murkil, Master of Poisons')
        if x == 3:
            temp.append('"IT BURNS LIKE HEAVENLY FIRE IN MY VEINS!"')
            temp.append('"Only for a few seconds, though..."')
            temp.append('    ~ Unfortunate Victim to Merlyn, Head of the Death Lotus')

        if x == 4:
            temp.append('"A Feast, A Celebration, The Death of a King."')
            temp.append('    ~ Assasination of Ykrbil, King of the Grim Skulls')

        if x == 5:
            temp.append('"Poison the Wells.", he said bitterly, with a frown')
            temp.append('"But sir, what of the Civilians?!"')
            temp.append('"A nessecary cost."')
            temp.append('    ~Cpt. Dalmer, besieging a small Orc Settlement')

        if x == 6:
            temp.append("Some say, that Eating a Black King Cobra")
            temp.append("makes you more resistant to poisons...")
            temp.append("    ~Folk Lore, Heart of the Order")

        if x == 7:
            temp.append('"Hmph, the Wine tastes oddly bitter.."')
            temp.append("    ~Assasination attempt of The Grandfather")

        if x == 8:
            temp.append("Some say, that there is a pool of Poison")
            temp.append("that has every poison known to Man..")
            temp.append("But, it's knowledge comes at a price..")
            temp.append("    ~Folk Mythos, Heart of the Order")

        if x == 9:
            temp.append("Some say, there are elementals that are")
            temp.append("entirely made out of poison.. No-one has")
            temp.append("lived to tell the tale, though..")
            temp.append("    ~Folk Mythos, Heart of the Order")


        temp.append(' ')
            
        for i in lines:
            temp.append(i)
        inspect_menu('Debuff: Bleeding', temp, 80)

        return

        

    if name == 'Poisoned' and 'Debuff Check' not in player.fighter.event:
        with open('derp.rtf') as f:
            lines = list(islice(f, 1005, 1009))

        

        temp = []
        x = libtcod.random_get_int(0, 1, 9)

        if x == 1:
             temp.append('"A silent, peaceful Death. A Coward'+ "'s way to go." + '"')
             temp.append('    ~ Warmaster Khaarn')
        if x == 2:
            temp.append('"The brush that paints the canvas of my fine arts."')
            temp.append('    ~ Murkil, Master of Poisons')
        if x == 3:
            temp.append('"IT BURNS LIKE HEAVENLY FIRE IN MY VEINS!"')
            temp.append('"Only for a few seconds, though..."')
            temp.append('    ~ Unfortunate Victim to Merlyn, Head of the Death Lotus')

        if x == 4:
            temp.append('"A Feast, A Celebration, The Death of a King."')
            temp.append('    ~ Assasination of Ykrbil, King of the Grim Skulls')

        if x == 5:
            temp.append('"Poison the Wells.", he said bitterly, with a frown')
            temp.append('"But sir, what of the Civilians?!"')
            temp.append('"A nessecary cost."')
            temp.append('    ~Cpt. Dalmer, besieging a small Orc Settlement')

        if x == 6:
            temp.append("Some say, that Eating a Black King Cobra")
            temp.append("makes you more resistant to poisons...")
            temp.append("    ~Folk Lore, Heart of the Order")

        if x == 7:
            temp.append('"Hmph, the Wine tastes oddly bitter.."')
            temp.append("    ~Assasination attempt of The Grandfather")

        if x == 8:
            temp.append("Some say, that there is a pool of Poison")
            temp.append("that has every poison known to Man..")
            temp.append("But, it's knowledge comes at a price..")
            temp.append("    ~Folk Mythos, Heart of the Order")

        if x == 9:
            temp.append("Some say, there are elementals that are")
            temp.append("entirely made out of poison.. No-one has")
            temp.append("lived to tell the tale, though..")
            temp.append("    ~Folk Mythos, Heart of the Order")


        temp.append(' ')
            
        for i in lines:
            temp.append(i)

        with open('derp.rtf') as f:
            lines = list(islice(f, 1009, 1010))

        for i in lines:
            i = mob_name + ' ' + i
            i = i + kind
            temp.append(i)

        temp.append(' ')
        temp.append('Ticks: ' + str(tick))
        temp.append(' ')
        temp.append('Damage :' + str(damage))
        temp.append(' ')
        if reduction > 0 and stat != None:
            temp.append('Reduction of ' + stat + ' : ' + str(reduction))

        

        

##        temp.append(
        inspect_menu('Debuff: Poisoned', temp, 80)
        
        return

    if name == 'Rooted' and 'Debuff Check' not in player.fighter.event:
        with open('derp.rtf') as f:
            lines = list(islice(f, 265, 282))
        inspect_menu('Debuff: Rooted', lines, 60)
        
        return

    if name == 'Feared' and 'Debuff Check' not in player.fighter.event:
        with open('derp.rtf') as f:
            lines = list(islice(f, 265, 282))
        inspect_menu('Debuff: Feared', lines, 60)
        
        return
        


def get_names_under_mouse():
    global mouse
    #return a string with the names of all objects under the mouse
    (x, y) = (mouse.cx, mouse.cy)
    #create a list with the names of all objects at the mouse's coordinates and in FOV
    names = [obj.name for obj in objects
             if obj.x == x and obj.y == y and libtcod.map_is_in_fov(fov_map, obj.x, obj.y)]
    names = ', '.join(names)  #join the names, separated by commas

    if 'Door' in names:
        names = 'Door'
    if 'Steel Gate' in names:
        names = 'Steel Gate'
    if 'Odd' in names:
        names = None
    return names.capitalize()

def get_rarity_under_player():
    (x, y) = (player.x, player.y)

    try:
        rarity = [obj.item.rarity for obj in objects
                  if obj.x == x and obj.y == y and obj.name != 'player' and obj.name != 'stairs' and obj.name != 'derp']
    except:
        pass

    
    if len(rarity) == 1:
        if rarity[0] == 'Uncommon':
            return 'Uncommon'
        if rarity[0] == 'Rare':
            return 'Rare'
        if rarity[0] == 'Artifact':
            return 'Artifact'
        if rarity[0] == 'Shatm':
            return 'Shatm'
        
def get_names_under_player():
    #return a string with names of all objects under the player
    global amount

    (x, y) = (player.x, player.y)

    #create a list with the names of all objects at the players coordinates
    names = [obj.name for obj in objects
             if obj.x == x and obj.y == y and obj.name != 'player' and obj.name != 'stairs' and obj.name != 'derp']

    try:
        quantity = [obj.item.amount for obj in objects
                    if obj.x == x and obj.y == y and obj.name != 'player' and obj.name != 'stairs' and obj.name != 'derp']
        for i in objects:
            try:
                if i.decoration == True:
                    return obj.name
            except:
                pass
    except:
        pass

    weights = [obj.weight for obj in objects
               if obj.x == x and obj.y == y and obj.name != 'player' and obj.name != 'stairs' and obj.name != 'derp' and obj.weight != '']
    
    



    amount = 0

    for i in names:
        try:
            if i == "Lava":
                
                return i + "                                                                                                            "
        except:
            pass
        amount += 1
    if amount == 0:
        names == ' '
        return '                                                                                                                                                       '
    if amount == 1 and weights[0] != None:
        if names[0] != 'Gold':
            return names[0] + ' ' + '(' + str(weights[0]) + ' lb.' + ')' + '                                                                                                                                             '
        else:
            return names[0]
    elif amount == 1 and weights[0] == None:
        try:
            return (str(quantity[0]) + ' ' + names[0])
        except:
            return names[0]
    if amount >= 2:
        return 'Several things are lying here.' + '                                                                                                                      '


def thug_encounter():

    monster_chances = {}
    monster_chances['Orc'] = 25  #orc always shows up, even if all other monsters have 0 chance
    monster_chances['Thug'] = 25
    monster_chances['Wolf'] = 25
    monster_chances['Wolf Alpha'] = 10
    if HOUR >= 2 and MINUTE >= 30 and HOUR <= 3 and MINUTE <= 30:
        monster_chances['Shadow Troll'] = 10
    monster_chances['Troll'] = from_dungeon_level([[15, 3], [30, 5], [60, 7]])
    monster_chances['Flaming Imp'] = from_dungeon_level([[10,3]])

    for i in range(10):
        if not is_blocked(20, 30+i):
            x = 20
            y = 30+i


            choice = random_choice(monster_chances)
            if choice == 'Orc':
                #create an orc
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'o', 'Orc', libtcod.desaturated_green,
                                 blocks=True, fighter=fighter_component, ai=ai_component)
            elif choice == 'Flaming Imp':
                #create a Flaming Imp
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'i', 'Flaming Imp', libtcod.red,
                                 blocks=True, fighter=fighter_component, ai=ai_component)

            elif choice == 'Thug':
                #create a thug
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 't', 'Thug', libtcod.Color(127,101,63),
                                 blocks=True, fighter=fighter_component, ai=BasicMonster())
            elif choice == 'Shadow Troll':
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'T', 'Shadow Troll', libtcod.darker_purple,
                                 blocks=True, fighter=fighter_component, ai=ai_component)

            elif choice == 'Troll':
                #create a troll
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'T', 'Troll', libtcod.darker_green,
                                 blocks=True, fighter=fighter_component, ai=ai_component)
            elif choice == 'Cave Wolf':
                #create a cave wolf
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'w', 'Wolf', libtcod.grey,
                                 blocks=True, fighter=fighter_component, ai=ai_component)
            elif choice == 'Wolf Alpha':
                #create a cave wolf alpha
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'W', 'Wolf Alpha', libtcod.grey,
                                 blocks=True, fighter=fighter_component, ai=ai_component)

            objects.append(monster)

def exit_west_gate():
    global MAP_HEIGHT, MAP_WIDTH, fov_recompute, map

    fov_recompute = True
    initialize_fov()

    

##    MAP_WIDTH = 96
##    MAP_HEIGHT = 49

    player.x = MAP_WIDTH/2-3
    player.y = MAP_HEIGHT/2


    player.fighter.wilderness_factor = True


    
            

    

    


    Dungeon.Terrain_type = 'Wilderness'
    count = 0
    
    
    
##    libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)

def west_gate():
    global MAP_HEIGHT, MAP_WIDTH, fov_recompute, HOUR
    fov_recompute = True
    initialize_fov()

    

    thing1 = Debuff(turns=1, damage=2, tick=2, kind='Crippling Poison', name='Momentum', Dispelable=False, dispel_list='', reduction1= -5, reduction2=-5
                        , Stat1='Defense', Stat2='Strength', color=libtcod.yellow)
    Buff.buffs.append(thing1)
    thing1 = Debuff(turns=1, damage=2, tick=2, kind='Crippling Poison', name='Song of Fire', Dispelable=False, dispel_list='', reduction1= -5, reduction2=-5
                        , Stat1='Defense', Stat2='Strength', color=libtcod.light_red)
    Buff.buffs.append(thing1)

    thing1 = Debuff(turns=1, damage=2, tick=2, kind='Crippling Poison', name='Song of Ice', Dispelable=False, dispel_list='', reduction1= -5, reduction2=-5
                        , Stat1='Defense', Stat2='Strength', color=libtcod.light_blue)
    Buff.buffs.append(thing1)

    thing1 = Debuff(turns=1, damage=2, tick=2, kind='Crippling Poison', name="God's Strength", Dispelable=False, dispel_list='', reduction1= -5, reduction2=-5
                        , Stat1='Defense', Stat2='Strength', color=libtcod.dark_red)
    Buff.buffs.append(thing1)

    try:
        thing1 = Debuff(turns=1, damage=2, tick=2, kind='Crippling Poison', name='Poisoned', Dispelable=False, dispel_list='', reduction1= -5, reduction2=-5
                        , Stat1='Defense', Stat2='Strength', color=libtcod.red)

    except Exception as e:
        message('debuff error 1')

        
    thing2 = Debuff(turns=20, damage=2, tick=20, kind='Rupture', name='Bleeding', Dispelable=False, Effect='Increases damage, based on distance moved.', Death=True,
                    dispel_list=[''], reduction1= -5, reduction2=5
                        , Stat1='Defense', Stat2='Strength')
    thing3 = Debuff(turns=2, damage=0, tick='-', kind='Howl', name='Fear', Dispelable=True, Effect='Causes the target to run away',
                    Death=False, dispel_list=['Clerics, Shamans, Totems, Generals'], reduction1= -5
                        , Stat1='Defense')

    

    try:
        fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=50, max_energy=100, xp=50, level=1, debuffs=[thing1, thing2, thing3],
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
        ai_component = BasicMonster()

        
        monster = Object(51, 7, 'g', 'Order Guard', libtcod.white, hear=1000, vision=6, energy = 100, max_energy = 100,
                         blocks=True, fighter=fighter_component, monster_type='NPC', faction='Order', ai=ai_component)

        objects.append(monster)



        map[51][6].blocked = True

        map[55][6].blocked = True

        map[58][6].blocked = True
        map[58][7].blocked = True

##        fighter_component = Monster(hp=50, defense=4, Strength=2, agility=7, current_energy=0, energy=0, max_energy=1000, xp=5, level=1,
##                                    min_dam=1, max_dam=5, minimum_hit=50,race='Object', death_function=monster_death)
##        
##
##        
##        monster = Object(MAP_WIDTH/2-5, MAP_HEIGHT/2-5, 'X', 'Torch', libtcod.brass, hear=0, vision=0, energy = 0, max_energy = 0,
##                         blocks=True, fighter=fighter_component, monster_type=None, faction='Order', ai=None)

##        objects.append(monster)
    except Exception as e:
        message('west gate error')
        
        

    

    if len(Dungeon.stuff) > 0:
        for i in Dungeon.stuff:
            objects.append(i)
                
            i.send_to_back()
            i.always_visible = False
            Dungeon.stuff.remove(i)
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            map[x][y].mountain = False
            map[x][y].water = False
            map[x][y].forest = False
            map[x][y].order = False
            map[x][y].explored = False
            player.fighter.wilderness_factor = False
            
####    MAP_WIDTH = 96
####    MAP_HEIGHT = 49
##    for y in range(MAP_HEIGHT/2-5):
##        for x in range(45, 50):
##
##            map[x][y].order = True
##            
##            
##
##    if 'Order Gate Opened' in player.fighter.event:
##        for y in range(MAP_HEIGHT/2-5, MAP_HEIGHT/2+5):
##            for x in range(45, 50):
##                
##                
##                map[x][y].gate = True
##    
##    else:
##        if HOUR <= 6 and HOUR >= 23:
##            for y in range(MAP_HEIGHT/2-5, MAP_HEIGHT/2-2):
##                for x in range(45, 56):
##                    
##                    
##                    map[x][y].gate = True
##        else:
##            for y in range(MAP_HEIGHT/2-5, MAP_HEIGHT/2+5):
##                for x in range(45, 50):
##                    
##                    
##                    map[x][y].gate = True
##            
##
##    for x in range(50, MAP_WIDTH):
##        map[x][MAP_HEIGHT/2-5].corner_stone = True
##        map[x][MAP_HEIGHT/2+5].corner_stone = True
##
##    for y in range(MAP_HEIGHT/2-4, MAP_HEIGHT/2+5):
##        for x in range(50, MAP_WIDTH):
##            map[x][y].order_road = True
##
##    for y in range(MAP_HEIGHT/2-4, MAP_HEIGHT/2+5):
##        for x in range(50, MAP_WIDTH):
##            if x % 5 == 0 and y == MAP_HEIGHT/2-3 :
##                for i in range(6):
##                    try:
##                        if x > 50:
##                            map[x-i][y+i].order_road = False
##                            map[x-i][y+i].white_decoration = True
##                        else:
##                            map[x][y].order_road = False
##                            map[x][y].white_decoration = True
##                        map[x+i][y+i].order_road = False
##                        map[x+i][y+i].white_decoration = True
##                    except:
##                        pass
##                    
##
##                
##            
##            
##
##    for y in range(MAP_HEIGHT/2+5, MAP_HEIGHT):
##        for x in range(45, 50):
##
##            map[x][y].order = True
            
            
    
    
    player.x = 10
    player.y = 49/2

    Dungeon.Terrain_type = 'West Gate'
    
    libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)


    

def Graveyard_encounter():

    player.x = 10
    player.y = 10

    monster_chances = {}
    monster_chances['Ghoul'] = 25  #orc always shows up, even if all other monsters have 0 chance
    monster_chances['Shambling Horror'] = 25
    monster_chances['Skeleton Archer'] = 25
    monster_chances['Skeletal Troll'] = 10
    if HOUR >= 2 and MINUTE >= 30 and HOUR <= 3 and MINUTE <= 30:
        monster_chances['shadow troll'] = 10
    monster_chances['Restless Spirit'] = 10
    monster_chances['Abomination'] = 10

    for i in range(libtcod.random_get_int(0, 50, 100)):
        x = libtcod.random_get_int(0, 1, 70)
        y = libtcod.random_get_int(0, 1, 25)

        #only place it if the tile is not blocked
        if not is_blocked(x, y):
            choice = random_choice(monster_chances)



            choice = random_choice(monster_chances)
            if choice == 'Ghoul':
                #create a ghoul
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'g', 'Ghoul', libtcod.gray,
                                 blocks=True, fighter=fighter_component, ai=ai_component)

            elif choice == 'Shambling Horror':
                #create a shambling horror
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'h', 'Shambling Horror', libtcod.light_red,
                                 blocks=True, fighter=fighter_component, ai=ai_component)

            elif choice == 'Skeleton Archer':
                #create a skeleton archer
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'z', 'Skeleton Archer', libtcod.white,
                                 blocks=True, fighter=fighter_component, ai=BasicMonster())

            elif choice == 'Skeletal Troll':
                #skeletal troll
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'T', 'Skeletal Troll', libtcod.white,
                                 blocks=True, fighter=fighter_component, ai=ai_component)

            elif choice == 'Restless Spirit':
                #create a restless spirit
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'G', 'Restless Spirit', libtcod.light_red,
                                 blocks=True, fighter=fighter_component, ai=ai_component)
            elif choice == 'Abomination':
                #create a abomination
                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=50,race='Beast', death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'A', 'Abomination', libtcod.purple,
                                 blocks=True, fighter=fighter_component, ai=ai_component)


            objects.append(monster)

def modify_forest(thing, thing2, mod1=0, mod2=0, factor1=0, factor2=0):
    map[thing+factor1+mod1][thing2+factor2+mod2].forest = True
    

    

def render_all():
    global SUPERSPECIAL
    global fov_map, color_dark_wall, color_light_wall, TORCH_RADIUS, burn, burning, TURN, wilderness_factor
    global color_dark_ground, color_light_ground, stairs1, stairs, stairs_up, stairs_down, stairs_up1, player
    global fov_recompute, HOUR, player, General_Tab, Combat_Tab, Story_Tab, mouse, combat_msgs, combat_log, combat_keywords, COMBAT_MISSED
    global TrueSecond
    

    
    

    if Dungeon.Terrain_type == 'Wilderness':

        
        x_count = 0
        for i in Dungeon.Terrain_list:

            y = Dungeon.Terrain_list2[x_count]
            map[i][y].explored = True
            x_count += 1

    


    if fov_recompute:
        #recompute FOV if needed (the player moved or something)
        fov_recompute = False
        libtcod.map_compute_fov(fov_map, player.x, player.y, TORCH_RADIUS, FOV_LIGHT_WALLS, FOV_ALGO)
        
        

                
        
        if player.fighter.wilderness_factor == False:
            for y in range(MAP_HEIGHT):
                for x in range(MAP_WIDTH):
                    visible = libtcod.map_is_in_fov(fov_map, x, y)
                    wall = map[x][y].block_sight
                    lava = map[x][y].lava
                    if not visible:
           
                        if wall:
                            if map[x][y].explored:
                                if Dungeon.Terrain_type == 'Random':
                                    libtcod.console_put_char_ex(con, x, y, '#', libtcod.Color(24,64,255), libtcod.black)
                                elif Dungeon.Terrain_type == 'Pits of Despair':
                                    libtcod.console_put_char_ex(con, x, y, '#', libtcod.yellow, libtcod.black)

                                elif Dungeon.Terrain_type == 'The Descent':
                                    libtcod.console_put_char_ex(con, x, y, '#', libtcod.cyan, libtcod.black)
                                elif Dungeon.Terrain_type == 'West Gate' or Dungeon.Terrain_type == 'East Gate':
                                    if map[x][y].gate == True:
                                        libtcod.console_put_char_ex(con, x, y, '#', libtcod.Color(127,101,63), libtcod.black)
                                    elif map[x][y].order == True:
                                        libtcod.console_put_char_ex(con, x, y, '#', libtcod.grey, libtcod.black)
                                    else:
                                        libtcod.console_put_char_ex(con, x, y, '#', libtcod.grey, libtcod.black)

                        
                                

                        else:
                            
                            if map[x][y].explored:
                                if Dungeon.Terrain_type == 'West Gate' or Dungeon.Terrain_type == 'East Gate':
                                    
                                    if map[x][y].forest == True:
                                        libtcod.console_put_char_ex(con, x, y, 'T', libtcod.light_green, libtcod.black)
                                    if map[x][y].gate == True:
                                        libtcod.console_put_char_ex(con, x, y, '#', libtcod.Color(127,101,63), libtcod.black)
                                    if map[x][y].order == True:
                                        libtcod.console_put_char_ex(con, x, y, '#', libtcod.grey, libtcod.black)
                                    if map[x][y].corner_stone == True:
                                        libtcod.console_put_char_ex(con, x, y, '=', libtcod.grey, libtcod.black)

                                    elif map[x][y].order_road == True:
                                        libtcod.console_put_char_ex(con, x, y, '-', libtcod.grey, libtcod.black)

##                                    elif map[x][y].white_decoration == True:
##                                        libtcod.console_put_char_ex(con, x, y, '=', libtcod.white, libtcod.black)


                                        
                                    elif map[x][y].mountain == True:
                                        libtcod.console_put_char_ex(con, x, y, '^', libtcod.Color(127,101,63), libtcod.black)
                                    if map[x][y].lava == True:
                                        libtcod.console_put_char_ex(con, x, y, '=', libtcod.red, libtcod.black)
                                    if map[x][y].order == False and map[x][y].gate == False and map[x][y].lava == False and map[x][y].corner_stone == False and map[x][y].order_road == False:
                                        if map[x][y].white_decoration == False:
                                            global HOUR, MINUTE
                                            if HOUR >= 0 and HOUR <= 6:
                                                
                                                libtcod.console_put_char_ex(con, x, y, '.', libtcod.Color(7,35,4), libtcod.black)
                                            elif HOUR >= 7 and HOUR <= 18:
                                                libtcod.console_put_char_ex(con, x, y, '.', libtcod.Color(11,55,6), libtcod.black)
                                            elif HOUR >= 19 and HOUR <= 24:
                                                libtcod.console_put_char_ex(con, x, y, '.', libtcod.Color(14,80,7), libtcod.black)

                                
                                
                                else:
                                    
                                    libtcod.console_put_char_ex(con, x, y, '.', libtcod.black, libtcod.black) #What is not a wall and Not in Wilderness

                            
                            
                            
                                        
                                    
                                
                            else:
                                libtcod.console_put_char_ex(con, x, y, '#', libtcod.black, libtcod.black) #What is not seen, that is not in wilderness


                    else:
                        
                        
                        #it's  visible
                        if wall:
                            if Dungeon.Terrain_type == 'Random':

                                libtcod.console_put_char_ex(con, x, y, '#', libtcod.Color(24,64,255), libtcod.black)

                            elif Dungeon.Terrain_type == 'Pits of Despair':
                                libtcod.console_put_char_ex(con, x, y, '#', libtcod.yellow, libtcod.black)

                            elif Dungeon.Terrain_type == 'The Descent':
                                libtcod.console_put_char_ex(con, x, y, '#', libtcod.cyan, libtcod.black)
                            elif Dungeon.Terrain_type == 'West Gate' or Dungeon.Terrain_type == 'East Gate':
                                if map[x][y].order == True:
                                    libtcod.console_put_char_ex(con, x, y, '#', libtcod.grey, libtcod.black)
                                if map[x][y].gate == True:
                                    libtcod.console_put_char_ex(con, x, y, '#', libtcod.Color(127,101,63), libtcod.black)
                                else:
                                    libtcod.console_put_char_ex(con, x, y, '#', libtcod.grey, libtcod.black)
                                

                        if not wall:
                            
                            if libtcod.map_is_in_fov(fov_map, 18, 15) and Dungeon.Terrain_type == 'Pits of Despair':
                                libtcod.console_put_char_ex(con, 18, 15, '#', libtcod.yellow, libtcod.black)

                            if libtcod.map_is_in_fov(fov_map, 16, 16) and Dungeon.Terrain_type == 'Pits of Despair':
                                libtcod.console_put_char_ex(con, 16, 16, '#', libtcod.yellow, libtcod.black)





                            if Dungeon.Terrain_type != 'The Descent':
                                if Dungeon.Terrain_type == 'West Gate':
                                    if map[x][y].order == True:
                                        libtcod.console_put_char_ex(con, x, y, '#', libtcod.grey, libtcod.black)
                                    elif map[x][y].gate == True:
                                        libtcod.console_put_char_ex(con, x, y, '#', libtcod.Color(127,101,63), libtcod.black)

                                    elif map[x][y].corner_stone == True:    
                                        libtcod.console_put_char_ex(con, x, y, '=', libtcod.grey, libtcod.black)
                                    elif map[x][y].order_road == True:
                                        libtcod.console_put_char_ex(con, x, y, '-', libtcod.grey, libtcod.black)

                                    elif map[x][y].white_decoration == True:
                                        libtcod.console_put_char_ex(con, x, y, '=', libtcod.Color((255-(map[x][y].colour1)),(255-(map[x][y].colour2)),(255-(map[x][y].colour3))), libtcod.black)

                                        
                                    else:
                                        if HOUR >= 0 and HOUR <= 6:
                                            libtcod.console_put_char_ex(con, x, y, '.', libtcod.light_green, libtcod.black)
                                        elif HOUR >= 7 and HOUR <= 18:
                                            libtcod.console_put_char_ex(con, x, y, '.', libtcod.green, libtcod.black)
                                        elif HOUR >= 19 and HOUR <= 24:
                                            libtcod.console_put_char_ex(con, x, y, '.', libtcod.dark_green, libtcod.black)
                                else:

                                    try:
                                        thing = special_move(x,y)
                                        if thing == 1:
                                            special=0.75
                                        else:
                                            special =1
                                        libtcod.console_put_char_ex(con, x, y, '.', libtcod.Color(int((255/thing)*special),int((255/thing)*special), int((255/thing)*special)), libtcod.black)
                                    except:
                                        libtcod.console_put_char_ex(con, x, y, '.', libtcod.Color(255,255,255), libtcod.black)
                                        
                                    
                                    
                            else:
                                libtcod.console_put_char_ex(con, x, y, '.', libtcod.cyan, libtcod.black)


    

                        map[x][y].explored = True
                        
                       

                        

        for object in objects:

            if object.name == 'Torch':
                libtcod.map_compute_fov(fov_map, object.x, object.y, 6, FOV_LIGHT_WALLS, FOV_ALGO)
                if Dungeon.Terrain_type == 'West Gate':
                    for y in range(MAP_HEIGHT):
                        for x in range(MAP_WIDTH):
                            visible = libtcod.map_is_in_fov(fov_map, x, y)
                            if visible and map[x][y].gate == False and map[x][y].order == False and map[x][y].explored:
                                try:
                                    thing = torch_distance(object, x, y)
                                    libtcod.console_put_char_ex(con, x, y, '.', libtcod.Color(int(255/thing),int(255/thing),0), libtcod.black)
                                    
                                except:
                                    pass

                            
                                
                                

                libtcod.map_compute_fov(fov_map, player.x, player.y, TORCH_RADIUS, FOV_LIGHT_WALLS, FOV_ALGO)
                                
                    
                
            if object.name == 'Right Door':
                for i in range(10):
                    for e in range(7):
                        libtcod.console_put_char_ex(con, object.x+1+i, object.y+-5+e, '.', libtcod.black, libtcod.black)
            if object.name == 'Right start Door1':
                for e in range(4):
                    for i in range(8):
                        libtcod.console_put_char_ex(con, object.x+1+e, object.y-1+i, '.', libtcod.black, libtcod.black)
            if object.name == 'Right Steel Gate':
                for i in range(10):
                    for e in range(9):
                        libtcod.console_put_char_ex(con, object.x+1+i, object.y+-5+e, '.', libtcod.black, libtcod.black)
            if object.name == 'South Door':
                for i in range(3):
                    for e in range(4):
                        libtcod.console_put_char_ex(con, object.x-1+i, object.y+1+e, '.', libtcod.black, libtcod.black)
            if object.name == 'Left Door':
                for i in range(10):
                    for e in range(10):
                        libtcod.console_put_char_ex(con, object.x+1-i, object.y+-5+e, '.', libtcod.black, libtcod.black)

        

    



        if player.fighter.wilderness_factor == True:
            Dungeon.Terrain_type = 'Wilderness'
           
            
            try:
                Dungeon.count = 1 #Dungeon.Forest_Density is 60 len worth 39 tiles of worth in Forest
                #60 * (39*2) = 60 * 78 = 780 * 6 = 4680
                
                
                for i in range(5000):
                    thing = Dungeon.forest_density[Dungeon.count-1]
                    thing2 = Dungeon.forest_density[Dungeon.count]
                    factor1 = Dungeon.Spread[Dungeon.count-1]
                    factor2 = Dungeon.Spread[Dungeon.count]

                    modify_forest(thing, thing2,-1, -3, factor1, factor2)
                    Dungeon.count += 2
                    
                    
                    
                    

            except:
                
                pass
                    

            try:
                count2 = 1
                second_thing = 0
                for i in range(len(Dungeon.mountain_density)-1):
                    thing = Dungeon.mountain_density[count2-1]
                    thing2 = Dungeon.mountain_density[count2]

                    

                    
                    try:
                        check = Dungeon.mountain_size[second_thing]
                        if 'Small part' in check:
                            if check[-1] == '1': #Lump
                                
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                
                            if check[-1] == '2': #Cross
                                
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                            if check[-1] == '3': #T
                                
                                map[thing][thing2].mountain = True
                                map[thing][thing2-1].mountain = True
                                map[thing][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                            if check[-1] == '4': #Tetris s block
                                
                                
                                map[thing][thing2].mountain = True
                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing-1][thing2].mountain = True
                                
                            if check[-1] == '5': #Half Block
                                
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing][thing2+1].mountain = True
                            if check[-1] == '6': #Empty Square
                                
                                map[thing-1][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                
                            if check[-1] == '7':
                                map[thing][thing2].mountain = True
                                map[thing][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                            if check[-1] == '8':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing][thing2-1].mountain = True
                                map[thing][thing2+1].mountain = True
                            
                        if 'Medium part' in check:
                            if check[-1] == '1':
                                map[thing-1][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                
                                map[thing-2][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing-2][thing2-2].mountain = True
                                map[thing][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-2][thing2+2].mountain = True
                                map[thing][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                            if check[-1] == '2':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing+1][thing2-1].mountain = True

                                map[thing-2][thing2-2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                            if check[-1] == '3':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-1][thing2-1].mountain = True

                                map[thing+3][thing2+2].mountain = True
                                map[thing+3][thing2-2].mountain = True
                                map[thing-3][thing2+2].mountain = True
                                map[thing-3][thing2-2].mountain = True

                                map[thing+2][thing2+3].mountain = True
                                map[thing+2][thing2-3].mountain = True
                                map[thing-2][thing2+3].mountain = True
                                map[thing-2][thing2-3].mountain = True
                            if check[-1] == '4':
                                
                                map[thing-4][thing2-1].mountain = True
                                map[thing-3][thing2-2].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing][thing2-1].mountain = True

                                map[thing-4][thing2+1].mountain = True
                                map[thing-3][thing2+2].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing][thing2+1].mountain = True

                                map[thing-4][thing2+4].mountain = True
                                map[thing-3][thing2+5].mountain = True
                                map[thing-2][thing2+4].mountain = True
                                map[thing-1][thing2+5].mountain = True
                                map[thing][thing2+4].mountain = True
                                
                                
                            if check[-1] == '5':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+2].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-2].mountain = True

                                map[thing][thing2-4].mountain = True
                                map[thing-2][thing2-2].mountain = True
                                map[thing-1][thing2-3].mountain = True
                                map[thing+1][thing2-5].mountain = True
                                map[thing+2][thing2-6].mountain = True
                            if check[-1] == '6':
                                
                                map[thing][thing2].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing][thing2-3].mountain = True
                            if check[-1] == '7':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                                
                            if check[-1] == '8':
                                
                                
                                map[thing-4][thing2].mountain = True
                                
                                map[thing+4][thing2].mountain = True

                                
                                map[thing+3][thing2-1].mountain = True
                                
                                map[thing-3][thing2-1].mountain = True

                                
                                map[thing+2][thing2-2].mountain = True
                                
                                map[thing-2][thing2-2].mountain = True

                                
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                
                                map[thing+3][thing2+1].mountain = True
                                
                                map[thing-3][thing2+1].mountain = True

                                
                                map[thing+2][thing2+2].mountain = True
                                
                                map[thing-2][thing2+2].mountain = True

                                
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '9':
                                
                                
                                map[thing-2][thing2].mountain = True
                                
                                map[thing-4][thing2].mountain = True
                                
                                map[thing+2][thing2].mountain = True
                                
                                map[thing+4][thing2].mountain = True

                                
                                map[thing+2][thing2-1].mountain = True
                                
                                map[thing-2][thing2-1].mountain = True
                                

                                
                                map[thing+1][thing2-2].mountain = True
                                
                                map[thing-1][thing2-2].mountain = True
                                

                                
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                
                                map[thing+1][thing2+1].mountain = True
                                
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                
                                map[thing-3][thing2+1].mountain = True

                                
                                map[thing+1][thing2+2].mountain = True
                                
                                map[thing-1][thing2+2].mountain = True
                                

                                
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                        if 'Large part' in check:
                            if check[-1] == '1':
                                
                                map[thing][thing2].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2+1].mountain = True
                                
                            if check[-1] == '2':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '3':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '4':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '5':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '6':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '7':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '8':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '9':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                        if 'Major part' in check:
                            if check[-1] == '1':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '2':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '3':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '4':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '5':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '6':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '7':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '8':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True
                            if check[-1] == '9':
                                map[thing][thing2].mountain = True
                                map[thing-1][thing2].mountain = True
                                map[thing-2][thing2].mountain = True
                                map[thing-3][thing2].mountain = True
                                map[thing-4][thing2].mountain = True
                                map[thing+1][thing2].mountain = True
                                map[thing+2][thing2].mountain = True
                                map[thing+3][thing2].mountain = True
                                map[thing+4][thing2].mountain = True

                                map[thing][thing2-1].mountain = True
                                map[thing+1][thing2-1].mountain = True
                                map[thing+2][thing2-1].mountain = True
                                map[thing+3][thing2-1].mountain = True
                                map[thing-1][thing2-1].mountain = True
                                map[thing-2][thing2-1].mountain = True
                                map[thing-3][thing2-1].mountain = True

                                map[thing][thing2-2].mountain = True
                                map[thing+1][thing2-2].mountain = True
                                map[thing+2][thing2-2].mountain = True
                                map[thing-1][thing2-2].mountain = True
                                map[thing-2][thing2-2].mountain = True

                                map[thing][thing2-3].mountain = True
                                map[thing+1][thing2-3].mountain = True
                                map[thing-1][thing2-3].mountain = True

                                map[thing][thing2+1].mountain = True
                                map[thing+1][thing2+1].mountain = True
                                map[thing+2][thing2+1].mountain = True
                                map[thing+3][thing2+1].mountain = True
                                map[thing-1][thing2+1].mountain = True
                                map[thing-2][thing2+1].mountain = True
                                map[thing-3][thing2+1].mountain = True

                                map[thing][thing2+2].mountain = True
                                map[thing+1][thing2+2].mountain = True
                                map[thing+2][thing2+2].mountain = True
                                map[thing-1][thing2+2].mountain = True
                                map[thing-2][thing2+2].mountain = True

                                map[thing][thing2+3].mountain = True
                                map[thing+1][thing2+3].mountain = True
                                map[thing-1][thing2+3].mountain = True

                        count2 += 2
                        second_thing += 1
                    except:
                        pass
##                        if size == 1:
##                            size = libtcod.random_get_int(0, 1, 9)
##                            Dungeon.mountain_size.append('Small part'+str(size))
##                        elif size == 2:
##                            size = libtcod.random_get_int(0, 1, 9)
##                            Dungeon.mountain_size.append('Medium part'+str(size))
##
##                        elif size == 3:
##                            size = libtcod.random_get_int(0, 1, 9)
##                            Dungeon.mountain_size.append('Large part'+str(size))
##
##                        elif size == 4:
##                            size = libtcod.random_get_int(0, 1, 9)
##                            Dungeon.mountain_size.append('Major part'+str(size))

                    
                    
                    
                    
                    
            except:
                pass
            river_count = 1
            Dungeon.Special = [34, 30, 32, 30, 30, 30, 34, 29, 32, 29, 30, 29, 34, 28, 32, 28, 30, 28, 34, 27, 32, 27, 30, 27, 34, 26, 32,26, 30, 26, 34,25,
                               32, 25, 30, 25, 34, 24, 30, 24, 31, 24, 32, 24, 33, 24, 31, 23, 32, 23, 33, 23, 33, 22, 32, 22, 31, 22, 33, 21, 32, 21, 31, 21,
                               33, 20, 32,20, 31,20, 33,19, 32,19, 31,19, 32, 18, 33, 18, 34, 18, 33, 17, 34, 17, 35, 17, 32, 16, 33, 16, 34,16, 31, 15, 32, 15, 33, 15,
                               34,14, 33, 14, 32, 14, 33, 13, 34, 13, 35,13, 35,12, 34,12, 33,12, 33, 11, 34, 11, 35,11, 35,10, 33, 10, 34,10, 35,7, 35,9, 33, 9, 34,9,
                               35,8, 33,8 , 34,8, 34,7, 32,7, 33, 7, 34,6 , 32,6, 33, 6, 31, 1, 32,1, 32, 0, 31,0, 32, 3, 31, 3, 33, 1, 33,2, 34,5, 33,5, 32,5, 32,4,
                               33, 4, 34,4, 34,3, 33, 3, 32,2, 31,2, 30,1, 30, 0, 34, 31, 32, 31, 30, 31]
            for i in range(len(Dungeon.Special)+1):
                try:
                    first = Dungeon.Special[river_count-1]
                    second = Dungeon.Special[river_count]
                    map[first][second].water = True
                    river_count += 2
                except:
                    pass
     
            
            map[MAP_WIDTH/2][MAP_HEIGHT/2].block_sight
            for y in range(MAP_HEIGHT):
                for x in range(MAP_WIDTH):

                    if map[x][y].order == True:
                        map[x][y].mountain = False
                        map[x][y].forest = False
                        map[x][y].water = False

                            
                    visible = libtcod.map_is_in_fov(fov_map, x, y)

                    

                    if not visible:

                        
                       
                        if map[x][y].explored :
                            
                            if map[x][y].mountain == True and map[x][y].water == True:
                                map[x][y].mountain = False

                            if map[x][y].town == True and Dungeon.Terrain_type == 'Wilderness':
                                
                                libtcod.console_put_char_ex(con, x, y, '^', libtcod.brass, libtcod.black)

                            if map[x][y].tower == True and Dungeon.Terrain_type == 'Wilderness':
                                libtcod.console_put_char_ex(con, x, y, 'T', libtcod.grey, libtcod.black)

                            if map[x][y].city_wall == True and Dungeon.Terrain_type == 'Wilderness':
                                libtcod.console_put_char_ex(con, x, y, '#', libtcod.grey, libtcod.black)

                            if map[x][y].city_gate == True and Dungeon.Terrain_type == 'Wilderness':
                                libtcod.console_put_char_ex(con, x, y, 'I', libtcod.brass, libtcod.black)

                            if map[x][y].mountain == True and map[x][y].forest == True:
                                libtcod.console_put_char_ex(con, x, y, '^', libtcod.dark_green, libtcod.black)
                            if map[x][y].mountain == False and map[x][y].forest == True and map[x][y].water == False:
                                libtcod.console_put_char_ex(con, x, y, 'T', libtcod.green, libtcod.black)

                            if map[x][y].water == True and map[x][y].forest == True:
                                libtcod.console_put_char_ex(con, x, y, '=', libtcod.Color(127,101,63), libtcod.black)

                            elif map[x][y].water == True:
                                libtcod.console_put_char_ex(con, x, y, '=', libtcod.dark_blue, libtcod.black)

                            if map[x][y].mountain == True and map[x][y].water == False and map[x][y].forest == False:
                                libtcod.console_put_char_ex(con, x, y, '^', libtcod.Color(127,101,63), libtcod.black)
        
                            
                            if map[x][y].mountain == False and map[x][y].forest == False and map[x][y].water == False:

                                if map[x][y].town == False and map[x][y].tower == False and map[x][y].city_wall == False and map[x][y].tower == False and map[x][y].city_gate == False:
                                    libtcod.console_put_char_ex(con, x, y, '-', libtcod.green, libtcod.black)

                            

                    else:
                    

                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2+1].order = True
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2+1].town = True

                        
                        map[MAP_WIDTH/2][MAP_HEIGHT/2+1].order = True
                        map[MAP_WIDTH/2][MAP_HEIGHT/2+1].town = True
                        
                       
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2-1].order = True
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2-1].town = True
                        

                        
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2].order = True
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2].town = True
                        

                        
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2+1].order = True
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2+1].town = True
                        

                        
                        map[MAP_WIDTH/2][MAP_HEIGHT/2-1].order = True
                        map[MAP_WIDTH/2][MAP_HEIGHT/2-1].town = True
                       

                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].order = True
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].town = True
                        

                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2-1].order = True
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2-1].town = True
                        

                        
                        map[MAP_WIDTH/2][MAP_HEIGHT/2-2].order = True
                        map[MAP_WIDTH/2][MAP_HEIGHT/2-2].town = True
                        

                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].order = True
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].town = True
                        

                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].order = True
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].town = True
                        


                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].order = True
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].town = True
                        

                        
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2].order = True
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2].town = True
                        

                        
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2+1].order = True
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2+1].town = True
                        

                        
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2].order = True
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2].town = True
                        

                        
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2-1].order = True
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2-1].town = True
                        

                        
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2+1].order = True
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2+1].town = True
                        

                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2+2].order = True
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2+2].town = True
                        

                        
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2+2].order = True
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2+2].town = True
                        

                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].order = True
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2].town = True
                        

                        
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2].order = True
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2].city_gate = True

                        
                            
                        
                        
                        map[MAP_WIDTH/2+3][MAP_HEIGHT/2].city_wall = True

                        
                        map[MAP_WIDTH/2+3][MAP_HEIGHT/2+3].order = True
                        map[MAP_WIDTH/2+3][MAP_HEIGHT/2+3].tower = True

                        
                        map[MAP_WIDTH/2+3][MAP_HEIGHT/2-3].order = True
                        map[MAP_WIDTH/2+3][MAP_HEIGHT/2-3].tower = True

                        
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2-3].order = True
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2-3].tower = True

                        
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2+3].order = True
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2+3].tower = True

                        
                        map[MAP_WIDTH/2+3][MAP_HEIGHT/2+1].order = True
                        
                        
                        map[MAP_WIDTH/2+3][MAP_HEIGHT/2+1].city_wall = True

                        
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2+2].order = True
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2+2].city_wall = True
                        
                        

                        
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2+3].order = True
                        
                        
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2+3].city_wall = True

                        
                        map[MAP_WIDTH/2][MAP_HEIGHT/2+3].order = True
                        
                        
                        map[MAP_WIDTH/2][MAP_HEIGHT/2+3].city_wall = True

                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2+3].order = True
                        
                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2+3].city_wall = True

                        
                        map[MAP_WIDTH/2+3][MAP_HEIGHT/2-1].order = True
                       
                        
                        map[MAP_WIDTH/2+3][MAP_HEIGHT/2-1].city_wall = True

                        
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2+1].order = True
                        
                        
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2+1].city_wall = True

                        
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2-3].order = True
                        
                        
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2-3].city_wall = True
                            

                        
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2-1].order = True
                        
                        
                        map[MAP_WIDTH/2-3][MAP_HEIGHT/2-1].city_wall = True
                            
                            

                        
                        
                       
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2-2].order = True
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2-2].city_wall = True
                            

                        
                        
                        
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2-2].order = True
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2-2].city_wall = True
                            

                        
                        map[MAP_WIDTH/2][MAP_HEIGHT/2-3].order = True
                        
                        map[MAP_WIDTH/2][MAP_HEIGHT/2-3].city_wall = True
                            

                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2-3].order = True
                        
                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2-3].city_wall = True

                        
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2+2].order = True
                        
                        
                        map[MAP_WIDTH/2-2][MAP_HEIGHT/2+2].city_wall = True
                            

                        
                        map[MAP_WIDTH/2][MAP_HEIGHT/2+2].order = True
                        map[MAP_WIDTH/2][MAP_HEIGHT/2+2].town = True
                       

                        
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2-2].order = True
                        map[MAP_WIDTH/2-1][MAP_HEIGHT/2-2].town = True
                        

                        
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2-2].order = True
                        map[MAP_WIDTH/2+1][MAP_HEIGHT/2-2].town = True
                        
                       
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2-1].order = True
                        map[MAP_WIDTH/2+2][MAP_HEIGHT/2-1].order = True
                        

                        if map[x][y].town == True:
                                libtcod.console_put_char_ex(con, x, y, '^', libtcod.brass, libtcod.black)

                        if map[x][y].tower == True:
                            libtcod.console_put_char_ex(con, x, y, 'T', libtcod.grey, libtcod.black)

                        if map[x][y].city_wall == True:
                            libtcod.console_put_char_ex(con, x, y, '#', libtcod.grey, libtcod.black)

                        if map[x][y].city_gate == True:
                            libtcod.console_put_char_ex(con, x, y, 'I', libtcod.brass, libtcod.black)

                        

                        if map[x][y].mountain == True and map[x][y].water == True:
                            map[x][y].mountain = False
                        

                        if map[x][y].mountain == True and map[x][y].forest == True:
                            libtcod.console_put_char_ex(con, x, y, '^', libtcod.dark_green, libtcod.black)
                        if map[x][y].mountain == False and map[x][y].forest == True and map[x][y].water == False:
                            libtcod.console_put_char_ex(con, x, y, 'T', libtcod.green, libtcod.black)

                        if map[x][y].water == True and map[x][y].forest == True:
                            libtcod.console_put_char_ex(con, x, y, '=', libtcod.Color(127,101,63), libtcod.black)

                        elif map[x][y].water == True:
                            libtcod.console_put_char_ex(con, x, y, '=', libtcod.dark_blue, libtcod.black)

                        if map[x][y].mountain == True and map[x][y].water == False and map[x][y].forest == False:
                            libtcod.console_put_char_ex(con, x, y, '^', libtcod.Color(127,101,63), libtcod.black)
    
                        
                        if map[x][y].mountain == False and map[x][y].forest == False and map[x][y].water == False:

                            if map[x][y].town == False and map[x][y].tower == False and map[x][y].city_wall == False and map[x][y].tower == False and map[x][y].city_gate == False:
                                libtcod.console_put_char_ex(con, x, y, '-', libtcod.green, libtcod.black)
                            



                            

                        

                        if 'Graveyard spawn' in player.fighter.event and map[50][20].explored:
                            libtcod.console_put_char_ex(con, 50, 20, '+', libtcod.grey, libtcod.black)

    
    
    #draw all objects in the list, except the player. We want it to
    #always appear over all other objects! so its drawn later
    for object in objects:
        if object != player:
            object.draw()
    player.draw()
    #print "BEEP BEEP JEEP"
  
        
    if((time.time() - TrueSecond) > 1):
        TrueSecond = time.time()
        for i in objects:
            if(i.ai != None):
                try:
                    if(i.Rank > 1):
                        try:

                            for e in range(len(i.Memory)):
                                if(i.Memory[e].duration > 0):
                                    i.Memory[e].duration -= 1
                                else:
                                    i.Memory.remove(i.Memory[e])
                        except:
                            pass
                    
                except:
                    pass




    

    
    
    
    if('Garret is Dead' in player.fighter.event):
        if(SUPERSPECIAL == 255):
            message("The corpse of the Dying man, burns to ash..", libtcod.red)
        if(SUPERSPECIAL > 0):
            SUPERSPECIAL -= 5
            time.sleep(0.05)
            map[38][35].blocked = True
            map[38][35].block_sight = True
            libtcod.console_put_char_ex(con, 38, 35, '@', libtcod.Color(SUPERSPECIAL,0,0), libtcod.black)
        if(SUPERSPECIAL == 0):
            
            player.fighter.event.remove('Garret is Dead')
            map[38][35].blocked = False
            map[38][35].block_sight = False
     # delays for 5 seconds

    
    

    #blit the contents of "con" to the root console
    libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)

    #prepare to render the GUI panel
    libtcod.console_set_default_background(panel, libtcod.black)
    libtcod.console_clear(panel)

    #print the game messages, one line at a time

    #General_Tab = False
    #Combat_Tab = False
    #Story_Tab = False
    
    

    (mouse_x, mouse_y) = (mouse.cx, mouse.cy)

    if Combat_Tab == True:
        COMBAT_MISSED = 0
        if mouse.lbutton_pressed:
            
            if (len(combat_keywords) > 0):
                for i in combat_keywords:
                    
                    
                    if (i.y == (mouse_y - 56)) and mouse_x >= i.x and mouse_x <= (i.x + len(i.string) - 1) and i.string != ".":
                        try:
                            
                            encyclopedia(i.string, 100, i)
                            break
                            
                        except Exception as e:
                            message(str(e) + " ENCYCLOPEDIA ERROR")
                        #Implement a Menu that displays all the info there is to know about the Buff, so that we can call it here.
                        #CURRENT WORK 1
                        break
    if mouse.lbutton_pressed: #We can have 9 lines of messages, in total, before we have to account for change.
        
        if (len(combat_keywords) > 0):
            message(str((combat_keywords[0].x)) + " This is keywords.")
        
        if (mouse_x >= 44 and mouse_x <= 50) and mouse_y == 67:
            General_Tab = True
            Combat_Tab = False
            Story_Tab = False
        if(mouse_x >= 32 and mouse_x <= 37) and mouse_y == 67:
            try: 
                roll = libtcod.random_get_int(0, 0, 5)
                combat_message(22, 10, "Dummy hits you for 5 ", libtcod.Color(50*roll, 50*roll, 50*roll))
                combat_message(22+len("Dummy hits you for 5 "), 9, "Fire Damage",libtcod.red, True)
                combat_message(22+len("Dummy hits you for 5 Fire Damage"), 9, ".",libtcod.white, True)
                Combat_Tab = True
                
                Story_Tab = False
                General_Tab = False
            except Exception as e:
                message(str(e) + "ERROR IN TAB MESSAGES")
            #22 is the standard, so we'd have to make adaptation to that
            #combat_message(22, 1, "Trying out the Combat Log", libtcod.red)
        if(mouse_x >= 22 and mouse_x <= 26) and mouse_y == 67:
            Combat_Tab = False
            #Story_Tab = True UNDER CONSTRUCTION, THERE OF DISABELED
            General_Tab = False
      

    
    if General_Tab == True:
        y = 1
        for (line, color) in game_msgs:
            libtcod.console_set_default_foreground(panel, color)
            libtcod.console_print_ex(panel, MSG_X, y, libtcod.BKGND_NONE, libtcod.LEFT, line)
            y += 1
    elif Combat_Tab == True:
        try:
        
            for i in combat_msgs: #Both the Combat Tab and the Story Tab, will be structured differently, to reflect difference in interaction.
                #Foremost, Combat/story will have deeper interactions with Keywords and allocation of Co-ordinates as to build a structure of Colour and positon.
                #The Combat and the Story pane, should have Encyclopedias Connected to them, allowing for interaction akin to getting info about stuff.
                #x starts at 22
                libtcod.console_set_default_foreground(panel, i.color)
                libtcod.console_print_ex(panel, i.x, i.y, libtcod.BKGND_NONE, libtcod.LEFT, i.string)
                libtcod.console_set_default_foreground(panel, libtcod.white)
        except Exception as e:
            message(str(e) + "ERROR IN COMBAT TAB")
        #Make a list that puts in the Key Words with Co-ords. If a Co-ord is above 0, it's a Clickable KeyWord.
        
    elif Story_Tab == True:
        
        for i in story_msgs:
            libtcod.console_set_default_foreground(panel, i.color)
            libtcod.console_print_ex(panel, i.x, i.y, libtcod.BKGND_NONE, libtcod.LEFT, i.line)
            libtcod.console_set_default_foreground(panel, libtcod.white)


    
        
        


    level_up_xp = LEVEL_UP_BASE + player.level * LEVEL_UP_FACTOR
    #show the player's stats
    
    libtcod.console_set_default_foreground(panel, libtcod.white)
    

    try:
        if player.x == 50 and player.y == 20 and player.fighter.wilderness_factor == True and 'Graveyard spawn' in player.fighter.event:
            map[50][20].mountain = False
            map[50][20].water = False
            map[50][20].forest = False
            libtcod.console_clear(0)
            libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)
            terrain = 'Graveyard'
            
        elif map[player.x][player.y].mountain == True and map[player.x][player.y].forest == True:
            libtcod.console_clear(0)
            libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)
            terrain = 'Forest-covered Mountains'
        elif map[player.x][player.y].mountain == True and map[player.x][player.y].forest == False:
            libtcod.console_clear(0)
            libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)
            terrain = 'Mountains'
        elif map[player.x][player.y].forest == True and map[player.x][player.y].mountain == False and map[player.x][player.y].water == False:
            libtcod.console_clear(0)
            libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)
            terrain = 'Forest'
        elif map[player.x][player.y].water == True and map[player.x][player.y].forest == True:
            libtcod.console_clear(0)
            libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)
            terrain = 'Marshes'
        elif map[player.x][player.y].water == True and map[player.x][player.y].forest == False:
            libtcod.console_clear(0)
            libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)
            terrain = 'Water'

        elif map[player.x][player.y].order == True:
            libtcod.console_clear(0)
            libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)
            terrain = 'Heart of the Order'
        
            
        
        else:
            libtcod.console_clear(0)
            libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)
            terrain = 'Plains'
    except:
        terrain = 'Derp'
        

    

    libtcod.console_print_ex(0, 58, 50, libtcod.BKGND_NONE, libtcod.LEFT, terrain)

    libtcod.console_print_ex(0, 58, 53, libtcod.BKGND_NONE, libtcod.LEFT, 'Name: ' + str(player.fighter.Name))
    

    libtcod.console_print_ex(panel, 85, 6, libtcod.BKGND_NONE, libtcod.LEFT, 'Gold: ' + str(player.fighter.gold))
    
    libtcod.console_print_ex(panel, 85, 4, libtcod.BKGND_NONE, libtcod.LEFT, 'Armor:' + str(player.fighter.defense))

    if player.fighter.Block_Duration >= 1:
        libtcod.console_print_ex(panel, 93, 4, libtcod.BKGND_NONE, libtcod.LEFT, '(BD:' + str(player.fighter.Block_Duration) + ')')
    

    libtcod.console_print_ex(panel, 4, 1, libtcod.BKGND_NONE, libtcod.LEFT, 'HP:' + str(player.fighter.hp) + '/' + str(player.fighter.max_hp))
    
    libtcod.console_print_ex(panel,4,1,libtcod.BKGND_NONE, libtcod.LEFT,"%c%c%c%c%c%c%c%cHP:%c"%
                             (libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
    
    

    #Print a red text before the STR notation

    libtcod.console_set_default_foreground(0, libtcod.white)

    libtcod.console_print(0,51,55,"%c%c%c%cStr:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_STOP))

    #The STR notation
    libtcod.console_print(0,55,55,str(player.fighter.Base_Strength))

    #Print a green text before the Agi notation
    libtcod.console_print(0,58,55,"%c%c%c%cAgi:%c"%(libtcod.COLCTRL_FORE_RGB,1,255,1,libtcod.COLCTRL_STOP))

    #The Agi notation

    libtcod.console_print(0, 62, 55, str(player.fighter.Base_Agility))

    #Print a blue text before the Int notation
    libtcod.console_print(0,65,55,"%c%c%c%cInt:%c"%(libtcod.COLCTRL_FORE_RGB,1,10,255,libtcod.COLCTRL_STOP))

    #The Int Notation

    libtcod.console_print(0,69, 55, str(player.fighter.Intellect))

    

    if player.fighter.Class == 'Warrior':
        libtcod.console_print(0,1,55,"%c%c%c%c%c%c%c%c1:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print(0, 3, 55, 'Stun')
        if 'Block Talent 10' in player.fighter.event:
            libtcod.console_print(0,8,55,"%c%c%c%c%c%c%c%c(65)%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        else:
            libtcod.console_print(0,8,55,"%c%c%c%c%c%c%c%c(75)%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))

    if player.fighter.skill2 == 'Unarmed' and player.fighter.Class == 'Warrior':
        libtcod.console_print(0,14,55,"%c%c%c%c%c%c%c%c2:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print(0, 16, 55, ' Unarmed  ')

    elif player.fighter.skill2 == 'Whirlwind' and player.fighter.Class == 'Warrior':
        libtcod.console_print(0,14,55,"%c%c%c%c%c%c%c%c2:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print(0, 16, 55, ' Whirlwind')
        libtcod.console_print(0,27,55,"%c%c%c%c%c%c%c%c(55)%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))

    elif player.fighter.skill2 == 'Slash' and player.fighter.Class == 'Warrior':
        libtcod.console_print(0,14,55,"%c%c%c%c%c%c%c%c2:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print(0, 16, 55, 'Slash')
        if 'Off Talent 1' in player.fighter.event:
            libtcod.console_print(0,22,55,"%c%c%c%c%c%c%c%c(40)%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        else:
            libtcod.console_print(0,22,55,"%c%c%c%c%c%c%c%c(55)%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))

    if player.fighter.skill3 == 'Block' and player.fighter.Class == 'Warrior':
        libtcod.console_print(0,28,55,"%c%c%c%c%c%c%c%c3:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        if 'Block Talent 11' in player.fighter.event and player.fighter.Block_Duration > 0:
            libtcod.console_print(0, 30, 55, 'S.Slam')
            libtcod.console_print(0,36,55,"%c%c%c%c%c%c%c%c(40)%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        else:
            libtcod.console_print(0, 30, 55, 'Block')
            libtcod.console_print(0,35,55,"%c%c%c%c%c%c%c%c(60)%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
            libtcod.console_print(0, 39, 55, ' ')

    if player.fighter.skill4 == 'Stone Form' and player.fighter.Class == 'Warrior':
        libtcod.console_print(0,41,55,"%c%c%c%c%c%c%c%c4:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print(0, 43, 55, 'SF ')
        libtcod.console_print(0,45,55,"%c%c%c%c%c%c%c%c(60)%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))


    elif player.fighter.skill3 == 'Bastion' and player.fighter.Class == 'Warrior':
        libtcod.console_print(0,28,55,"%c%c%c%c%c%c%c%c3:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print(0, 30, 55, '3: Bastion  ')
    
        
    
    libtcod.console_print_ex(panel, 85, 6, libtcod.BKGND_NONE, libtcod.LEFT, 'Gold: ' + str(player.fighter.gold))
    libtcod.console_print(0, 3, 53, 'Lvl:' + str(player.level))
    libtcod.console_print(0,12,53,"%c%c%c%c%c%c%c%cXP:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,255,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
    
    libtcod.console_print(0, 15, 53, str(player.fighter.xp) + '/' + str(player.fighter.levels[str(player.level)]) + '            ')

    #Print a Text before the Endurance notation
    libtcod.console_print(0,72,55,"%c%c%c%cEnd:%c"%(libtcod.COLCTRL_FORE_RGB,100,100,100,libtcod.COLCTRL_STOP))

    #The Endurancce Notation
    libtcod.console_print(0, 76, 55, str(player.fighter.Base_Endurance))

    #Print a Text before the Spirit notation
    libtcod.console_print(0,79,55,"%c%c%c%cSpi:%c"%(libtcod.COLCTRL_FORE_RGB,1,255,150,libtcod.COLCTRL_STOP))

    #The Spirit Notation
    libtcod.console_print(0, 83, 55, str(player.fighter.Base_Spirit))

    #Print a Yellow text before the Luck notation
    libtcod.console_print(0,86,55,"%c%c%c%cLuck:%c"%(libtcod.COLCTRL_FORE_RGB,1,150,150,libtcod.COLCTRL_STOP))

    #The Luck notation
    libtcod.console_print(0, 91, 55, str(player.fighter.Base_Luck))




    if player.fighter.Class == 'Warlock':
        
        libtcod.console_print_ex(panel,80,1,libtcod.BKGND_NONE, libtcod.LEFT,"%c%c%c%c%c%c%c%cCorruption: %c"%
                                 (libtcod.COLCTRL_FORE_RGB,255,1,255,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print_ex(panel, 92, 1, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.corruption) + '/' + str(player.fighter.max_corruption))
    if player.fighter.Class == 'Warrior':
        
        libtcod.console_print_ex(panel,80,1,libtcod.BKGND_NONE, libtcod.LEFT,"%c%c%c%c%c%c%c%cStamina:%c"%
                                 (libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print_ex(panel, 89, 1, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.Stamina) + '/' + str(player.fighter.Max_stamina))
        
    if player.fighter.Class == 'Monk':
        libtcod.console_print_ex(panel,80,1,libtcod.BKGND_NONE, libtcod.LEFT,"%c%c%c%c%c%c%c%cKi: %c"%
                                 (libtcod.COLCTRL_FORE_RGB,1,255,255,libtcod.COLCTRL_BACK_RGB,1,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print_ex(panel, 84, 1, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.Ki) + '/' + str(player.fighter.Max_Ki))
    if Dungeon.dungeon_level > 0:
        libtcod.console_print_ex(panel, 1, 4, libtcod.BKGND_NONE, libtcod.LEFT, Dungeon.Terrain_type + ' ' + str(Dungeon.dungeon_level))
    else:
        libtcod.console_print_ex(panel, 1, 4, libtcod.BKGND_NONE, libtcod.LEFT, Dungeon.Terrain_type)
    if MINUTE < 10:
        libtcod.console_print_ex(panel, 1, 6, libtcod.BKGND_NONE, libtcod.LEFT, 'Time: ' + str(HOUR) + ':' + str(0) + str(MINUTE))
    if MINUTE >= 10:
        libtcod.console_print_ex(panel, 1, 6, libtcod.BKGND_NONE, libtcod.LEFT, 'Time: ' + str(HOUR) + ':' + str(MINUTE))

    
        

    
    
        

    if player.fighter.satiation/player.fighter.max_satiation <= 0.4:
        libtcod.console_print_ex(panel, 1, 8, libtcod.BKGND_NONE, libtcod.LEFT, 'Hungry')
    elif player.fighter.satiation/player.fighter.max_satiation <= 0.25:
        libtcod.console_print_ex(panel, 1, 8, libtcod.BKGND_NONE, libtcod.LEFT, 'Really Hungry')
    elif player.fighter.satiation/player.fighter.max_satiation <= 0.1:
        libtcod.console_print_ex(panel, 1, 8, libtcod.BKGND_NONE, libtcod.LEFT, 'Starvation')


    #display names of objects under the mouse 
    libtcod.console_set_default_foreground(panel, libtcod.light_gray)
    
    img = libtcod.image_load('black_background.png')
    libtcod.image_blit_2x(img, 0, 95, 0, sx=0, sy=0, w=-1, h=-1)
    libtcod.console_print_ex(0, 100, 5, libtcod.BKGND_NONE, libtcod.LEFT, poop_test())
    
    libtcod.console_print_ex(0, 100, 7, libtcod.BKGND_NONE, libtcod.LEFT, crit_test())
    
    libtcod.console_print_ex(0, 100, 9, libtcod.BKGND_NONE, libtcod.LEFT, "Damage of your Weapons:")
    libtcod.console_print_ex(0, 100, 11, libtcod.BKGND_NONE, libtcod.LEFT, damage_test())

    if player.fighter.skill2 == 'Whirlwind': 
        
        libtcod.console_print_ex(0, 100, 15, libtcod.BKGND_NONE, libtcod.LEFT, 'Whirlwind - Radius: ' + str(int(round(player.fighter.Base_Strength/6 + player.fighter.Base_Agility/8))) + \
                                 ' Damage: ' + ww_dmg())
    elif player.fighter.skill2 == 'Slash':
        libtcod.console_print_ex(0, 100, 15, libtcod.BKGND_NONE, libtcod.LEFT, 'Slash - Damage: ' + slash_dmg())

    try:
        if get_debuffs_under_mouse() != None:
            Dungeon.debuffs = get_debuffs_under_mouse()
            
            
        

        if len(Dungeon.debuffs) > 0:
            e = Dungeon.debuffs

            libtcod.console_print_ex(0, 100, 45, libtcod.BKGND_NONE, libtcod.LEFT, 'Name: ' + e[0])
            if e[6] == 'NPC' and e[1] == '':
                libtcod.console_print_ex(0, 100, 46, libtcod.BKGND_NONE, libtcod.LEFT, 'Status: Neutral')
            else:
                libtcod.console_print_ex(0, 100, 46, libtcod.BKGND_NONE, libtcod.LEFT, 'Status: ' + str(e[1]))

            if len(e[2]) == 0:
                libtcod.console_print_ex(0, 100, 47, libtcod.BKGND_NONE, libtcod.LEFT, 'Debuffs: None')
            else:
                dig = e[2]
                
                
                count = 0
                
                for i in dig:
                    
                    if i.name == 'Poisoned':
                        dig_name = 'Poisoned' + '(' + str(i.turns) + ')'
                        special = libtcod.Color(69, 122, 46)
                    elif i.name == 'Bleeding':
                        dig_name = 'Bleeding' + '(' + str(i.turns) + ')'
                        special = libtcod.Color(168, 18, 18)
                        
                    elif i.name == 'Fear':
                        dig_name = 'Feared' + '(' + str(i.turns) + ')'
                        special = libtcod.Color(82, 10, 165)
                    elif i.name == 'Rooted':
                        dig_name = 'Rooted' + '(' + str(i.turns) + ')'  
                        special = libtcod.Color(55, 108, 28)
                
                    length = len(dig_name) + 1

                    libtcod.console_set_default_foreground(0, special)
                    libtcod.console_print_ex(0, 108+count, 47, libtcod.BKGND_NONE, libtcod.LEFT, dig_name)
                    libtcod.console_set_default_foreground(0, libtcod.white)
                    count += length

                    
                libtcod.console_print_ex(0, 100, 47, libtcod.BKGND_NONE, libtcod.LEFT, 'Debuffs:')
                
                
                

            if e[3] == 0:
                libtcod.console_print_ex(0, 100, 49, libtcod.BKGND_NONE, libtcod.LEFT, 'Burning: No')
            else:
                libtcod.console_print_ex(0, 100, 49, libtcod.BKGND_NONE, libtcod.LEFT, 'Burning: ' + str(e[3]))

            if e[4] > e[5]:
                libtcod.console_print_ex(0, 100, 50, libtcod.BKGND_NONE, libtcod.LEFT, 'Health: Empowered (Above 100%)')
            elif int(e[4]) == int(e[5]):
                
                libtcod.console_print_ex(0, 100, 50, libtcod.BKGND_NONE, libtcod.LEFT, 'Health: Unharmed (At 100%)')
            elif float(e[4])/float(e[5]) >= 0.75 and float(e[4])/float(e[5]) < 1.0:
                libtcod.console_print_ex(0, 100, 50, libtcod.BKGND_NONE, libtcod.LEFT, 'Health: Slightly Hurt (75 to 100%)')
            elif float(e[4])/float(e[5]) >= 0.50 and float(e[4])/float(e[5]) < 0.75:
                libtcod.console_print_ex(0, 100, 50, libtcod.BKGND_NONE, libtcod.LEFT, 'Health: Somewhat Hurt (50 to 74%)')
            elif float(e[4])/float(e[5]) >= 0.25 and float(e[4])/float(e[5]) < 0.5:
                libtcod.console_print_ex(0, 100, 50, libtcod.BKGND_NONE, libtcod.LEFT, 'Health: Badly Hurt (25 to 49%)')
            elif float(e[4])/float(e[5]) > 0 and float(e[4])/float(e[5]) < 0.25:
                libtcod.console_print_ex(0, 100, 50, libtcod.BKGND_NONE, libtcod.LEFT, 'Health: Dying (0 to 24%)')
            

        
        
        #Name=0, Tale_told=1, Debuffs=2, burn=3, current hp=4, max_hp=5, monster_type=6


    except Exception as e:
        pass


##    libtcod.console_print_ex(0, 100, 46, libtcod.BKGND_NONE, libtcod.LEFT, "Pick up item: ','  Inventory: 'i'  Inspect: 'I'")
##    libtcod.console_print_ex(0, 100, 48, libtcod.BKGND_NONE, libtcod.LEFT, "Equip item: 'E'  Eat: 'e'  Read: 'r'")
##    libtcod.console_print_ex(0, 100, 50, libtcod.BKGND_NONE, libtcod.LEFT, "Talk: 'T'  Go Down '>'  Go Up '<'")
##    libtcod.console_print_ex(0, 100, 52, libtcod.BKGND_NONE, libtcod.LEFT, "Quest Log: 'Q'")
    
    try:
        
        visi = player.fighter.VISIBILITY + (TORCH_RADIUS*20) - 100
        visi2 = map[player.x][player.y].light_level
        if visi2 >= 0:
            last = visi + visi2
        else:
            last = visi - visi2
    except Exception as e:

        visi = player.fighter.VISIBILITY + (TORCH_RADIUS*20) - 100 
        last = visi
##
##    Conceal = 0
##
##    Conceal += Conceal_Bonus(player.fighter.Right)
##    Conceal += Conceal_Bonus(player.fighter.Left)
##    Conceal += Conceal_Bonus(player.fighter.Both)
##    Conceal += Conceal_Bonus(player.fighter.head)
##    Conceal += Conceal_Bonus(player.fighter.neck)
##    Conceal += Conceal_Bonus(player.fighter.shoulders)
##    Conceal += Conceal_Bonus(player.fighter.chest)
##    Conceal += Conceal_Bonus(player.fighter.belt)
##    Conceal += Conceal_Bonus(player.fighter.gloves)
##    Conceal += Conceal_Bonus(player.fighter.bracers)
##    Conceal += Conceal_Bonus(player.fighter.legs)
##    Conceal += Conceal_Bonus(player.fighter.boots)
##    Conceal += Conceal_Bonus(player.fighter.ring1)
##    Conceal += Conceal_Bonus(player.fighter.ring2)
##    Conceal += Conceal_Bonus(player.fighter.trinket1)
##    Conceal += Conceal_Bonus(player.fighter.trinket2)
##
##    if last > 100 and Conceal > 0:
##        Conceal = int(Conceal/((last/100.0)*1.5))
##        #Examples: Last is 150, 1.5*1.5 = Conceal/2.25
##        #Conceal has a 44% effectivity
##        #Examples: Last is 160, 1.6*1.5 = Conceal/2.4
##        #Conceal has a 41.67% Effectivity
##        #Examples: Last is 200, 2.0*1.5 = Conceal/3.0
##        #Conceal has a 33% Effectivity
##    elif last < 100 and last >= 50 and Conceal > 0:
##        Conceal = int(Conceal/((last/100.0)*1))
##        #Examples: Last is 80, 0.8*1 = Conceal/0.8
##        #Conceal has a 125% effectivity
##        #Examples: Last is 60, 0.6*1 = Conceal/0.6
##        #Conceal has a 166% Effectivity
##        #Examples: Last is 50, 0.5*1 = Conceal/0.5
##        #Conceal has a 200% Effectivity
##    elif last < 50:
##        Conceal = Conceal*3
##        #At "Pitch Black" levels, Conceal has a 3x Efficiency

    if last > 100:
        minus = (last - 100) * 3
        libtcod.console_set_default_foreground(0, (libtcod.Color(255,(255-minus),0)))

        
    if last == 100:
        libtcod.console_set_default_foreground(0, libtcod.yellow)
    if last < 100 and last >= 50:
        under = 100 - last
        minus = int(under*2.5)
        libtcod.console_set_default_foreground(0, (libtcod.Color((255-minus),(255-minus),0)))
    if last < 50:
        libtcod.console_set_default_foreground(0, libtcod.white)
    

    libtcod.console_print_ex(0, 100, 54, libtcod.BKGND_NONE, libtcod.LEFT, "Visibility: ")
    libtcod.console_set_default_foreground(0, libtcod.white)
    if last >= 50:
        libtcod.console_print_ex(0, 100+len("Visibility: "), 54, libtcod.BKGND_NONE, libtcod.LEFT, str(last) + '%')
    else:
        libtcod.console_set_default_foreground(0, libtcod.red)
        libtcod.console_print_ex(0, 100+len("Visibility: "), 54, libtcod.BKGND_NONE, libtcod.LEFT, 'Pitch Black')
        libtcod.console_set_default_foreground(0, libtcod.white)

    
    libtcod.console_print_ex(0, 100, 55, libtcod.BKGND_NONE, libtcod.LEFT, "Noise: " + str(TORCH_RADIUS/2) + '%')
    libtcod.console_set_default_foreground(panel, libtcod.white)
    libtcod.console_print_ex(panel, 100, 1, libtcod.BKGND_NONE, libtcod.LEFT, "Hearing: " + str(player.fighter.Base_Hearing) + str(player.x) + ' ' + str(player.y))
    libtcod.console_set_default_foreground(panel, libtcod.white)
    
    libtcod.console_print(0,100,32,"%c%c%c%cDebuffs:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_STOP)) #Render Debuffs
    try:
        if len(Buff.buffs) > 0:
            count = 0
            count2 = 0
            for i in Buff.buffs: #Make a Dictionary with X indices based on Count increment
                libtcod.console_set_default_foreground(0, i.color)
                libtcod.console_print_ex(0, 106 + count, 22+count2, libtcod.BKGND_NONE, libtcod.LEFT, i.name + '(' + str(i.turns) + ')')
                libtcod.console_set_default_foreground(0, libtcod.white)
                 #36 is Width max on first row, 44 is on Second

                if i.turns >= 10:
                    count += 2
                elif i.turns < 10:
                    count += 1

                count += len(i.name) + 3

                if count > 36 and count2 == 0:
                    count = -6
                    count2 += 1
                elif count > 44 and count2 >= 0:
                    count = -6
                    count2 += 1

                
                
                
            
    except Exception as e:
        pass


    libtcod.console_print(0,100,22,"%c%c%c%cBuffs:%c"%(libtcod.COLCTRL_FORE_RGB,1,255,1,libtcod.COLCTRL_STOP)) #Render Buffs

    


    if burn > 0 and burning == True:

        libtcod.console_print(0,109,35,"%c%c%c%cBurning!%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_STOP))
    if burning == True and burn <= 0:
        burning = False
        

    rarity = get_rarity_under_player()
    if rarity == 'Uncommon':
        libtcod.console_set_default_foreground(0, libtcod.green)
    if rarity == 'Rare':
        libtcod.console_set_default_foreground(0, libtcod.dark_cyan)
    if rarity == 'Artifact':
        libtcod.console_set_default_foreground(0, libtcod.orange)
    if rarity == 'Shatm':
        libtcod.console_set_default_foreground(0, libtcod.light_red)
    libtcod.console_print(0, 38, 51, get_names_under_player())

    if 'Debuff Check' in player.fighter.event:
        for y in range(0, 20):

            for e in range(0, 41):
                libtcod.console_print_ex(0, MAP_WIDTH/2-20+e, MAP_HEIGHT/2-5+y, libtcod.BKGND_NONE, libtcod.LEFT, ' ')

        for i in game_msgs2:
            
            libtcod.console_set_default_foreground(0, i.color)
                    

            libtcod.console_print_ex(0, MAP_WIDTH/2-19+i.x, MAP_HEIGHT/2-4+i.y, libtcod.BKGND_NONE, libtcod.LEFT, i.string)
    libtcod.console_print_ex(0, 44, 67, libtcod.BKGND_NONE, libtcod.LEFT, 'General')
    libtcod.console_print_ex(0, 32, 67, libtcod.BKGND_NONE, libtcod.LEFT, 'Combat')

    if(COMBAT_MISSED > 0):
        libtcod.console_print_ex(0, 39, 67, libtcod.BKGND_NONE, libtcod.LEFT, '(')
        libtcod.console_set_default_foreground(0, libtcod.red)
        libtcod.console_print_ex(0, 40, 67, libtcod.BKGND_NONE, libtcod.LEFT, str(COMBAT_MISSED))
        libtcod.console_set_default_foreground(0, libtcod.white)
        libtcod.console_print_ex(0, 40+len(str(COMBAT_MISSED)), 67, libtcod.BKGND_NONE, libtcod.LEFT, ')')
    else:
        libtcod.console_print_ex(0, 39, 67, libtcod.BKGND_NONE, libtcod.LEFT, '   ')

    libtcod.console_print_ex(0, 22, 67, libtcod.BKGND_NONE, libtcod.LEFT, 'Story')

    libtcod.console_set_default_foreground(0, libtcod.white)

    #blit the contents of "panel" to the root console
    libtcod.console_blit(panel, 0, 0, SCREEN_WIDTH, 10, 0, 0, 56)

def message2(msg):
    global game_msgs2
    game_msgs2.append(msg)




def combat_message(x, y, line, color, keyword=False):
    global combat_msgs, combat_log, combat_keywords, clicked, COMBAT_MISSED
    #There is a total of 9 possible lines in the Output
    clicked += 1
    message = Message(x, y, line, color)
    
    
    if keyword == True:
        combat_keywords.append(message)
        COMBAT_MISSED -= 1
    combat_msgs.append(message) 

    COMBAT_MISSED += 1
    if keyword == False:
        for i in combat_msgs:
            i.y -= 1

            
            if i.y == 0:
                combat_log.append(i)
                combat_msgs.remove(i)
                if i in combat_keywords:
                    combat_keywords.remove(i)
def message(new_msg, color = libtcod.white):
    #split the message if necessary, among multiple lines
##    try:
##        test = int(new_msg)
##        return
##    except:
##        pass
    new_msg_lines = textwrap.wrap(new_msg, MSG_WIDTH)

    for line in new_msg_lines:
        #if the buffer is full, remove the first line to make room for the new one
        if len(game_msgs) == MSG_HEIGHT:
            del game_msgs[0]

        #add the new line as a tuple, with the text and the color
        game_msgs.append( (line, color) )

    return 1

#Used for creating messages to the Shop, such as saying that you have insufficient coin or the likes.
def equip_message(new_msg, color = libtcod.white, clear=False): 
    global equip_msgs







    if 'Armor Pen' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Armor Pen' in e:
                    return

    if 'Conceal Bonus' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Conceal Bonus' in e:
                    return

    if 'Range' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Range' in e:
                    return

    if 'Ammo Cost' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Ammo Cost' in e:
                    return

    if 'Spirit Res' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Spirit Res' in e:
                    return

    if 'Lightning Res' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Lightning Res' in e:
                    return

    if 'Cold Res' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Cold Res' in e:
                    return

    if 'Fire Res' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Fire Res' in e:
                    return

    if 'Str Scaling' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Str Scaling' in e:
                    return

    if 'Agi Scaling' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Agi Scaling' in e:
                    return

    if 'Weapon Max' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Weapon Max' in e:
                    return

    if 'Weapon Min' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Weapon Min' in e:
                    return

    if 'Block Bonus' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Block Bonus' in e:
                    return

    if 'Crit' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Crit' in e:
                    return

    if 'Armor' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Armor' in e:
                    return

    if 'Weight' in new_msg:
        for i in equip_msgs:
            for e in i:
                if 'Weight' in e:
                    return


    new_msg_lines = textwrap.wrap(new_msg, MSG_WIDTH)

    if clear == True:
        equip_msgs = []

    for line in new_msg_lines:
        #if the buffer is full, remove the first line to make room for the new one

        
        

        #add the new line as a tuple, with the text and the color
        equip_msgs.append( (line, color) )

    return 1

def shop_message(new_msg, color = libtcod.white): 
    global shop_msgs

    new_msg_lines = textwrap.wrap(new_msg, MSG_WIDTH)

    for line in new_msg_lines:
        #if the buffer is full, remove the first line to make room for the new one
        if len(shop_msgs) == 1:
            del shop_msgs[0]

        #add the new line as a tuple, with the text and the color
        shop_msgs.append( (line, color) )

    return 1

def craft_message(new_msg, color = libtcod.white): 
    global craft_msgs

    new_msg_lines = textwrap.wrap(new_msg, MSG_WIDTH)

    for line in new_msg_lines:
        #if the buffer is full, remove the first line to make room for the new one
        if len(craft_msgs) == 1:
            del craft_msgs[0]

        #add the new line as a tuple, with the text and the color
        craft_msgs.append( (line, color) )

    return 1
    

    

def player_move_or_attack(dx, dy, shield_slam=False):
    global fov_recompute, TORCH_RADIUS, MAP_HEIGHT, MAP_WIDTH, map, fov_map, objects

    #the coordinates the player is moving to/attacking
    x = player.x + dx
    y = player.y + dy
    damage = None

    
    try:
        if len(Buff.buffs > 0):
       
            for i in Buff.buffs:
                i.turns -= 1;
    except Exception as e:
        pass
    if len(player.fighter.Debuffs) > 0:
        for i in player.fighter.Debuffs:
            if i.Effect != None:
                i.Effect()
            if i.turns != None:
                i.turns -= 1
            if type(i.damage) == str:
                if i.damage == 'soul burn':
                    if float(player.fighter.hp)/float(player.fighter.max_hp) >= 0.5:
                        damage = int(player.fighter.hp/10)
                    else:
                        damage = int(player.fighter.hp/5)

            if damage != None:
                
                if player.fighter.hp > damage and i.Death != None:
                    player.fighter.hp -= damage
                    message('You take ' + str(damage) + ' damage from ' + i.name.capitalize() + '.', libtcod.red)
                elif i.Death == None:
                    player.fighter.hp -= damage
                    message('You take ' + str(damage) + ' damage from ' + i.name.capitalize() + '.', libtcod.red)
 
            else:
                if i.Death != None:
                    if player.fighter.hp > i.damage:
                        player.fighter.hp -= i.damage
                else:
                    player.fighter.hp -= i.damage

            if (damage == None and i.damage > 0) or damage != None:
                if player.fighter.Class == 'Warrior' and 'Off Talent 2' in player.fighter.event:
                    stamina_gain(stamina=5, factor=35)
                    

            if player.fighter.hp <= 0:
                player_death(player)
                return
                    
        for i in player.fighter.Debuffs:
            if i.turns == 0:
                player.fighter.Debuffs.remove(i)

    if Dungeon.Terrain_type == 'Wilderness':

        s = []
        
        s.append(str(x) + 'x')
        s.append(str(y) + 'y')
        
        if s not in Dungeon.explored:
            
            Dungeon.explored.append(s)

            for y in range(MAP_HEIGHT):
                for x in range(MAP_WIDTH):
      
                    visible = libtcod.map_is_in_fov(fov_map, x, y)

                    if visible:
                        Dungeon.Terrain_list.append(x)
                        Dungeon.Terrain_list2.append(y)
    #try to find an attackable object there
    target = None
    for object in objects:
        if object.fighter and object.x == x and object.y == y:
            target = object
            break
    
    #attack if target found, move otherwise
    if target is not None and shield_slam == True:
        
        
        player.fighter.attack(target, derp=True)
        player.fighter.event.remove('Shield Slam Hit')
        
        
    elif target is not None:
        player.fighter.attack(target)
        Dungeon.debuffs = get_debuffs_under_mouse(player.x + dx, player.y + dy)
    else:
        try:
            
            make_sound(player, sound_level2=3000)
        except Exception as e:
            print str(e)
        player.move(dx, dy, True)
            
        fov_recompute = True  
    
    for i in objects:
        try:
            if(i.name == "Lava"):    
                
                i.env(i.x, i.y)
        except Exception as e:
            print str("ERROR IN LAVA" + str(e))  
    

    for i in objects:
        if i.name == "Lava":
            despawn = libtcod.random_get_int(0, 1, 2)
            if(despawn < 2):
                objects.remove(i)            

    return True

def stamina_gain(stamina, factor, min_roll=0, max_roll=100):
    roll = libtcod.random_get_int(0, min_roll, max_roll)
    if roll <= factor:
        
        if player.fighter.Stamina < player.fighter.Max_stamina:
            message('You regain some stamina!', libtcod.yellow)
            if (player.fighter.Stamina - player.fighter.Max_stamina) <= -stamina:
                player.fighter.Stamina += stamina
            elif (player.fighter.Stamina - player.fighter.Max_stamina) > -stamina and (player.fighter.Stamina - player.fighter.Max_stamina) <= -1:
                player.fighter.Stamina += (player.fighter.Max_stamina - player.fighter.Stamina)

def reset_sounds():
    Sound.N = 0  
    Sound.W = 0  
    Sound.S = 0 
    Sound.E = 0
    
def wall_check(x, y, Special_Sound):
    standard = 100
    try:
        standard = Dungeon.wall[Dungeon.Terrain_type]
    except:
        try:
            Dungeon.wall[Dungeon.Terrain_type] = 100
        except:
            pass
    if map[x][y].blocked:
        
        if Special_Sound == 'e':
            try:
                if map[x][y].Thickness > standard:
                    Sound.E += map[x][y].Thickness
                else:
                    Sound.E += standard
            except:
                Sound.E += standard
            
            return Sound.E
        if Special_Sound == 'w':
            try:
                if map[x][y].Thickness > standard:
                    Sound.W += map[x][y].Thickness
                else:
                    Sound.W += standard
            except:
                Sound.W += standard
            return Sound.W
        if Special_Sound == 's':
            try:
                if map[x][y].Thickness > standard:
                    Sound.S += map[x][y].Thickness
                else:
                    Sound.S += standard
            except:
                Sound.S += standard
            return Sound.S
        if Special_Sound == 'n':
            try:
                if map[x][y].Thickness > standard:
                    Sound.N += map[x][y].Thickness
                else:
                    Sound.N += standard
            except:
                Sound.N += standard
            return Sound.N
            
    else:
        if Special_Sound == 'n':
            return Sound.N
        elif Special_Sound == 's':
            return Sound.S
        elif Special_Sound == 'w':
            return Sound.W
        elif Special_Sound == 'e':
            return Sound.E

def weather_sound(direction, distance, strength, factor):

    #Find a way to Reset Weather factors when going inside
    #Perhaps make a Boolean tied to Dungeon? Perhaps make it so that there is a Check on Map Tiles?
    #Figure something out!

    
    
    
    factor = strength
    factor -= 10 * distance
    
    factor += int(Weather.rain_strength/2.5) #Accounting for that someone walks in rain, their footsteps sounds more from walking in Water
    #And off-set it by the fact of that it's raining by itself
    factor -= int(Weather.thunder_strength)

    if Weather.wind_strength > 0:
        if direction == 'es': #Southern part of East
            if Weather.wind_direction == 'w' or Weather.wind_direction == 'nw':
                factor -= Weather.wind_strength
            elif Weather.wind_direction == 'e' or Weather.wind_direction == 'se' or weather.wind_direction == 'ne':
                if Weather.temprature > 0:
                    temp = Weather.temprature * (0.6/331.30) #Comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1+temp))
                    factor += factor
                elif Weather.temprature < 0:
                    temp = (-(Weather.temprature)) * (0.6/331.30) #comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1-temp))
                    factor += factor

        if direction == 'en': #Northern part of East
            if Weather.wind_direction == 'w' or Weather.wind_direction == 'sw' or Weather.wind_direction == 'nw':
                factor -= Weather.wind_strength
            elif Weather.wind_direction == 'e' or Weather.wind_direction == 'ne' or Weather.wind_direction == 'n':
                if Weather.temprature > 0:
                    temp = Weather.temprature * (0.6/331.30) #Comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1+temp))
                    factor += factor
                elif Weather.temprature < 0:
                    temp = (-(Weather.temprature)) * (0.6/331.30) #comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1-temp))
                    factor += factor

        if direction == 'ne': #Eastern part of north
            if Weather.wind_direction == 'sw' or Weather.wind_direction == 's' or Weather.wind_direction == 'se':
                factor -= Weather.wind_strength
            elif Weather.wind_direction == 'n' or Weather.wind_direction == 'ne' or Weather.wind_direction == 'nw' :
                if Weather.temprature > 0:
                    temp = Weather.temprature * (0.6/331.30) #Comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1+temp))
                    factor += factor
                elif Weather.temprature < 0:
                    temp = (-(Weather.temprature)) * (0.6/331.30) #comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1-temp))
                    factor += factor

        if direction == 'nw': #Western part of north
            if Weather.wind_direction == 'se' or Weather.wind_direction == 's' or Weather.wind_direction == 'e':
                factor -= Weather.wind_strength
            elif Weather.wind_direction == 'n' or Weather.wind_direction == 'w' or Weather.wind_direction == 'nw' :
                if Weather.temprature > 0:
                    temp = Weather.temprature * (0.6/331.30) #Comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1+temp))
                    factor += factor
                elif Weather.temprature < 0:
                    temp = (-(Weather.temprature)) * (0.6/331.30) #comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1-temp))
                    factor += factor

        if direction == 'wn': #Northern part of West
            if Weather.wind_direction == 'e' or Weather.wind_direction == 'se' or Weather.wind_direction == 'ne':
                factor -= Weather.wind_strength
            elif Weather.wind_direction == 'w' or Weather.wind_direction == 'sw' or Weather.wind_direction == 'nw' :
                if Weather.temprature > 0:
                    temp = Weather.temprature * (0.6/331.30) #Comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1+temp))
                    factor += factor
                elif Weather.temprature < 0:
                    temp = (-(Weather.temprature)) * (0.6/331.30) #comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1-temp))
                    factor += factor

        if direction == 'ws': #Southern part of West
            if Weather.wind_direction == 'ne' or Weather.wind_direction == 'e' or Weather.wind_direction == 'se':
                factor -= Weather.wind_strength
            elif Weather.wind_direction == 'w' or Weather.wind_direction == 'sw' or Weather.wind_direction == 'sw' :
                if Weather.temprature > 0:
                    temp = Weather.temprature * (0.6/331.30) #Comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1+temp))
                    factor += factor
                elif Weather.temprature < 0:
                    temp = (-(Weather.temprature)) * (0.6/331.30) #comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1-temp))
                    factor += factor

        if direction == 'se': #Eastern part of South
            if Weather.wind_direction == 'n' or Weather.wind_direction == 'ne' or Weather.wind_direction == 'nw':
                factor -= Weather.wind_strength
            elif Weather.wind_direction == 's' or Weather.wind_direction == 'se' or Weather.wind_direction == 'sw' :
                if Weather.temprature > 0:
                    temp = Weather.temprature * (0.6/331.30) #Comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1+temp))
                    factor += factor
                elif Weather.temprature < 0:
                    temp = (-(Weather.temprature)) * (0.6/331.30) #comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1-temp))
                    factor += factor

        if direction == 'sw': #western part of South
            if Weather.wind_direction == 'n' or Weather.wind_direction == 'ne' or Weather.wind_direction == 'e':
                factor -= Weather.wind_strength
            elif Weather.wind_direction == 's' or Weather.wind_direction == 'sw' or Weather.wind_direction == 'w' :
                if Weather.temprature > 0:
                    temp = Weather.temprature * (0.6/331.30) #Comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1+temp))
                    factor += factor
                elif Weather.temprature < 0:
                    temp = (-(Weather.temprature)) * (0.6/331.30) #comparing to 0 degrees
                    factor2 = int(Weather.wind_strength * (1-temp))
                    factor += factor
            
            
            

    return factor
        
        

def make_sound(self=None, x_cord2=None, y_cord2=None, sound_level2=0):
    global objects, MAP_HEIGHT, MAP_WIDTH, PASSED
    standard = 1000

    
    try:
        standard = Dungeon.move[Dungeon.Terrain_type]
    except:
        try:
            Dungeon.move[Dungeon.Terrain_type] = 1000
        except:
            pass

    if x_cord2 == None:
        if self != None:       
            if self.name != 'player':
                x_cord2 = self.x
            else:
                x_cord2 = player.x
    if y_cord2 == None:
        if self != None:       
            if self.name != 'player':
                y_cord2 = self.y
            else:
                y_cord2 = player.y

    south1 = sound_level2
    south2 = sound_level2
    
    north1 = sound_level2
    north2 = sound_level2
    north3 = sound_level2 #Straight up north
    
    west1 = sound_level2
    west2 = sound_level2
    
    east1 = sound_level2
    east2 = sound_level2
    

    x = 1
    
    if self.name == 'player':
        for y in range(0, player.y):
            
            if(is_blocked(player.x, player.y-y) and map[player.x][player.y-y].block_sight == True):
                try:
                    north3 -= map[player.x][player.y-y].Thickness
                except:
                    north3 -= 1000
            for e in objects:
                if (e.x == player.x and e.y == (player.y - y)):
                    try:
                        if(north3 >= e.hear):
                            
                            #Implement a ripple effect to display graphics of sound spreading when moving, in terms of Sneaking
                            e.Memory[0] = Memory(player.x, player.y, 10) #Make a PH for 10 seconds memory, bind it to reflect memory of specific mobs
                            #Put in hiding capacity related to conceal factor and stealth, and make a decay for memory relative to patrol patterns
                            #and only in Stealth mode activated
    ##                        current_dist = i.distance_to(player)
    ##                        print str(current_dist) + " THIS IS CURRENT DIST"
                            e.move_towards(e.Memory[0].x, e.Memory[0].y) 
                            print "My memory is: " + str(e.Memory[0])
                            print "It has a duration of " + str(e.Memory[0].duration)

                            
                            print e.name + " heard you at the sound level of " + str(north3) + " and hearing of" + str(e.hear)
                    except Exception as e:
                        print "error in north hearing: " + str(e)
    try:
        
        for y in range(1, y_cord2): #This is from (The Source of the Sound + 1 Up) to The Top of the Screen going East.
            reset_sounds() #Resets the Sounds every new row

            #for i2 in range(0, (MAP_WIDTH-x_cord2)):
            
            for i2 in range(0, MAP_WIDTH-x_cord2): #From the Source of the Sound, to the East Side Limit of the Screen
                
                    
                east1 = sound_level2 - (10 * (i2))
                
                if (x_cord2+i2+y) < MAP_WIDTH - 1 and (y_cord2-y) > 0: #Since this is for Upwards, we put a - on the Y instead.
                    distance = special_move(x_cord2+i2+y, y_cord2-y, x_cord2, y_cord2) #- On the Y_cord2 for going Upwards

                    thing = weather_sound('en', distance, east1, east1)
                    east1 = thing
                    
                    east1 -= wall_check(x_cord2+i2+y, y_cord2-y, 'e') #Checks for Walls and Returns based on Direction WORKS
                    object_check(self, x_cord2+i2+y, y_cord2-y, sound_level = east1, direction='E')

                east1 = sound_level2 - (10 * i2)
    except Exception as e:
                message(str(e) + ' ERROR')



    for y in range(1, (MAP_HEIGHT-y_cord2)): #This is for From (The Source of the Sound + 1 Down) to Bottom of the Screen going East.
        reset_sounds()
        for i2 in range(0, (MAP_WIDTH-x_cord2)): #From The Source of The Sound, to the East Side Limit of the Screen
            east2 = sound_level2 - (10 * (i2))
            if (x_cord2+i2+y) < MAP_WIDTH - 1 and (y_cord2+y) < MAP_HEIGHT: #Since this is for Downwards, we put a + on the Y instead.
                distance = special_move(x_cord2+i2+y, y_cord2+y, x_cord2, y_cord2)
                thing = weather_sound('es', distance, east2, east2)
                east2 = thing

                east2 -= wall_check(x_cord2+i2+y, y_cord2+y, 'e') #Checks for Sounds and Returns based on Direction WORKS
                

                object_check(self, x_cord2+i2+y, y_cord2+y, sound_level = east2, direction='E')

            east2 = sound_level2 - (10 * i2) 

    for y in range(1, y_cord2): #This is from (The source of the Sound + 1 Up) to the Top of the Screen going West.
        reset_sounds()
        for i2 in range(0, x_cord2): #From the Source of the Sound, to the West Side limit of the Screen
            west1 = sound_level2 - (10 * (i2))
            if (x_cord2-i2-y) > 0 and (y_cord2-y) > 0: #This is Up, so - On the Y and Since we are going left, we do X-Cord2 - i2 - y (checking for Left)
                #^^^ The reason for checking against 0 is due to going upwards and going to the West side of the map
                distance = special_move(x_cord2-i2-y, y_cord2-y, x_cord2, y_cord2) #WORKS
                
                thing = weather_sound('wn', distance, west1, west1)
                west1 = thing

                west1 -= wall_check(x_cord2-i2-y, y_cord2-y, 'w')
                object_check(self, x_cord2-i2-y, y_cord2-y, sound_level = west1, direction='W')

    for y in range(1, (MAP_HEIGHT-y_cord2)): #This is from (The Source of the Sound + 1 Down) to the Bottom of the Screen going West.
        reset_sounds()
        for i2 in range(0, x_cord2): #From the Source of the Sound, to the West Side Limit of the Screen
            west2 = sound_level2 - (10 * (i2))
            if (x_cord2-i2-y) > 0 and (y_cord2+y) < MAP_HEIGHT: #Since this is for Downwards, we put a + on the Y instead
            #We also put a check against 0 on the X_cord2 due to checking against West Side of the Map #WORKS
                distance = special_move(x_cord2-i2-y, y_cord2+y, x_cord2, y_cord2)
                thing = weather_sound('ws', distance, west2, west2)
                west2 = thing
                west2 -= wall_check(x_cord2-i2-y, y_cord2+y, 'w') #+y for Downwards, -i2 for West
                object_check(self, x_cord2-i2-y, y_cord2+y, sound_level = west2, direction='W')


    for i in range(0, (MAP_WIDTH-x_cord2)): #This is from (The Source of the Sound + 1 Down and 1 to the Right) to the Bottom of the Screen going South.
        reset_sounds()
        for y in range(i, (MAP_HEIGHT-y_cord2)): #From the Source of the Sound, to the South Side Limit of the Screen
            south1 = sound_level2 - (10 * (y))
        
            
            if x_cord2+i+1 < MAP_WIDTH and y_cord2+y+1 < MAP_HEIGHT: #Checking to the right, so i is + and y is + for checking downwards
                distance = special_move(x_cord2+i+1, y_cord2+y+1, x_cord2, y_cord2) #Going South + East #WORKS

                thing = weather_sound('se', distance, south1, south1)
                south1 = thing

                south1 -= wall_check(x_cord2+i+1, y_cord2+y+1, 's')
                
                object_check(self, x_cord2+i+1, y_cord2+y+1, sound_level = south1, direction='S')

    for i in range(0, x_cord2-1): #Going South + West
    
        reset_sounds()
        
        for y in range(i, (MAP_HEIGHT-y_cord2)):
            south2 = sound_level2 - (10 * (y))
            

            if x_cord2-i-1 > 0 and y_cord2+y+1 < MAP_HEIGHT:
                distance = special_move(x_cord2-i-1, y_cord2+y+1, x_cord2, y_cord2) #WORKS

                thing = weather_sound('sw', distance, south2, south2)
                south2 = thing

                south2 -= wall_check(x_cord2-i-1, y_cord2+y+1, 's')
                
                object_check(self, x_cord2-i-1, y_cord2+y+1, sound_level = south2, direction = 'S')


    for i in range(1, x_cord2): #North + West
        reset_sounds()
        for y in range(i, y_cord2):
            north1 = sound_level2 - (10 * (y))
            if x_cord2-i > 0 and y_cord2-y > 0:
                distance = special_move(x_cord2-i, y_cord2-y, x_cord2, y_cord2) #WORKS
                thing = weather_sound('nw', distance, north1, north1)
                north1 = thing
                north1 -= wall_check(x_cord2-i, y_cord2-y, 'n')
                
                object_check(self, x_cord2-i, y_cord2-y, sound_level = north1, direction = 'N')

    for i in range(0, (MAP_WIDTH-x_cord2)):
        reset_sounds()
        for y in range(i, y_cord2):
            north2 = sound_level2 - (10 * (y))
            if x_cord2+i < MAP_WIDTH and y_cord2-y-1 > 0:
                distance = special_move(x_cord2+i+1, y_cord2-y, x_cord2, y_cord2) #Works
                thing = weather_sound('ne', distance, north2, north2)
                north2 = thing
                north2 -= wall_check(x_cord2+i+1, y_cord2-y-1, 'n')
                
                object_check(self, x_cord2+i+1, y_cord2-y-1, sound_level = north2, direction='N')
    PASSED = False
          
def object_check(self, x_cord=None,y_cord=None, direction=None, sound_level=0):
    global objects, map, PASSED, mouse, player
    

    if sound_level < 0:
        sound_level = 0
    map[x_cord][y_cord].white_decoration = True
    map[x_cord][y_cord].colour2 = sound_level/5 + 50
    map[x_cord][y_cord].colour3 = sound_level/5 + 50

    
    
    for i in objects:
        
        if(i.x == x_cord and i.y == y_cord):
            if(i.name == "Clever Barrel"):
                print "My name, is Barrel"
            try:
                if(i.name == "Clever Barrel"):
                    if(sound_level > i.hear and PASSED == False): #BEEP MEEP MEEP
                        
                        i.Memory[0] = Memory(x = player.x, y = player.y, duration = 10) #Ph 10 seconds, make relative to memory span of mob

                        #Make a check against wether the Mob actually sees the player or not
                        if(i.Memory[1] == 0):
                            print "Here1"
                             #Append a PH value to just fill out the array
                            i.Memory[1] = Memory(duration=10, playerClass=player.fighter.Class) #Assign the value to be that the mob registers what class you are 
                        if(i.Memory[2] == 0):
                            print "Here2"
                            i.Memory[2] = Memory(duration=10, level=player.level) #Assign a value of level, to which the NPC observed
                        if(i.Memory[3] == 0):
                            print "Here3"
                            i.Memory[3] = Memory(duration=10, power_level=player.fighter.power_level) #The power level of a collective of quick guise of how the AI judges you to be
                            #This means that it collectively summarizes your gear and depending on intelligence, misjudges a bit intenitonally or more accurately predicts
                            #Will only run against Inventory summarized stuff
                        if(i.Memory[4] == 0):
                            print "Here4"
                            i.Memory[4] = Memory(duration=10, standing=(Dungeon.reputations[i.faction]))
                            print "Here5" #Fix handling of case of reputation not existing with given standing of non-faction mob

                            #The standing defines to wether you are a friendly, or not. If you are a friendly, you can be hailed or not attacked.
                            #If you are a Neutral, you may be questioned or prompted to speak to them.
                            #If you are a hostile, they will attack on sight.
                            #if you are a Hated target, they will summon reinforcements to kill you.
                        

                        i.move_towards(i.Memory[0].x, i.Memory[0].y) 
                        #Figure out attributes to implement into memory.
                        #Long term events

                        
                        print i.name + " heard you at the sound level of " + str(sound_level) + " with " + str(direction) + " direction and hearing of" + str(i.hear)
                        print "--------------------------------------------"
                    else:
                        print "TOOK SECOND PATH OF MOVING"
                        self.move(x, y+1)
                        i.move_towards(i.Memory[0].x, i.Memory[0].y) 
            except Exception as e:
                print "ERROR IN OBJECT CHECK " + str(e)
    if self != None:
        if y_cord == player.y and x_cord == player.x and PASSED == False:
            PASSED = True
def item_editor():
    img = libtcod.image_load('black_background.png')

    libtcod.image_blit_2x(img, 0, 50, 0, sx=0, sy=0, w=-1, h=-1)

    window = libtcod.console_new(110, 90)

    current_string = ''
    
    designated_x = 0
    designated_y = 0

    poop = None



    icon = 'T'
    RED = 255
    GREEN = 255
    BLUE = 255
    colour = libtcod.Color(RED,GREEN,BLUE)

    NAMING = False
    RARITY = False
    
    defense = 0.0
    weight = 0.0
    crit=0
    to_crit=0
    block_bonus=0
    weapon_min=0
    weapon_max=0
    weapon_agi=0
    weapon_str=0
    fire=0
    ice=0
    lightning=0
    spirit=0
    ammo=0
    ammo_cost=0
    fire_range=0
    Conceal_Bonus=0
    armor_pen=0
    worth=0
    quantity=0
    amount=1
    index=0
    rarity=''
    fire_mode=''
    name=''
    readable='no'
    weapon_type=''
    slot='None'
    is_equipped='False'
    use_function='None'
    eat_function='None'
    read_function='None'
    damage = 0

    
            


    libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
    

    #present the root console to the player and wait for a key-press
    libtcod.console_flush()

    while poop == None:
        libtcod.console_clear(window)

        libtcod.console_print_ex(window, 50, 2, libtcod.BKGND_NONE, libtcod.LEFT, 'Rarity: ' + str(RARITY) + " Naming: " + str(NAMING))

        for i in range(10, 61):
            if i % 2 == 0:
                libtcod.console_print_ex(window, 30, i, libtcod.BKGND_NONE, libtcod.LEFT, '-')
        for i in range(10, 61):
            if i % 2 == 0:
                libtcod.console_print_ex(window, 28, i, libtcod.BKGND_NONE, libtcod.LEFT, '+')


        damage_min = (weapon_min + fire + ice + lightning + spirit)
        damage_max = ((weapon_max + fire + ice + lightning + spirit)) * (1.0 + ((to_crit/100.0) * crit/100))

        damage = (damage_min + damage_max)/2.0

        if defense != 0 and weight != 0:
            libtcod.console_print_ex(window, 85, 2, libtcod.BKGND_NONE, libtcod.LEFT, 'Def/Wt:' + str(defense/weight))
        
        libtcod.console_print_ex(window, 5, 8, libtcod.BKGND_NONE, libtcod.LEFT, 'Avg Dmg=' + str(damage) + " max: " + str(damage_max) + " min: " + str(damage_min))
        libtcod.console_print_ex(window, 5, 10, libtcod.BKGND_NONE, libtcod.LEFT, 'defense_bonus=' + str(defense))
        libtcod.console_print_ex(window, 6, 12, libtcod.BKGND_NONE, libtcod.LEFT, 'weight=' + str(weight))
        libtcod.console_print_ex(window, 5, 14, libtcod.BKGND_NONE, libtcod.LEFT, 'crit modifier=' + str(crit))
        libtcod.console_print_ex(window, 5, 16, libtcod.BKGND_NONE, libtcod.LEFT, 'to_crit=' + str(to_crit))
        libtcod.console_print_ex(window, 5, 18, libtcod.BKGND_NONE, libtcod.LEFT, 'block_bonus=' + str(block_bonus))
        libtcod.console_print_ex(window, 5, 20, libtcod.BKGND_NONE, libtcod.LEFT, 'weapon_min=' + str(weapon_min))
        libtcod.console_print_ex(window, 5, 22, libtcod.BKGND_NONE, libtcod.LEFT, 'weapon_max=' + str(weapon_max))
        libtcod.console_print_ex(window, 5, 24, libtcod.BKGND_NONE, libtcod.LEFT, 'weapon_agi=' + str(weapon_agi))
        libtcod.console_print_ex(window, 5, 26, libtcod.BKGND_NONE, libtcod.LEFT, 'weapon_str=' + str(weapon_str))
        libtcod.console_print_ex(window, 5, 28, libtcod.BKGND_NONE, libtcod.LEFT, 'fire=' + str(fire))
        libtcod.console_print_ex(window, 5, 30, libtcod.BKGND_NONE, libtcod.LEFT, 'ice=' + str(ice))
        libtcod.console_print_ex(window, 5, 32, libtcod.BKGND_NONE, libtcod.LEFT, 'lightning=' + str(lightning))
        libtcod.console_print_ex(window, 5, 34, libtcod.BKGND_NONE, libtcod.LEFT, 'spirit=' + str(spirit))
        libtcod.console_print_ex(window, 5, 36, libtcod.BKGND_NONE, libtcod.LEFT, 'ammo=' + str(ammo))
        libtcod.console_print_ex(window, 5, 38, libtcod.BKGND_NONE, libtcod.LEFT, 'ammo_cost=' + str(ammo_cost))
        libtcod.console_print_ex(window, 5, 40, libtcod.BKGND_NONE, libtcod.LEFT, 'fire_range=' + str(fire_range))
        libtcod.console_print_ex(window, 5, 42, libtcod.BKGND_NONE, libtcod.LEFT, 'Conceal_Bonus=' + str(Conceal_Bonus))
        libtcod.console_print_ex(window, 5, 44, libtcod.BKGND_NONE, libtcod.LEFT, 'armor_pen=' + str(armor_pen))
        libtcod.console_print_ex(window, 5, 46, libtcod.BKGND_NONE, libtcod.LEFT, 'worth=' + str(worth))
        libtcod.console_print_ex(window, 5, 48, libtcod.BKGND_NONE, libtcod.LEFT, 'quantity=' + str(quantity))
        libtcod.console_print_ex(window, 5, 50, libtcod.BKGND_NONE, libtcod.LEFT, 'amount=' + str(amount))
        libtcod.console_print_ex(window, 5, 52, libtcod.BKGND_NONE, libtcod.LEFT, 'index=' + str(index))
        libtcod.console_print_ex(window, 5, 54, libtcod.BKGND_NONE, libtcod.LEFT, 'rarity=' + str(rarity))
        libtcod.console_print_ex(window, 5, 56, libtcod.BKGND_NONE, libtcod.LEFT, 'fire_mode=' + str(fire_mode))
        libtcod.console_print_ex(window, 5, 58, libtcod.BKGND_NONE, libtcod.LEFT, 'name=' + str(name))
        libtcod.console_print_ex(window, 5, 60, libtcod.BKGND_NONE, libtcod.LEFT, 'readable=' + str(readable))
        libtcod.console_print_ex(window, 50, 10, libtcod.BKGND_NONE, libtcod.LEFT, 'weapon_type=' + str(weapon_type))
        libtcod.console_print_ex(window, 50, 12, libtcod.BKGND_NONE, libtcod.LEFT, 'slot=' + str(slot))
        libtcod.console_print_ex(window, 50, 14, libtcod.BKGND_NONE, libtcod.LEFT, 'is_equipped=' + str(is_equipped))
        libtcod.console_print_ex(window, 50, 16, libtcod.BKGND_NONE, libtcod.LEFT, 'use_function=' + str(use_function))
        libtcod.console_print_ex(window, 50, 18, libtcod.BKGND_NONE, libtcod.LEFT, 'eat_function=' + str(eat_function))
        libtcod.console_print_ex(window, 50, 20, libtcod.BKGND_NONE, libtcod.LEFT, 'read_function=' + str(read_function))

        libtcod.console_print_ex(window, 50, 41, libtcod.BKGND_NONE, libtcod.LEFT, 'CREATE')

        
       

        libtcod.console_print_ex(window, 5, 2, libtcod.BKGND_NONE, libtcod.LEFT, 'Item Editor')
        libtcod.console_print_ex(window, 5, 5, libtcod.BKGND_NONE, libtcod.LEFT, "Current String is: " + current_string)
        libtcod.console_print_ex(window, 5, 4, libtcod.BKGND_NONE, libtcod.LEFT, "Designated X/Y is: " + str(designated_x) + " X, " + str(designated_y) + " Y.")
        libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
        libtcod.console_flush()
            
        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)
        

        (mouse_x, mouse_y) = (mouse.cx, mouse.cy)
        key_char = chr(key.c)

        if ord(key_char) != 0 and ord(key_char) != 27:
            
            if ord(key_char) == 8 and len(current_string) > 0:
                
                current_string = current_string[:-1]

            elif ord(key_char) != 8:
                current_string += str(key_char)
            libtcod.console_print_ex(window, 5, 5, libtcod.BKGND_NONE, libtcod.LEFT, "Current String is: " + current_string + " ")


            
            
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if mouse.lbutton_pressed:
            if mouse_x >= 50 and mouse_x <= 56 and mouse_y == 41:

                file = open("items.txt", "a")


                file.write("part = Item(defense_bonus=" + str(int(defense)) + ", weight=" + str(int(weight)) +", crit=" + str(crit) +
                           ", to_crit=" + str(to_crit) + ", block_bonus=" + str(block_bonus) + ", weapon_min=" + str(weapon_min) + ",weapon_max=" + str(weapon_max) +
                           ", weapon_agi=" + str(weapon_agi) + ", " + str(weapon_str) + ", " + str(fire) + ", " + str(ice) + ", " + str(lightning) + ", " + str(spirit) + ", " + str(ammo) + ", " +
                           str(ammo_cost) + ", " + str(fire_range) + ", " + str(Conceal_Bonus) + ", " + str(armor_pen) + ", " + str(worth) + ", " + str(quantity) + ", " + str(amount) + ", " +
                           str(index) + ", " + str(rarity) + ", " + str(fire_mode) + "," + name + "," + readable + ", " + weapon_type + "," +  slot + "," + is_equipped + "," +
                           use_function + ", " + eat_function + "," + read_function+ ")\n")
                file.write("obj = Object(" + str(0) + ", " + str(0) + ", " + icon + ", " + name + ", " + str(colour) + ", " + slot + ", " + str(weight) + "," + weapon_type + "," + "item=part\n\n")

                file.close()
                

                
            

           
            if mouse_x % 2 == 0 and mouse_x >= 10 and mouse_x <= 60 and mouse.lbutton_pressed:
                if mouse_x == 28 and mouse.lbutton_pressed:
                    if mouse_y == 10 and mouse.lbutton_pressed:
                        defense += 1
                    if mouse_y == 12 and mouse.lbutton_pressed:
                        weight += 10
                    if mouse_y == 14 and mouse.lbutton_pressed:
                        crit += 1
                    if mouse_y == 16 and mouse.lbutton_pressed:
                        to_crit += 1
                    if mouse_y == 18 and mouse.lbutton_pressed:
                        block_bonus += 1
                    if mouse_y == 20 and mouse.lbutton_pressed:
                        weapon_min += 1
                        weapon_max += 1
                    if mouse_y == 22 and mouse.lbutton_pressed:
                        weapon_max += 1
                    if mouse_y == 24 and mouse.lbutton_pressed:
                        weapon_agi += 1
                    if mouse_y == 26 and mouse.lbutton_pressed:
                        weapon_str += 1
                    if mouse_y == 28 and mouse.lbutton_pressed:
                        fire += 1
                    if mouse_y == 30 and mouse.lbutton_pressed:
                        ice += 1
                    if mouse_y == 32 and mouse.lbutton_pressed:
                        lightning += 1
                    if mouse_y == 34 and mouse.lbutton_pressed:
                        spirit += 1
                    if mouse_y == 36 and mouse.lbutton_pressed:
                        ammo += 1
                    if mouse_y == 38 and mouse.lbutton_pressed:
                        ammo_cost += 1
                    if mouse_y == 40 and mouse.lbutton_pressed:
                        fire_range += 1
                    if mouse_y == 42 and mouse.lbutton_pressed:
                        Conceal_Bonus += 1
                    if mouse_y == 44 and mouse.lbutton_pressed:
                        armor_pen += 1
                    if mouse_y == 46 and mouse.lbutton_pressed:
                        worth += 1
                    if mouse_y == 48 and mouse.lbutton_pressed:
                        quantity += 1
                    if mouse_y == 50 and mouse.lbutton_pressed:
                        amount += 1
                    if mouse_y == 52 and mouse.lbutton_pressed:
                        index += 1
                        
                if mouse_x == 30 and mouse.lbutton_pressed:
                    if mouse_y == 10 and mouse.lbutton_pressed:
                        defense -= 1
                    if mouse_y == 12 and mouse.lbutton_pressed:
                        weight -= 10
                    if mouse_y == 14 and mouse.lbutton_pressed:
                        crit -= 1
                    if mouse_y == 16 and mouse.lbutton_pressed:
                        to_crit -= 1
                    if mouse_y == 18 and mouse.lbutton_pressed:
                        block_bonus -= 1
                    if mouse_y == 20 and mouse.lbutton_pressed:
                        weapon_min -= 1
                    if mouse_y == 22 and mouse.lbutton_pressed:
                        weapon_max -= 1
                    if mouse_y == 24 and mouse.lbutton_pressed:
                        weapon_agi -= 1
                    if mouse_y == 26 and mouse.lbutton_pressed:
                        weapon_str -= 1
                    if mouse_y == 28 and mouse.lbutton_pressed:
                        fire -= 1
                    if mouse_y == 30 and mouse.lbutton_pressed:
                        ice -= 1
                    if mouse_y == 32 and mouse.lbutton_pressed:
                        lightning -= 1
                    if mouse_y == 34 and mouse.lbutton_pressed:
                        spirit -= 1
                    if mouse_y == 36 and mouse.lbutton_pressed:
                        ammo -= 1
                    if mouse_y == 38 and mouse.lbutton_pressed:
                        ammo_cost -= 1
                    if mouse_y == 40 and mouse.lbutton_pressed:
                        fire_range -= 1
                    if mouse_y == 42 and mouse.lbutton_pressed:
                        Conceal_Bonus -= 1
                    if mouse_y == 44 and mouse.lbutton_pressed:
                        armor_pen -= 1
                    if mouse_y == 46 and mouse.lbutton_pressed:
                        worth -= 1
                    if mouse_y == 48 and mouse.lbutton_pressed:
                        quantity -= 1
                    if mouse_y == 50 and mouse.lbutton_pressed:
                        amount -= 1
                    if mouse_y == 52 and mouse.lbutton_pressed:
                        index -= 1
                    if mouse_y == 54 and mouse.lbutton_pressed:
                        print RARITY

                        if RARITY == True:
                            RARITY = False
                        elif RARITY == False:
                            RARITY = True
                    if mouse_y == 56 and mouse.lbutton_pressed:
                        pass
                        #Fire_mode
                    if mouse_y == 58 and mouse.lbutton_pressed:
                        

                        if NAMING == True:
                            NAMING = False
                        elif NAMING == False:
                            NAMING = True
                        
                        #name
                    if mouse_y == 60:
                        pass
                        #readable

                    libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
                    libtcod.console_flush()
                    
                

            

            if mouse_x >= 50 and mouse_x <= 55 and mouse_y == 41:
                print "temp"
                #Implement Creation of all summarized attributes of the item.

            designated_x = mouse_x
            designated_y = mouse_y
            libtcod.console_print_ex(window, 5, 4, libtcod.BKGND_NONE, libtcod.LEFT, "Designated X/Y is: " + str(designated_x) + " X, " + str(designated_y) + " Y.")
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if key.vk == libtcod.KEY_ENTER:
            current_string = current_string[:-1]
            

            if NAMING == True:
                name = current_string
                libtcod.console_print_ex(window, 12 , 58, libtcod.BKGND_NONE, libtcod.LEFT, current_string)
            if RARITY == True:
                rarity = current_string
                libtcod.console_print_ex(window, 12 , 54, libtcod.BKGND_NONE, libtcod.LEFT, current_string)

            if RARITY == False and NAMING == False:
                libtcod.console_print_ex(window, designated_x , designated_y, libtcod.BKGND_NONE, libtcod.LEFT, current_string)
            


            file = open("testing.txt", "a")


            file.write("libtcod.console_print_ex(window, " + str(designated_x) + ", " + str(designated_y) + ", libtcod.BKGND_NONE, libtcod.LEFT, '" + str(current_string) + "')\n")

            file.close()
            
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

def write_loot():

    Warlock_list = ["Dagger", "Staff", "Off-hand", "Demonic", "Sword", "Mace", "Shield"]

    Warrior_list = ["Axe", "Sword", "Dagger", "Mace", "Hammer", "Flail", "Halberd", "GreatSword", "Shield", "Long Sword", "Broad Sword"]

    
    Base_Weight = {"Axe": 100, "Sword": 75, "Dagger": 10, "Staff": 40, "Mace": 110, "Hammer": 130, "Flail": 90, "Halberd": 200, "Greatsword": 175, "Long Sword":90, "Broad Sword":95,
                        "Off-hand":50, "Demonic": 25, "Shield": 35}
    
    
    Base_Damage = {"Axe": [1, 6], "Sword": [1, 5], "Dagger": [1, 4], "Staff": [1,8], "Mace": [1, 7], "Hammer": [1, 8], "Flail":[2, 5], "Halberd":[3, 11], "Greatsword":[4, 10],
                        "Long Sword":[2, 7], "Broad Sword": [3, 8]}
    Metals_Weight = {"Steel": 1.30, "Silver": 1.15, "Gold":1.10, "Mithril":1.25, "Thorium":1.35, "Flamenberg": 1.5, "Lead": 2.0, "Solrius": 1.66, "Thundagrius":0.9, "Lightsteel": 0.75,
                        "Rivarium":1.75}
    
    Metals_min_damage = {"Steel": [1,3], "Silver": [0,2], "Gold": [1,5], "Mithril": [2, 6], "Thorium": [2, 8], "Flamenberg": [0, 6], "Lead": [2, 6], "Solrius": [2,4], "Thundagrius": [-5, -1]
                                , "Lightsteel": [-3, -1], "Rivarium": [-1, 1]}
    Metals_max_damage = {"Steel": [2, 6], "Silver": [2, 5], "Gold": [3, 7], "Mithril": [3, 11], "Thorium": [3, 13], "Flamenberg": [2, 10], "Lead": [6, 9], "Solrius": [3, 11], 
                            "Thundagrius": [1, 19], "Lightsteel": [1, 7], "Rivarium": [1, 9]}
    
    Modifications = {"Bloodthirsty": [1,5], "Weak": [-3, -6], "Thundering": [-5, 10], "Silent": -4, "Freezing": [2, 5], "Burning": [3, 6]}

    Axe_Subtypes_Dmg = {"Short": [1, 3], "Long": [1, 5], "Bearded": [2, 6], "Runed": [3, 7], "Ancient": [4, 8], "Forgotten":[5, 10]}

    Sword_Subtypes_Dmg = {"Short":[1,3],"Long":[1, 5], "Twisted": [2, 8], "Duelist": [1, 10], "Ancient": [3, 12], "Forgotten":[5, 15]}

    Dagger_Subtypes_Dmg = {"Curved":[1,3], "Sacrificial":[1, 6], "Corrupt": [1, 9], "Relic": [0, 12], "Ancient": [3, 14], "Forgotten":[4, 17]}
    
    Staff_Subtypes_Dmg = {"Wooden":[0,2], "Oak":[0,4], "Ashen":[2,6], "Spirit-Wood":[3, 8], "Ancient":[4, 11], "Forgotten":[5,13]}

    Mace_Subtypes_Dmg = {"Unbalanced":[-1, 4], "Wieldy": [1, 5], "Weighted": [3, 7], "Tempered": [4, 9], "Forged":[6, 12], "Forgoten":[7, 14]}

    Hammer_Subtypes_Dmg = {"Clunky":[-2, 5], "Unwieldy": [0, 7], "Weighted": [2, 9], "Kvaldir": [3, 11], "Ancient": [5, 14], "Forgotten": [7, 16]}
    
    Flail_Subtypes_Dmg = {"Unweighted":[-3, 7], "Unbalanced": [0, 9], "Flogging": [2, 12], "Spiked": [4, 15], "Ancient": [5, 20], "Forgotten": [6, 21]}
    
    Halberd_Subtypes_Dmg = {"Flimsy": [1, 20], "Shoddy": [3, 25], "Two-Headed": [4, 30], "Hydra": [10, 20], "Swirling": [20, 30], "Crystal": [30, 40]}
    
    #Axe, Sword, Dagger, Staff, Mace, Hammer, Flail, Halberd, Greatsword, Long Sword, Broad Sword, Off-hand, Demonic, Shield

    Greatsword_Subtypes_Dmg = {"Crude": [1, 15], "Grimy": [1, 20], "Barbaric": [3, 33], "Orcish": [5, 38], "Ogre": [7, 42], "Crystal": [10, 50]}
    
    Longsword_Subtypes_Dmg = {"Tarnished": [1, 8], "Worn": [2, 15], "Sturdy": [4, 19], "Battleworn": [7, 22], "Sharpened": [9, 33], "Crystal": [13, 44]}
    
    Broadsword_Subtypes_Dmg = {"Dulled": [2, 10], "Curved": [3, 13], "Warped": [5, 16], "Twisted": [8, 22], "Bladed": [10, 27], "Crystal": [13, 33]}
    
    Offhand_Subtypes_Dmg = {"Accuracy": [0, 15], "Stealth": [5, 15], "Regen": [3, 10], "Armor": [5, 10], "Hp": [20, 40], "Disguise": [1, 10]}

    Demonic_Subtypes_Dmg = {"Demonic Cords": {"Range": 5, "Armor": -10, "Damage": [10, 30], "Accuracy": [0, 10]}, 
                                    "Iron Maiden Gloves": {"Armor": 10, "Damage": [5, 10], "Skills": {"1": "Rend", "2": "Tear"}, "Accuracy": [-10, 0]},
                                    "Mind Warper": {"Range": 10, "Damage": [1, 5], "Skills": {"1": "Push", "2": "Pull"}, "Corruption": 30},
                                    "Blind Hatred": {"Hp": 0.5 #half hp
                                                        , "Damage": 2.0 #Double damage
                                                        , "Range": -3,
                                                        "Armor": -5},
                                    "Burden of Stone": {"Hp": 1.5,
                                                            "Armor": 10,
                                                            "Speed": 0.75 #reduce speed by 25%
                                                            },
                                    "Burning Fury": {"Hp": 0.9, #Passively ignites area around you
                                                        "Skills": {"1": "Immolate"},
                                                        "Range": 3},
                                    "Terrible Strength": {"Str": 5,
                                                            "Skills": {"1": "Pulverize" #Can break walls
                                                            }
                                    }}
   
    print(str(Demonic_Subtypes_Dmg["Demonic Cords"]))
    #Make it so that each corruption has abilities related to them, costing or expending corruption
    #look into hotkeys binding it
    #cba to work on this at the moment
    

    

    

    
    
    #item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
    #                                          defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
    #                      weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
    #obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)

    #file = open("testing.txt", "a")


    #file.write("libtcod.console_print_ex(window, " + str(designated_x) + ", " + str(designated_y) + ", libtcod.BKGND_NONE, libtcod.LEFT, '" + str(current_string) + "')\n")

    #file.close()
    
def encyclopedia(header, width, keyword, optional_color=None):
    img = libtcod.image_load('black_background.png')

    libtcod.image_blit_2x(img, 0, 50, 0, sx=0, sy=0, w=-1, h=-1)

    #calculate total height for the header (after auto-wrap) and one line per option
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0
    try:
        height = len(keyword.string) + header_height
    except:
        height = len(keyword) + header_height

    #create an off-screen console that represents the menu's window
    window = libtcod.console_new(110, 90)

    #print the header, with auto-wrap
    

    libtcod.console_print_rect_ex(window, 45, 15, width, height, libtcod.black, libtcod.LEFT, "Keyword: ")
    if optional_color == None:
        
        
        libtcod.console_set_default_foreground(window, keyword.color)
    else:
        libtcod.console_set_default_foreground(window, optional_color)
    libtcod.console_print_rect_ex(window, 45+len("Keyword: "), 15, width, height, libtcod.black, libtcod.LEFT, header)
    libtcod.console_set_default_foreground(window, libtcod.white)
    
    for i in range(30, SCREEN_WIDTH-20):
        libtcod.console_print_ex(window, i, 16, libtcod.BKGND_NONE, libtcod.LEFT, "-")
    #print all the options
    y = 20
    
##    libtcod.console_set_default_foreground(window, keyword.color)
##    libtcod.console_print_ex(window, 32, 18, libtcod.BKGND_NONE, libtcod.LEFT, keyword.string)
##    libtcod.console_set_default_foreground(window, libtcod.white)
    y += 1
    
    for i in range(10, SCREEN_HEIGHT-10):
        libtcod.console_print_ex(window, 30, i, libtcod.BKGND_NONE, libtcod.LEFT, '|')

    #Elemental Damage 57 18, Damage, Fully Resistable 39, 19, Dragonfire 32 24, Demonfire 32 26, Hellfire 32 28, Fire Resistance 58 31
    #Quenching Potion 71 34, Water Damage 39 36, Dungeons 53 39, Weather effects 66, 39
    #FIRE DAMAGE PAGE

    if header == "Frost Damage":

        libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
        libtcod.console_print_ex(window, 45, 13, libtcod.BKGND_NONE, libtcod.LEFT, 'Damage -> Elemental Damage -> Frost Damage')
        libtcod.console_set_default_foreground(window, libtcod.white)

        libtcod.console_print_ex(window, 45+len('Damage '), 13, libtcod.BKGND_NONE, libtcod.LEFT, '->')

        libtcod.console_set_default_foreground(window, libtcod.Color(112, 39, 195))
        libtcod.console_print_ex(window, 45+len('Damage -> '), 13, libtcod.BKGND_NONE, libtcod.LEFT, 'Elemental Damage ')
        libtcod.console_set_default_foreground(window, libtcod.white)

        libtcod.console_print_ex(window, 45+len('Damage -> Elemental Damage '), 13, libtcod.BKGND_NONE, libtcod.LEFT, '->')
        libtcod.console_set_default_foreground(window, libtcod.Color(145, 255, 255))
        libtcod.console_print_ex(window, 45+len('Damage -> Elemental Damage -> '), 13, libtcod.BKGND_NONE, libtcod.LEFT, 'Frost Damage')

        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(145, 255, 255))
        libtcod.console_print_ex(window, 32, 19, libtcod.BKGND_NONE, libtcod.LEFT, 'Frost Damage')

        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 45, 19, libtcod.BKGND_NONE, libtcod.LEFT, 'is a form of ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 58, 19, libtcod.BKGND_NONE, libtcod.LEFT, 'Elemental Damage')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 74, 19, libtcod.BKGND_NONE, libtcod.LEFT, '.')
        libtcod.console_set_default_foreground(window, libtcod.white)

        
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(145, 255, 255))
        libtcod.console_print_ex(window, 32, 19, libtcod.BKGND_NONE, libtcod.LEFT, 'Frost Damage')


        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 45, 19, libtcod.BKGND_NONE, libtcod.LEFT, 'is a form of ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 58, 19, libtcod.BKGND_NONE, libtcod.LEFT, 'Elemental Damage')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 74, 19, libtcod.BKGND_NONE, libtcod.LEFT, '.')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(145, 255, 255))
        libtcod.console_print_ex(window, 32, 21, libtcod.BKGND_NONE, libtcod.LEFT, 'Frost Damage')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 45, 21, libtcod.BKGND_NONE, libtcod.LEFT, 'can be resisted by')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(145, 255, 255))
        libtcod.console_print_ex(window, 64, 21, libtcod.BKGND_NONE, libtcod.LEFT, 'Frost Resistance')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 80, 21, libtcod.BKGND_NONE, libtcod.LEFT, '.')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 23, libtcod.BKGND_NONE, libtcod.LEFT, 'It generally ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 45, 23, libtcod.BKGND_NONE, libtcod.LEFT, 'slows your attack speed and movement speed.')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 25, libtcod.BKGND_NONE, libtcod.LEFT, 'There are a few different kinds of ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(145, 255, 255))
        libtcod.console_print_ex(window, 67, 25, libtcod.BKGND_NONE, libtcod.LEFT, 'Frost Damage')

        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 70, 10, libtcod.BKGND_NONE, libtcod.LEFT, ':')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 79, 25, libtcod.BKGND_NONE, libtcod.LEFT, ':')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 215, 255))
        libtcod.console_print_ex(window, 32, 27, libtcod.BKGND_NONE, libtcod.LEFT, 'Gravechill:')


        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 175, 255))
        libtcod.console_print_ex(window, 32, 31, libtcod.BKGND_NONE, libtcod.LEFT, 'Permafrost:')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 145, 255))
        libtcod.console_print_ex(window, 32, 35, libtcod.BKGND_NONE, libtcod.LEFT, 'Bone Freeze:')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 44, 27, libtcod.BKGND_NONE, libtcod.LEFT, 'Inflicted by some ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(145, 85, 45))
        libtcod.console_print_ex(window, 62, 27, libtcod.BKGND_NONE, libtcod.LEFT, 'Undead')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 69, 27, libtcod.BKGND_NONE, libtcod.LEFT, ', causes -DEF and Slows.')

        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 255, 5))
        libtcod.console_print_ex(window, 32, 29, libtcod.BKGND_NONE, libtcod.LEFT, 'Resistable:')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 255, 5))
        libtcod.console_print_ex(window, 44, 29, libtcod.BKGND_NONE, libtcod.LEFT, 'Yes')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 255, 5))
        libtcod.console_print_ex(window, 32, 33, libtcod.BKGND_NONE, libtcod.LEFT, 'Resistable:')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 175, 5))
        libtcod.console_print_ex(window, 44, 33, libtcod.BKGND_NONE, libtcod.LEFT, 'Partial')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 255, 5))
        libtcod.console_print_ex(window, 32, 37, libtcod.BKGND_NONE, libtcod.LEFT, 'Resistable:')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
        libtcod.console_print_ex(window, 44, 37, libtcod.BKGND_NONE, libtcod.LEFT, 'No')
        libtcod.console_set_default_foreground(window, libtcod.white)

        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 44, 31, libtcod.BKGND_NONE, libtcod.LEFT, 'Inflicted by')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 57, 31, libtcod.BKGND_NONE, libtcod.LEFT, 'Heavy Weather and Intense Cold.')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 44, 35, libtcod.BKGND_NONE, libtcod.LEFT, 'Inflicted by ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 57, 35, libtcod.BKGND_NONE, libtcod.LEFT, 'great beings of Frost.')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
        libtcod.console_print_ex(window, 46, 37, libtcod.BKGND_NONE, libtcod.LEFT, ', can only be removed by Heat sources.')
        libtcod.console_set_default_foreground(window, libtcod.white)


    

    if header == 'Weather effects':
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 75, 5))
        libtcod.console_print_ex(window, 45, 13, libtcod.BKGND_NONE, libtcod.LEFT, 'WEATHER')
        libtcod.console_set_default_foreground(window, libtcod.white)

        libtcod.console_set_default_foreground(window, libtcod.Color(255, 75, 5))
        libtcod.console_print_ex(window, 32, 18, libtcod.BKGND_NONE, libtcod.LEFT, 'Weather effects')
        libtcod.console_set_default_foreground(window, libtcod.white)

        libtcod.console_print_ex(window, 48, 18, libtcod.BKGND_NONE, libtcod.LEFT, 'in Rise of the Shatm, comes in many forms.')

        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 20, libtcod.BKGND_NONE, libtcod.LEFT, 'The type of weather, depends on the ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(50, 115, 5))
        libtcod.console_print_ex(window, 68, 20, libtcod.BKGND_NONE, libtcod.LEFT, 'Region')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 70, 10, libtcod.BKGND_NONE, libtcod.LEFT, 'you are in.')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 75, 20, libtcod.BKGND_NONE, libtcod.LEFT, 'you are in.')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 21, libtcod.BKGND_NONE, libtcod.LEFT, 'In the ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 125))
        libtcod.console_print_ex(window, 39, 21, libtcod.BKGND_NONE, libtcod.LEFT, 'Plains of The Order')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 58, 21, libtcod.BKGND_NONE, libtcod.LEFT, ':')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 115, 185))
        libtcod.console_print_ex(window, 32, 23, libtcod.BKGND_NONE, libtcod.LEFT, 'Heavy Rain')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 155, 135))
        libtcod.console_print_ex(window, 32, 25, libtcod.BKGND_NONE, libtcod.LEFT, 'Heavy Winds')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 27, libtcod.BKGND_NONE, libtcod.LEFT, 'In the ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 35, 5))
        libtcod.console_print_ex(window, 39, 27, libtcod.BKGND_NONE, libtcod.LEFT, 'Abyssal Depths')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 53, 27, libtcod.BKGND_NONE, libtcod.LEFT, ':')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 75))
        libtcod.console_print_ex(window, 32, 29, libtcod.BKGND_NONE, libtcod.LEFT, 'Howls of The Dead')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 75, 15))
        libtcod.console_print_ex(window, 32, 31, libtcod.BKGND_NONE, libtcod.LEFT, 'Firestorms')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(185, 5, 15))
        libtcod.console_print_ex(window, 32, 33, libtcod.BKGND_NONE, libtcod.LEFT, 'Abyssal Rain')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 35, libtcod.BKGND_NONE, libtcod.LEFT, 'In the ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(15, 255, 255))
        libtcod.console_print_ex(window, 39, 35, libtcod.BKGND_NONE, libtcod.LEFT, 'Frozen Peaks')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 51, 35, libtcod.BKGND_NONE, libtcod.LEFT, ':')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(125, 255, 115))
        libtcod.console_print_ex(window, 32, 37, libtcod.BKGND_NONE, libtcod.LEFT, "Frozen Breath of Kri'nit")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(125, 255, 185))
        libtcod.console_print_ex(window, 32, 39, libtcod.BKGND_NONE, libtcod.LEFT, 'Lament of The Dead King')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 255, 135))
        libtcod.console_print_ex(window, 32, 41, libtcod.BKGND_NONE, libtcod.LEFT, 'Hail Storms')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 43, libtcod.BKGND_NONE, libtcod.LEFT, 'In the ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 135))
        libtcod.console_print_ex(window, 39, 43, libtcod.BKGND_NONE, libtcod.LEFT, 'Forgotten Wastes')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 55, 43, libtcod.BKGND_NONE, libtcod.LEFT, ':')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 195, 5))
        libtcod.console_print_ex(window, 32, 45, libtcod.BKGND_NONE, libtcod.LEFT, 'Sandstorms')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 135, 5))
        libtcod.console_print_ex(window, 32, 47, libtcod.BKGND_NONE, libtcod.LEFT, 'Wrath of The Queen')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 95, 5))
        libtcod.console_print_ex(window, 32, 49, libtcod.BKGND_NONE, libtcod.LEFT, 'March of the Eternals')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 70, 10, libtcod.BKGND_NONE, libtcod.LEFT, 'In the ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 51, libtcod.BKGND_NONE, libtcod.LEFT, 'In the ')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(155, 255, 255))
        libtcod.console_print_ex(window, 39, 51, libtcod.BKGND_NONE, libtcod.LEFT, 'Swamps of The Dead')
        libtcod.console_set_default_foreground(window, libtcod.white)
  
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 57, 51, libtcod.BKGND_NONE, libtcod.LEFT, ':')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(55, 255, 255))
        libtcod.console_print_ex(window, 32, 53, libtcod.BKGND_NONE, libtcod.LEFT, 'Soulstorm')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(55, 255, 145))
        libtcod.console_print_ex(window, 32, 55, libtcod.BKGND_NONE, libtcod.LEFT, 'Acidic Rain')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(55, 215, 75))
        libtcod.console_print_ex(window, 32, 57, libtcod.BKGND_NONE, libtcod.LEFT, 'Rain of Bones')
        libtcod.console_set_default_foreground(window, libtcod.white)
        
        # traceback = sys.exc_info()[2]
        #   print str(traceback.tb_lineno)

    if header == 'Fire Damage':
        

        libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
        libtcod.console_print_ex(window, 45, 13, libtcod.BKGND_NONE, libtcod.LEFT, 'Damage -> Elemental Damage -> Fire Damage')
        libtcod.console_set_default_foreground(window, libtcod.white)

        libtcod.console_print_ex(window, 45+len('Damage '), 13, libtcod.BKGND_NONE, libtcod.LEFT, '->')

        libtcod.console_set_default_foreground(window, libtcod.Color(112, 39, 195))
        libtcod.console_print_ex(window, 45+len('Damage -> '), 13, libtcod.BKGND_NONE, libtcod.LEFT, 'Elemental Damage ')
        libtcod.console_set_default_foreground(window, libtcod.white)

        libtcod.console_print_ex(window, 45+len('Damage -> Elemental Damage '), 13, libtcod.BKGND_NONE, libtcod.LEFT, '->')
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5)) 
        libtcod.console_print_ex(window, 45+len('Damage -> Elemental Damage -> '), 13, libtcod.BKGND_NONE, libtcod.LEFT, 'Fire Damage')
        libtcod.console_set_default_foreground(window, libtcod.white)                 

        
        libtcod.console_set_default_foreground(window, libtcod.white) 
        libtcod.console_print_ex(window, 32, 18, libtcod.BKGND_NONE, libtcod.LEFT, 'Fire Damage')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_print_ex(window, 32+len(keyword.string + ' '), 18, libtcod.BKGND_NONE, libtcod.LEFT, 'is a type of ')
        
        libtcod.console_set_default_foreground(window, libtcod.Color(112, 39,195))
        libtcod.console_print_ex(window, 32+len('Fire Damage is a type of '), 18, libtcod.BKGND_NONE, libtcod.LEFT, 'Elemental Damage')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_print_ex(window, 32+len('Fire Damage is a type of Elemental Damage'), 18, libtcod.BKGND_NONE, libtcod.LEFT, '.')
        
        libtcod.console_print_ex(window, 32, 19, libtcod.BKGND_NONE, libtcod.LEFT, 'It is ')

        libtcod.console_set_default_foreground(window, libtcod.Color(65, 174, 38))
        libtcod.console_print_ex(window, 32+len('It is '), 19, libtcod.BKGND_NONE, libtcod.LEFT, 'fully resistable')
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_print_ex(window, 32+len('It is fully resistable'), 19, libtcod.BKGND_NONE, libtcod.LEFT, '.')

        libtcod.console_print_ex(window, 32, 21, libtcod.BKGND_NONE, libtcod.LEFT, 'There are a number of different kinds of Fire Damage: ')

        libtcod.console_print_ex(window, 32, 24, libtcod.BKGND_NONE, libtcod.LEFT, 'Dragonfire: Partially resistable')
        libtcod.console_print_ex(window, 32, 26, libtcod.BKGND_NONE, libtcod.LEFT, 'Demonfire: Partially resistable')
        libtcod.console_print_ex(window, 32, 28, libtcod.BKGND_NONE, libtcod.LEFT, 'Hellfire: Not resistable')

        libtcod.console_set_default_foreground(window, libtcod.Color(120, 0, 0))
        libtcod.console_print_ex(window, 32, 28, libtcod.BKGND_NONE, libtcod.LEFT, "Hellfire")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 180, 0))
        libtcod.console_print_ex(window, 32, 26, libtcod.BKGND_NONE, libtcod.LEFT, "Demonfire")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 160, 0))
        libtcod.console_print_ex(window, 32, 24, libtcod.BKGND_NONE, libtcod.LEFT, "Dragonfire")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 0))
        libtcod.console_print_ex(window, 73, 21, libtcod.BKGND_NONE, libtcod.LEFT, "Fire Damage")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 64, 24, libtcod.BKGND_NONE, libtcod.LEFT, ", -Def debuff")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 63, 26, libtcod.BKGND_NONE, libtcod.LEFT, ", Drains Mana/HP")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 56, 28, libtcod.BKGND_NONE, libtcod.LEFT, ", Heavy DoT, Mana/Stam Drain")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
        libtcod.console_print_ex(window, 32, 31, libtcod.BKGND_NONE, libtcod.LEFT, "Fire Damage")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 43, 31, libtcod.BKGND_NONE, libtcod.LEFT, "is resisted by ")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 95, 5))
        libtcod.console_print_ex(window, 58, 31, libtcod.BKGND_NONE, libtcod.LEFT, "Fire Resistance")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 73, 31, libtcod.BKGND_NONE, libtcod.LEFT, ".")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 84, 28, libtcod.BKGND_NONE, libtcod.LEFT, ".")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 79, 26, libtcod.BKGND_NONE, libtcod.LEFT, ".")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 77, 24, libtcod.BKGND_NONE, libtcod.LEFT, ".")
        libtcod.console_set_default_foreground(window, libtcod.white)
        
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 34, libtcod.BKGND_NONE, libtcod.LEFT, "All fire debuffs can be dispelled by a")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(5, 255, 215))
        libtcod.console_print_ex(window, 71, 34, libtcod.BKGND_NONE, libtcod.LEFT, "Quenching Potion")
        libtcod.console_set_default_foreground(window, libtcod.white)
        
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 87, 34, libtcod.BKGND_NONE, libtcod.LEFT, ".")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 87, 34, libtcod.BKGND_NONE, libtcod.LEFT, ".          ")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 87, 34, libtcod.BKGND_NONE, libtcod.LEFT," .              ")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 36, libtcod.BKGND_NONE, libtcod.LEFT, "Taking")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(145, 255, 255))
        libtcod.console_print_ex(window, 39, 36, libtcod.BKGND_NONE, libtcod.LEFT, "Frost Damage")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 52, 36, libtcod.BKGND_NONE, libtcod.LEFT, "can also dispel fire debuffs.")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 39, libtcod.BKGND_NONE, libtcod.LEFT, "There is a number of Dungeons and")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 65, 55))
        libtcod.console_print_ex(window, 66, 39, libtcod.BKGND_NONE, libtcod.LEFT, "Weather effects")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 65, 55))
        libtcod.console_print_ex(window, 32, 41, libtcod.BKGND_NONE, libtcod.LEFT, "that can cause ")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 32, 41, libtcod.BKGND_NONE, libtcod.LEFT, "that can cause ")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
        libtcod.console_print_ex(window, 47, 41, libtcod.BKGND_NONE, libtcod.LEFT, "Fire Damage")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
        libtcod.console_print_ex(window, 58, 41, libtcod.BKGND_NONE, libtcod.LEFT, ".")
        libtcod.console_set_default_foreground(window, libtcod.white)
        libtcod.console_set_default_foreground(window, libtcod.Color(105, 45, 95))
        libtcod.console_print_ex(window, 53, 39, libtcod.BKGND_NONE, libtcod.LEFT, "Dungeons")
        libtcod.console_set_default_foreground(window, libtcod.white)


    if optional_color == None:

        color = keyword.color

    else:
        color = optional_color

    RED = 0
    GREEN = 0
    BLUE = 0

    current_string = ''
    
    designated_x = 0
    designated_y = 0
    libtcod.console_print_ex(window, 5, 5, libtcod.BKGND_NONE, libtcod.LEFT, "Current String is: " + current_string)
    libtcod.console_print_ex(window, 5, 4, libtcod.BKGND_NONE, libtcod.LEFT, "Designated X/Y is: " + str(designated_x) + " X, " + str(designated_y) + " Y.")
    
  
    
    
    libtcod.console_print_ex(window, 36, 4, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - RED: ' + str(RED))
    libtcod.console_print_ex(window, 36, 5, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - GREEN: ' + str(GREEN))
    libtcod.console_print_ex(window, 36, 6, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - BLUE: ' + str(BLUE))

    libtcod.console_print_ex(window, 70, 10, libtcod.BKGND_NONE, libtcod.LEFT, 'WHITE MODE')

    
    libtcod.console_set_default_foreground(window, libtcod.Color(105, 45, 95))
    libtcod.console_print_ex(window, 19, 18, libtcod.BKGND_NONE, libtcod.LEFT, "DUNGEONS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(5, 255, 255))
    libtcod.console_print_ex(window, 19, 20, libtcod.BKGND_NONE, libtcod.LEFT, "ITEMS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 5))
    libtcod.console_print_ex(window, 19, 22, libtcod.BKGND_NONE, libtcod.LEFT, "CLASSES")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(5, 255, 5))
    libtcod.console_print_ex(window, 19, 24, libtcod.BKGND_NONE, libtcod.LEFT, "STATS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
    libtcod.console_print_ex(window, 19, 26, libtcod.BKGND_NONE, libtcod.LEFT, "DAMAGE")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(215, 255, 5))
    libtcod.console_print_ex(window, 19, 28, libtcod.BKGND_NONE, libtcod.LEFT, "DAY")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(95, 105, 5))
    libtcod.console_print_ex(window, 23, 28, libtcod.BKGND_NONE, libtcod.LEFT, "&")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(75, 75, 5))
    libtcod.console_print_ex(window, 25, 28, libtcod.BKGND_NONE, libtcod.LEFT, "NIGHT")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(125, 95, 5))
    libtcod.console_print_ex(window, 19, 30, libtcod.BKGND_NONE, libtcod.LEFT, "CITYS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(50, 115, 5))
    libtcod.console_print_ex(window, 19, 32, libtcod.BKGND_NONE, libtcod.LEFT, "REGIONS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(50, 115, 235))
    libtcod.console_print_ex(window, 19, 34, libtcod.BKGND_NONE, libtcod.LEFT, "FACTIONS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(50, 115, 65))
    libtcod.console_print_ex(window, 19, 36, libtcod.BKGND_NONE, libtcod.LEFT, "SKILLS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(50, 65, 65))
    libtcod.console_print_ex(window, 19, 38, libtcod.BKGND_NONE, libtcod.LEFT, "SNEAKING")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(80, 135, 135))
    libtcod.console_print_ex(window, 19, 40, libtcod.BKGND_NONE, libtcod.LEFT, "SOUNDS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(250, 135, 135))
    libtcod.console_print_ex(window, 19, 42, libtcod.BKGND_NONE, libtcod.LEFT, "RARES")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(20, 15, 5))
    libtcod.console_print_ex(window, 19, 44, libtcod.BKGND_NONE, libtcod.LEFT, "SECRETS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(20, 255, 95))
    libtcod.console_print_ex(window, 19, 46, libtcod.BKGND_NONE, libtcod.LEFT, "QUESTS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(250, 255, 95))
    libtcod.console_print_ex(window, 19, 48, libtcod.BKGND_NONE, libtcod.LEFT, "EVENTS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(250, 255, 185))
    libtcod.console_print_ex(window, 19, 50, libtcod.BKGND_NONE, libtcod.LEFT, "MOVEMENT")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(150, 255, 135))
    libtcod.console_print_ex(window, 19, 52, libtcod.BKGND_NONE, libtcod.LEFT, "TERRAIN")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(255, 35, 65))
    libtcod.console_print_ex(window, 19, 54, libtcod.BKGND_NONE, libtcod.LEFT, "MONSTERS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(155, 255, 5))
    libtcod.console_print_ex(window, 19, 56, libtcod.BKGND_NONE, libtcod.LEFT, "BUFFS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(255, 255, 255))
    libtcod.console_print_ex(window, 24, 56, libtcod.BKGND_NONE, libtcod.LEFT, "/")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
    libtcod.console_print_ex(window, 25, 56, libtcod.BKGND_NONE, libtcod.LEFT, "DEBUFFS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
    libtcod.console_print_ex(window, 24, 56, libtcod.BKGND_NONE, libtcod.LEFT,"         ")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(255, 5, 5))
    libtcod.console_print_ex(window, 19, 58, libtcod.BKGND_NONE, libtcod.LEFT, "DEBUFFS")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(255, 75, 5))
    libtcod.console_print_ex(window, 19, 16, libtcod.BKGND_NONE, libtcod.LEFT, "WEATHER")
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_set_default_foreground(window, libtcod.Color(245, 25, 5))
    libtcod.console_print_ex(window, 19, 14, libtcod.BKGND_NONE, libtcod.LEFT, "RESISTANCES")
    libtcod.console_set_default_foreground(window, libtcod.white)

    libtcod.console_print_ex(window, 30, 56, libtcod.BKGND_NONE, libtcod.LEFT, "|")


    
    #blit the contents of "window" to the root console
    x = SCREEN_WIDTH/2 - 30
    y = SCREEN_HEIGHT/2 - 15
    libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
    

    #present the root console to the player and wait for a key-press
    libtcod.console_flush()
    
    
    poop = None

  

    
    while poop == None:
        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)
        

        (mouse_x, mouse_y) = (mouse.cx, mouse.cy)
        key_char = chr(key.c)
        if ord(key_char) != 0 and ord(key_char) != 27:
            
            if ord(key_char) == 8 and len(current_string) > 0:
                
                current_string = current_string[:-1]

            elif ord(key_char) != 8:
                current_string += str(key_char)
            libtcod.console_print_ex(window, 5, 5, libtcod.BKGND_NONE, libtcod.LEFT, "Current String is: " + current_string + " ")
            
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if key.vk == libtcod.KEY_ENTER:
            current_string = current_string[:-1]
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, designated_x, designated_y, libtcod.BKGND_NONE, libtcod.LEFT, current_string)
            libtcod.console_set_default_foreground(window, libtcod.white)

            file = open("testing.txt", "a")

            file.write("libtcod.console_set_default_foreground(window, libtcod.Color(" + str(RED) +", " + str(GREEN) + ", " + str(BLUE) + "))\n")
            file.write("libtcod.console_print_ex(window, " + str(designated_x) + ", " + str(designated_y) + ", libtcod.BKGND_NONE, libtcod.LEFT, '" + str(current_string) + "')\n")
            file.write("libtcod.console_set_default_foreground(window, libtcod.white)\n")

            file.close()
            
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()


        #Elemental Damage 57 18, Damage, Fully Resistable 39, 19, Dragonfire 32 24, Demonfire 32 26, Hellfire 32 28, Fire Resistance 58 31
    #Quenching Potion 71 34, Water Damage 39 36, Dungeons 53 39, Weather effects 66, 39


        if mouse.lbutton_pressed and mouse_x >= 66 and mouse_x <= (66 + len('Weather effects')) and mouse_y == 39 and header == 'Fire Damage':
            try:
                encyclopedia('Weather effects', 100, 'Weather effects', libtcod.Color(255, 65, 55))
            except Exception as e:
                print "WEATHER EFFECTS ERROR " + str(e)



        if mouse.lbutton_pressed and mouse_x >= 53 and mouse_x <= (53 + len('Dungeons')) and mouse_y == 39 and header == 'Fire Damage':
            encyclopedia('Dungeons', 100, 'Dungeons')
            
        
        if mouse.lbutton_pressed and mouse_x >= 39 and mouse_x <= (39 + len('Frost Damage')) and mouse_y == 36 and header == 'Fire Damage':
            try:

                encyclopedia('Frost Damage', 100, 'Frost Damage', libtcod.Color(145, 255, 255))
            except Exception as e:
                
                traceback = sys.exc_info()[2]
                print str(traceback.tb_lineno)
            

        if mouse.lbutton_pressed and mouse_x >= 71 and mouse_x <= (71 + len('Quenching Potion')) and mouse_y == 34 and header == 'Fire Damage':
            encyclopedia('Quenching Potion', 100, 'Quenching Potion')
            

        if mouse.lbutton_pressed and mouse_x >= 58 and mouse_x <= (58 + len('Fire Resistance')) and mouse_y == 31 and header == 'Fire Damage':
            encyclopedia('Fire Resistance', 100, 'Fire Resistance')
            
        
        if mouse.lbutton_pressed and mouse_x >= 32 and mouse_x <= (32 + len('Hellfire')) and mouse_y == 28 and header == 'Fire Damage':
            encyclopedia('Hellfire', 100, 'Hellfire')
            
        
        if mouse.lbutton_pressed and mouse_x >= 32 and mouse_x <= (32 + len('Demonfire')) and mouse_y == 26 and header == 'Fire Damage':
            encyclopedia('Demonfire', 100, 'Demonfire')
            
        
        if mouse.lbutton_pressed and mouse_x >= 32 and mouse_x <= (32 + len('Dragonfire')) and mouse_y == 24 and header == 'Fire Damage':
            encyclopedia('Dragonfire', 100, 'Dragonfire')
            break
        
        if mouse.lbutton_pressed and mouse_x >= 57 and mouse_x <= (57 + len('Elemental Damage')) and mouse_y == 18 and header == 'Fire Damage':
            encyclopedia('Elemental Damage', 100, 'Elemental Damage')
            

        if mouse.lbutton_pressed and mouse_x >= 39 and mouse_x <= (39 + len('Fully Resistable')) and mouse_y == 19 and header == 'Fire Damage':
            encyclopedia('Fully Resistable', 100, 'Fully Resistable')
            
                                                                   
        if mouse.lbutton_pressed and mouse_x == 38 and mouse_y == 5:
            if GREEN < 255:
                GREEN += 5
            if GREEN > 255:
                GREEN = 255

            libtcod.console_print_ex(window, 36, 5, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - GREEN: ' + str(GREEN) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()
            
        if mouse.lbutton_pressed and mouse_x == 36 and mouse_y == 5:
            if GREEN < 255:
                GREEN += 10
            if GREEN > 255:
                GREEN = 255

            libtcod.console_print_ex(window, 36, 5, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - GREEN: ' + str(GREEN) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if mouse.lbutton_pressed and mouse_x == 40 and mouse_y == 5:
            if GREEN > 5:
                GREEN -= 5
            if GREEN < 0:
                GREEN = 0

            libtcod.console_print_ex(window, 36, 5, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - GREEN: ' + str(GREEN) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if mouse.lbutton_pressed and mouse_x == 42 and mouse_y == 5:
            if GREEN > 10:
                GREEN -= 10
            if GREEN < 0:
                GREEN = 0

            libtcod.console_print_ex(window, 36, 5, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - GREEN: ' + str(GREEN) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if mouse.lbutton_pressed and mouse_x == 36 and mouse_y == 6:
            if BLUE < 255:
                BLUE += 10
            if BLUE > 255:
                BLUE = 255

            libtcod.console_print_ex(window, 36, 6, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - BLUE: ' + str(BLUE) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if mouse.lbutton_pressed and mouse_x == 40 and mouse_y == 6:
            if BLUE > 5:
                BLUE -= 5
            if BLUE < 0:
                BLUE = 0

            libtcod.console_print_ex(window, 36, 6, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - BLUE: ' + str(BLUE) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if mouse.lbutton_pressed and mouse_x == 42 and mouse_y == 6:
            if BLUE > 10:
                BLUE -= 10
            if BLUE < 0:
                BLUE = 0

            libtcod.console_print_ex(window, 36, 6, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - BLUE: ' + str(BLUE) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()



        if mouse.lbutton_pressed and mouse_x == 70 and mouse_y == 8:
            libtcod.console_print_ex(window, designated_x, designated_y, libtcod.BKGND_NONE, libtcod.LEFT, '')

            readFile = ("testing.txt", 'r')

            lines = readFile.readlines()

            readFile.close()
            w = open("testing.txt",'w')

            w.writelines([item for item in lines[:-1]])

            w.close()
        if mouse.lbutton_pressed and mouse_x == 70 and mouse_y == 10:
            BLUE = 255
            RED = 255
            GREEN = 255

            libtcod.console_print_ex(window,36, 4, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - RED: ' + str(RED) + " ")
            libtcod.console_print_ex(window,36, 5, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - BLUE: ' + str(GREEN) + " ")
            libtcod.console_print_ex(window,36, 6, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - GREEN: ' + str(BLUE) + " ")
            
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if mouse.lbutton_pressed and mouse_x == 38 and mouse_y == 6:
            if BLUE < 255:
                BLUE += 5
            if BLUE > 255:
                BLUE = 255

            libtcod.console_print_ex(window,36, 6, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - BLUE: ' + str(BLUE) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()
            
        if mouse.lbutton_pressed and mouse_x == 38 and mouse_y == 4:
            
            
            if RED < 255:
                RED += 5
            if RED > 255:
                RED = 255
                
            

            libtcod.console_print_ex(window, 36, 4, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - RED: ' + str(RED) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()
            #36 4, RED
            #56 4, BLUE
            #76 4, GREEN

        if mouse.lbutton_pressed and mouse_x == 36 and mouse_y == 4:
            if RED < 255:
                RED += 10
            if RED > 255:
                RED = 255
                
            

            libtcod.console_print_ex(window, 36, 4, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - RED: ' + str(RED) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()

        if mouse.lbutton_pressed and mouse_x == 40 and mouse_y == 4:
            
            if RED > 5:
                RED -= 5
                
        

            libtcod.console_print_ex(window, 36, 4, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - RED: ' + str(RED) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()
        if mouse.lbutton_pressed and mouse_x == 42 and mouse_y == 4:
            
            if RED > 10:
                RED -= 10
            if RED < 0:
                RED = 0
                
        

            libtcod.console_print_ex(window, 36, 4, libtcod.BKGND_NONE, libtcod.LEFT, '+ + - - RED: ' + str(RED) + " ")
            libtcod.console_set_default_foreground(window, libtcod.Color(RED, GREEN, BLUE))
            libtcod.console_print_ex(window, 60, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'output')
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()
        if mouse.lbutton_pressed and mouse_x != 36 and mouse_x != 38 and mouse_x != 40 and mouse_x != 42:
            designated_x = mouse_x
            designated_y = mouse_y
            libtcod.console_print_ex(window, 5, 4, libtcod.BKGND_NONE, libtcod.LEFT, "Designated X/Y is: " + str(designated_x) + " X, " + str(designated_y) + " Y.")
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
            libtcod.console_flush()
##            libtcod.console_print_ex(window, 5, 4, libtcod.BKGND_NONE, libtcod.LEFT, "Designated X/Y is: " designated_x + " X, " + designated_y + " Y.")

        
    
   

    #libtcod.console_clear(window)
    #libtcod.console_clear(0)
    #libtcod.console_clear(panel)

def inspect_menu(header, options, width):
    global DEBUFF

    img = libtcod.image_load('black_background.png')

    libtcod.image_blit_2x(img, 0, 50, 0, sx=0, sy=0, w=-1, h=-1)

    #calculate total height for the header (after auto-wrap) and one line per option
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0
    height = len(options) + header_height

    #create an off-screen console that represents the menu's window
    window = libtcod.console_new(90, 90)

    #print the header, with auto-wrap

    libtcod.console_print_rect_ex(window, 35, 15, width, height, libtcod.black, libtcod.LEFT, header)

    #print all the options
    y = 20
    for option_text in options:
        text = option_text
        libtcod.console_print_ex(window, 20, y, libtcod.BKGND_NONE, libtcod.LEFT, text)
        y += 1

    #blit the contents of "window" to the root console
    x = SCREEN_WIDTH/2 - 30
    y = SCREEN_HEIGHT/2 - 15
    libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)
    

    #present the root console to the player and wait for a key-press
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)
    if key and DEBUFF == True:
        message('Done')
        

    




    

    
def stats_menu(header, width):


    #calculate total height for the header (after auto-wrap) and one line per option
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0
    height = 20 + header_height

    #create an off-screen console that represents the menu's window
    window = libtcod.console_new(100, height)

    #print the header, with auto-wrap

    libtcod.console_print_rect_ex(window, 0, 0, width/2-5, height/2 , libtcod.white, libtcod.LEFT, header)

    #print all the options
    y = header_height
    letter_index = 0

    Strength1 = False
    Agility1 = False

    Strength2 = False
    Agility2 = False

    Base_Damage2 = False
    Base_Scaling2 = False



    stuff = ['','', '', '', '', '', '', '', '', '', '', '', '', '', '' , '', '', '', '', '', '', '', '', '']
    for i in stuff:

        if letter_index == 0:
            text = ''

        if letter_index == 1:
            if len(player.fighter.Right) != 0 and len(player.fighter.Left) == 0:
                text = 'Base Damage for ' + str(player.fighter.Right[0].name) + ':'

            elif len(player.fighter.Right) == 0 and len(player.fighter.Left) != 0:
                text = 'Base Damage for ' + str(player.fighter.Left[0].name) + ':'

            elif len(player.fighter.Right) != 0 and len(player.fighter.Left) != 0:
                text = 'Base Damage for ' + str(player.fighter.Right[0].name) + ' and ' + str(player.fighter.Left[0].name) + ':'

            elif len(player.fighter.Right) == 0 and len(player.fighter.Left) == 0 and len(player.fighter.Both) == 0:
                text = 'Base Damage for Unarmed:'

            elif len(player.fighter.Both) != 0:
                text = 'Base damage for ' + str(player.fighter.Both[0].name) + ':'

            

        if letter_index == 2:
            text = ''


        if letter_index == 3:
            text = player.fighter.damage

        if letter_index == 4:
            text = ''

        if letter_index == 5:
            if len(player.fighter.Right) != 0 and len(player.fighter.Left) == 0:
                text = 'Base Scaling for ' + str(player.fighter.Right[0].name) + ':'

            elif len(player.fighter.Right) == 0 and len(player.fighter.Left) != 0:
                text = 'Base Scaling for ' + str(player.fighter.Left[0].name) + ':'

            elif len(player.fighter.Right) != 0 and len(player.fighter.Left) != 0:
                text = 'Base Scaling for ' + str(player.fighter.Right[0].name) + ':'

            elif len(player.fighter.Right) == 0 and len(player.fighter.Left) == 0:
                text = 'Base Scaling for Unarmed:'

        if letter_index == 6:
            text = ''

        if letter_index == 7:
            text = player.fighter.scaling
            if 'Strength' in player.fighter.scaling:
                Strength1 = True # First Scaling Value of Strength to be Coloured

        if letter_index == 8:
            text = ''

        if letter_index == 9:
            text = player.fighter.scaling2
            if 'Agility' in player.fighter.scaling2:
                Agility1 = True #First Scaling value of Agility to be Coloured

        if letter_index == 10:

            text = ''

        if letter_index == 11:
            if player.fighter.damage2 != '' and len(player.fighter.Both) == 0:
                text = 'Base Damage for ' + str(player.fighter.Left[0].name) + ':'

                Base_Damage2 = True
                Base_Scaling2 = True


        if letter_index == 12:
            text = ''

        if letter_index == 13:
            if player.fighter.damage2 != '' and len(player.fighter.Both) == 0:
                text = player.fighter.damage2
            else:
                text = ''

        if letter_index == 14:

            text = ''

        if letter_index == 15:
            if player.fighter.damage2 != '' and len(player.fighter.Both) == 0:
                text = 'Base Scaling for ' + str(player.fighter.Left[0].name) + ':'

            else:
                text = ''

        if letter_index == 16:
            text = ''

        if letter_index == 17:
            if player.fighter.damage2 != '' and len(player.fighter.Both) == 0:
                text = player.fighter.scaling3
                if 'Strength' in player.fighter.scaling3:
                    Strength2 = True

            else:
                text = ''

        if letter_index == 18:
            text = ''



        if letter_index == 19:
            if player.fighter.damage2 != '' and len(player.fighter.Both) == 0:
                if 'Agility' in player.fighter.scaling4:
                    Agility2 = True
                text = player.fighter.scaling4
            else:
                text = ''




        libtcod.console_print_ex(window, 0, y, libtcod.white, libtcod.LEFT, text)
        y += 1
        letter_index += 1

    #blit the contents of "window" to the root console
    x = SCREEN_WIDTH/2 - 55
    y = SCREEN_HEIGHT/2 - 20
    libtcod.console_blit(window, 0, 0, width+2, height, 0, x, y, 1.0, 1.0)


    libtcod.console_set_default_foreground(0, libtcod.white)



    libtcod.console_print(0,20,15,"%c%c%c%cBase Damage%c"%(libtcod.COLCTRL_FORE_RGB,200,150,1,libtcod.COLCTRL_STOP))#Base damage in a Brownish colour, for the absolutely first one

    libtcod.console_print(0,20,19,"%c%c%c%cBase Scaling%c"%(libtcod.COLCTRL_FORE_RGB,1,200,100,libtcod.COLCTRL_STOP))#Base Scaling in a Light Greenish colour, for the absolutely first one

    if Strength1 == True:
        libtcod.console_print(0,32,21,"%c%c%c%cStrength%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_STOP))#First Stnregth value painted as Red

    if Agility1 == True:
        libtcod.console_print(0,32,23,"%c%c%c%cAgility%c"%(libtcod.COLCTRL_FORE_RGB,1,255,1,libtcod.COLCTRL_STOP)) #First Agility value painted Green

    if Strength2 == True:
        libtcod.console_print(0,32,31,"%c%c%c%cStrength%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_STOP))#First Stnregth value painted as Red

    if Agility2 == True:
        libtcod.console_print(0,32,33,"%c%c%c%cAgility%c"%(libtcod.COLCTRL_FORE_RGB,1,255,1,libtcod.COLCTRL_STOP))#First Stnregth value painted as Red

    if Base_Damage2 == True:
        libtcod.console_print(0,20,25,"%c%c%c%cBase Damage%c"%(libtcod.COLCTRL_FORE_RGB,200,150,1,libtcod.COLCTRL_STOP))#Base damage in a Brownish colour, for the absolutely first one

    if Base_Scaling2 == True:
        libtcod.console_print(0,20, 29,"%c%c%c%cBase Scaling%c"%(libtcod.COLCTRL_FORE_RGB,1,200,100,libtcod.COLCTRL_STOP))#Base Scaling in a Light Greenish colour, for the absolutely first one

    #present the root console to the player and wait for a key-press
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)

def menu(header, options, width, craft_number=None, main=False):
    

    #calculate total height for the header (after auto-wrap) and one line per option
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0

    height = len(options) + header_height


    #create an off-screen console that represents the menu's window
    window = libtcod.console_new(100, height)

    
    

    

    #print the header, with auto-wrap
    if main:
        libtcod.console_print_rect_ex(window, 0, 0, width/2, height/2 - 20, libtcod.white, libtcod.LEFT, header)
    else:
        libtcod.console_print_rect_ex(window, 0, 0, width/2, height/2 - 5, libtcod.white, libtcod.LEFT, header)
    

    #print all the options
    y = header_height
    letter_index = ord('a')
    count = 0
    #['Warrior', 'Warlock', 'Monk', "Paladin", "Scavenger", "Survivalist", "Merchant",
    #                                    "Archer", "Necromancer", "Pyromancer", "Geomancer", "Hydromancer", "Aeromancer", "Thief", "Assasin",
    #                                    "Berserker", "Alchemist", "Arena Fighter", "Blood Mage", "Zealot", "Inquisitor", "Flagelant", 'Random'], 50, main=True)
    colors = [libtcod.Color(153, 76, 0), libtcod.Color(127, 0, 255), libtcod.Color(153, 255, 255), libtcod.Color(255, 255, 51), libtcod.Color(153, 76, 0), libtcod.Color(255, 128, 0),
                 libtcod.Color(255, 102, 102), libtcod.Color(0, 153, 0), libtcod.Color(96, 96, 96), libtcod.Color(153, 0, 0),
                libtcod.Color(51, 25, 0), libtcod.Color(0, 102, 204), libtcod.Color(153, 204, 255), libtcod.Color(32, 32, 32),
                libtcod.Color(224, 224, 224), libtcod.Color(255, 0, 0), libtcod.Color(153, 153, 255), libtcod.Color(51, 25, 0), libtcod.Color(51, 0, 25),
                libtcod.Color(255, 255, 204), libtcod.Color(255, 178, 102), libtcod.Color(0, 51, 51), libtcod.Color(64, 64, 64)]
    for option_text in options:
        if craft_number == True and count >= 2:
            text = option_text
        else:
            if option_text != ' ':
                if main:
                    try:
                        libtcod.console_set_default_foreground(window, colors[count])
                    except Exception as e:

                        print str(e)
                        libtcod.console_set_default_foreground(window, libtcod.white)
                
                text = '(' + chr(letter_index) + ') '
                libtcod.console_print_ex(window, 0, y, libtcod.white, libtcod.LEFT, text)     
                libtcod.console_set_default_foreground(window, libtcod.white)   
                libtcod.console_print_ex(window, 0+len(text), y, libtcod.white, libtcod.LEFT, option_text)
            else:
                text = ' ' 
        
        
        libtcod.console_set_default_foreground(window, libtcod.white)
        y += 1
        
        letter_index += 1
        count += 1

    #blit the contents of "window" to the root console
    x = SCREEN_WIDTH/2 - 15
    
    y = SCREEN_HEIGHT/2
    
    if main:
        y = 25
    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 1.0)

    #present the root console to the player and wait for a key-press
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)

    

    #convert the ASCII code to an index; if it corresponds to an option, return it
    index = key.c - ord('a')
    if index >= 0 and index < len(options): return index
    return None

def dump_item(item_name, list_number, order_number, shop_keeper):
    derp = False

    if order_number != 'First':
        if order_number > ((len(Dungeon.Shop[list_number])) - 3):
            return

    if order_number != 'First':
        if (Dungeon.Shop[list_number])[order_number+2] > player.fighter.gold:
            derp = True
            shop_message('Insufficient Funds!', libtcod.red)
            Shop('What do you wish to buy?', Dungeon.Shop[list_number] , LEVEL_SCREEN_WIDTH+70, shop_keeper, 1)

    if derp == False:     
        if order_number != 'First':
            if item_name in (Dungeon.Shop[list_number])[order_number+1]:
                item = (Dungeon.Shop[list_number])[order_number]

                objects.append(item)
                item.send_to_back()
                item.always_visible = False

                player.fighter.gold -= (Dungeon.Shop[list_number])[order_number+2]

                Dungeon.Shop[list_number].remove((Dungeon.Shop[list_number])[order_number])
                Dungeon.Shop[list_number].remove((Dungeon.Shop[list_number])[order_number])
                Dungeon.Shop[list_number].remove((Dungeon.Shop[list_number])[order_number])

                if player.fighter.Gender == 'Male':
                    sir = 'Sir'
                else:
                    sir = 'Mam'

                shop_message('Here ya go, ' + sir, libtcod.yellow)

                

                if len(Dungeon.Shop[list_number]) > 0:
                    Shop('What do you wish to buy?', Dungeon.Shop[list_number] , LEVEL_SCREEN_WIDTH+70, shop_keeper, 1)

                return True
        else:
            Shop('What do you wish to buy?', Dungeon.Shop[list_number] , LEVEL_SCREEN_WIDTH+70, shop_keeper, 1, True)
            

    return False

def craft(craftbench=False):
    number = (menu('What do you wish to craft?', ['Melee Weapon', 'Range Weapon', 'Armor', 'Jewlery'], 100))

    if number == 3:
        jewlery = (menu('What do you wish to craft?', ['Neck', 'Ring', 'Trinket', ' '], 100), True)


        if jewlery == 0:
            ph_menu('Neck', player.fighter.neck)

        elif jewlery == 1:
            ph_menu('Ring', player.fighter.ring1)

        elif jewlery == 2:
            ph_menu('Trinket', player.fighter.trinket1)
        
    elif number == 2:
        armor = (menu('What do you wish to craft?', ['Helmet', 'Shoulders', 'Chest', 'Belt', 'Gloves', 'Bracers', 'Legs', 'Boots'], 100))

        if armor == 0:
            
            power_menu(Crafting=True, slot1='Part 1 (Cost: 2)', slot2='Part 2 (Cost: 2)', slot3='Part 3(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, armor='Helm')
            

        elif armor == 1:
            power_menu(Crafting=True, slot1='Part 1 (Cost: 2)', slot2='Part 2 (Cost: 2)', slot3='Part 3(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, armor='Shoulders')

        elif armor == 2:
            power_menu(Crafting=True, slot1='Part 1 (Cost: 2)', slot2='Part 2 (Cost: 2)', slot3='Part 3(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, armor='Chest')

        elif armor == 3:
            power_menu(Crafting=True, slot1='Part 1 (Cost: 2)', slot2='Part 2 (Cost: 2)', slot3='Part 3(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, armor='Belt')

        elif armor == 4:
            power_menu(Crafting=True, slot1='Part 1 (Cost: 2)', slot2='Part 2 (Cost: 2)', slot3='Part 3(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, armor='Gloves')

        elif armor == 5:
            power_menu(Crafting=True, slot1='Part 1 (Cost: 2)', slot2='Part 2 (Cost: 2)', slot3='Part 3(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, armor='Bracers')

        elif armor == 6:
            power_menu(Crafting=True, slot1='Part 1 (Cost: 2)', slot2='Part 2 (Cost: 2)', slot3='Part 3(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, armor='Legs')

        elif armor == 7:
            power_menu(Crafting=True, slot1='Part 1 (Cost: 2)', slot2='Part 2 (Cost: 2)', slot3='Part 3(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, armor='Boots')

    elif number == 1:
        ranged_weapon = (menu('What do you wish to craft?', ['One-handed gun', 'Two-handed Rifle', 'Bow', ' '], 100), True)

        if ranged_weapon == 0:
            ph_menu('One-handed gun', player.fighter.Left)

        elif ranged_weapon == 1:
            ph_menu('Two-handed Rifle', player.fighter.Both)

        elif ranged_weapon == 2:
            ph_menu('Bow', player.fighter.Both)

    elif number == 0: #Create a melee weapon, define wether it's 1h or 2h
        
        melee_weapon = (menu('What do you wish to craft?', ['One-Handed', 'Two-handed', ' ', ' '], 100, True))

        if melee_weapon == 0 or melee_weapon == 1: #Define what kind of a weapon it is
            if melee_weapon == 0:
                derp = (menu('What do you wish to craft?', ['Sword', 'Mace', 'Spear', 'Axe', 'Dagger'], 100))
            elif melee_weapon == 1:
                derp = (menu('What do you wish to craft?', ['Sword', 'Mace', 'Spear', 'Axe', ' '], 100), True)

            if derp == 0:
                if melee_weapon == 0: #Sword
                    power_menu(Crafting=True, slot1='Handle (Cost: 2)', slot2='Blade (Cost: 2)', slot3='Blade Part 2(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, weapon='1h-Sword')

                elif melee_weapon == 1:
                    power_menu(Crafting=True, slot1='Handle (Cost: 4)', slot2='Blade (Cost: 5)', slot3='Blade Part 2(Cost: 5)', slot4='Enchantment', slot1_cost=4, slot2_cost=5,
                               slot3_cost=5, weapon='2h-Sword')
                
            elif derp == 1:
                if melee_weapon == 0: #Mace
                    power_menu(Crafting=True, slot1='Handle (Cost: 2)', slot2='Shaft (Cost: 2)', slot3='Ball Part 2(Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, weapon='1h-Mace')

                elif melee_weapon == 1:
                    power_menu(Crafting=True, slot1='Handle (Cost: 4)', slot2='Shaft (Cost: 5)', slot3='Ball (Cost: 5)', slot4='Enchantment', slot1_cost=4, slot2_cost=5,
                               slot3_cost=5, weapon='2h-Mace')

            elif derp == 2:
                if melee_weapon == 0: #Axe
                    power_menu(Crafting=True, slot1='Handle (Cost: 2)', slot2='Shaft (Cost: 2)', slot3='Head (Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, weapon='1h-Axe')

                elif melee_weapon == 1:
                    power_menu(Crafting=True, slot1='Handle (Cost: 4)', slot2='Shaft (Cost: 5)', slot3='Head (Cost: 5)', slot4='Enchantment', slot1_cost=4, slot2_cost=5,
                               slot3_cost=5, weapon='2h-Axe')

            elif derp == 3: 
                if melee_weapon == 0: #Spear
                    power_menu(Crafting=True, slot1='Handle (Cost: 2)', slot2='Shaft (Cost: 2)', slot3='Tip (Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, weapon='1h-Spear')

                elif melee_weapon == 1:
                    power_menu(Crafting=True, slot1='Handle (Cost: 4)', slot2='Shaft (Cost: 5)', slot3='Tip (Cost: 5)', slot4='Enchantment', slot1_cost=4, slot2_cost=5,
                               slot3_cost=5, weapon='2h-Spear')

            elif derp == 4: #dagger
                power_menu(Crafting=True, slot1='Handle (Cost: 2)', slot2='Blade (Cost: 2)', slot3='Blade part 2 (Cost: 3)', slot4='Enchantment', slot1_cost=2, slot2_cost=2,
                               slot3_cost=3, weapon='Dagger')


        

    


def sell_loop(care=None):
    global key, shopping_list
    poop = None
    thing = None
    listthing = []
    while poop == None:
        
        chosen_item = inventory_menu('What do you want to Sell?\n', shop=True)
        if chosen_item == None: 
            break

        
        
        if chosen_item == 'Accepted':
            shopping_list[0].sell()
            shopping_list.remove(shopping_list[0])
        
        else:
            if care == None:
                try:
                    shopping_list[0].sell(careful=True, sale=False)
                except:
                    shop_message('You choose to not sell the item.', libtcod.yellow)
            

            if care == 'Blyat':
                chosen_item.sell()

            


def torch_distance(obj, x, y):
    x1 = obj.x
    y1 = obj.y

    return math.sqrt((x - x1) ** 2 + (y - y1) ** 2)

    
#Interactive menu for the Shop
def Shop(header, options, width, name, stage, clear=False):
    global shop_msgs

    

    

    if clear == True:
        try:
            del shop_msgs[0]
        except:
            pass

    #calculate total height for the header (after auto-wrap) and one line per option
    
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0
    height = len(options) + header_height + 10 #Space 

    #create an off-screen console that represents the menu's window
    window = libtcod.console_new(150, height+10) #How wide the text space is

    #print the header, with auto-wrap

    libtcod.console_print_rect_ex(window, 3, 0, width/2+30, height/2 - 50, libtcod.white, libtcod.LEFT, header)

    #print all the options
    y = header_height
    letter_index = ord('a')
    if player.fighter.gold == 0:
        text = "You currently don't have any gold."
    else:
        text = 'Your current gold is :' + str(player.fighter.gold)
    libtcod.console_print_ex(window, 0, y+10, libtcod.white, libtcod.LEFT, text)

    text3 = 'Press Enter to leave the Shop.'

    libtcod.console_print_ex(window, 3, y+15, libtcod.white, libtcod.LEFT, text3)
    count = 0
    for option_text in options:
        

        text2 = '(' + chr(letter_index) + ') '

        if 'Object' not in str(option_text) and type(option_text) != int:
            
            
            text2 += str(option_text)
            try:
                
                if type(options[count+1]) == int:
                    text2 += ' Costs: ' + str(options[count+1]) + ' gold.'
            except:
                pass
            derp = True
            
            libtcod.console_print_ex(window, 3, y, libtcod.white, libtcod.LEFT, text2)

        
        
            
        else:
            
            derp = False

        count += 1
        
        
        if derp == True:
            y += 1
            letter_index += 1

    y = header_height

    for (line, color) in shop_msgs:
        libtcod.console_set_default_foreground(window, color)
        libtcod.console_print_ex(window, 10, y+12, libtcod.BKGND_NONE, libtcod.LEFT, line)
        y += 1

    #blit the contents of "window" to the root console
    x = SCREEN_WIDTH/2-35
    y = SCREEN_HEIGHT/2-15
    libtcod.console_blit(window, 0, 0, width+10, height+20, 0, x+5, y+5, 1.0, 1.0)

    #present the root console to the player and wait for a key-press
    libtcod.console_flush()

    

    if player.fighter.Gender == 'Male':
        sir = 'Sir'
    else:
        sir = 'Mam'
    
    poop = None

    
    while poop == None:
        key = libtcod.console_wait_for_keypress(True)
        key_char = chr(key.c)
       
        if key_char == 'a':
            

            

            if name == 'Old Marek' and stage == 0:
                dump_item('Nothing', 0, 'First', 'Old Marek')
                break

            elif name == 'Old Marek' and stage == 1:

                if dump_item('Minor Healing Potion', 0, 0, 'Old Marek') == False:
                    if dump_item('Lesser Healing Potion', 0, 0, 'Old Marek') == False:
                        pass
                break
                
            
        if key_char == 'b':

            if stage == 0:
                sell_loop(care='Blyat')
                break
                

            

            
            if name == 'Old Marek' and stage == 1:
                if dump_item('Minor Healing Potion', 0, 3, 'Old Marek') == False:
                    if dump_item('Lesser Healing Potion', 0, 3, 'Old Marek') == False:
                        pass
                break

        if key_char =='c':

            if stage == 0:
                sell_loop(care=None)
                break
            
            if name == 'Old Marek' and stage == 1:
                if dump_item('Minor Healing Potion', 0, 6, 'Old Marek') == False:
                    if dump_item('Lesser Healing Potion', 0, 6, 'Old Marek') == False:
                        pass
                break
        if key_char == 'd':

            if name == 'Old Marek' and stage == 1:
                dump_item('Lesser Healing Potion', 0, 9, 'Old Marek')
                break

        if key.vk == libtcod.KEY_ENTER:
            if stage == 0:
                message('You depart from the Store.', libtcod.yellow)
                poop = "done"
                break
            else:
                poop = "done"
                break

                
            
            
            


    

def Dialogue_menu(header, options, width):


    #calculate total height for the header (after auto-wrap) and one line per option
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0
    height = len(options) + header_height

    #create an off-screen console that represents the menu's window
    window = libtcod.console_new(100, height)

    #print the header, with auto-wrap

    libtcod.console_print_rect_ex(window, 0, 0, width/2, height/2 - 5, libtcod.white, libtcod.LEFT, header)

    #print all the options
    y = header_height
    letter_index = ord('a')
    for option_text in options:
        text = '(' + chr(letter_index) + ') ' + option_text
        libtcod.console_print_ex(window, 0, y, libtcod.white, libtcod.LEFT, text)
        y += 1
        letter_index += 1

    #blit the contents of "window" to the root console
    x = SCREEN_WIDTH/2-25
    y = SCREEN_HEIGHT/2-5
    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 1.0)

    #present the root console to the player and wait for a key-press
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)


    #convert the ASCII code to an index; if it corresponds to an option, return it
    index = key.c - ord('a')
    if index >= 0 and index < len(options): return index
    return None


def inventory_inside_menu(header, options, width, eating=False, shop=False, equipping=False):

    global shop_msgs, shopping_list, equip_msgs, blyat2

    mouse = libtcod.Mouse()

    

    

    #calculate total height for the header (after auto-wrap) and one line per option
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0
    height = len(options) + header_height

    #create an off-screen console that represents the menu's window
    window = libtcod.console_new(100, height)


    

    img = libtcod.image_load('black_background.png')

    libtcod.image_blit_2x(img, 0, 0, 0, sx=0, sy=0, w=-1, h=-1)
    libtcod.image_blit_2x(img, 0, 90, 0, sx=0, sy=0, w=-1, h=-1)

    #print the header, with auto-wrap
    

    libtcod.console_print_rect_ex(window, 0, 0, width/2, height/2 - 5, libtcod.white, libtcod.LEFT, header)

    
    y = 7
    libtcod.console_print_ex(0, 7, 5, libtcod.white, libtcod.LEFT, 'MATERIALS:')
    for i in Dungeon.materials:
        libtcod.console_print_ex(0, 7, y, libtcod.white, libtcod.LEFT, str(i.item.quantity) + ' ' + str(i.name))
        y += 1

   

    
            
    pointer = 4
    

    
    

    #print all the options
    y = header_height
    letter_index = ord('a') ##CURRENT
    worth = 0
    count = 0
    temp_list = []
    item_list = []
    for option_text in options:
        
        text = '(' + chr(letter_index) + ') ' + option_text
        for i in inventorylist[0]:
            if i.name in option_text:
                if i.item.rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if i.item.rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if i.item.rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if i.item.rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)

            worth = i.item.worth
            temp_list.append(worth)
            if(i.item.is_equipped):
                item_list.append(i.item)
                message(str(i.name) + " added to list")
        if temp_list[count] > 0:
            libtcod.console_print_ex(window, 0, y, libtcod.white, libtcod.LEFT, text + " (" + str(temp_list[count]))
            libtcod.console_set_default_foreground(window, libtcod.yellow)
            libtcod.console_print_ex(window, 0+len(text + " (" + str(temp_list[count]) + " "), y, libtcod.white, libtcod.LEFT, "gold")
            libtcod.console_set_default_foreground(window, libtcod.white)
            libtcod.console_print_ex(window, 0+len(text + " (" + str(temp_list[count]) + " gold"), y, libtcod.white, libtcod.LEFT, ")")

            name = text[4:]
            for i in inventorylist[0]:
                if name in i.name and i.item.is_equipped:
                    libtcod.console_set_default_foreground(window, libtcod.white)
                    libtcod.console_print_ex(window, 0+len(text + " (" + str(temp_list[count]) + "gold) "), y, libtcod.white, libtcod.LEFT, "(")
                    libtcod.console_set_default_foreground(window, libtcod.red)
                    libtcod.console_print_ex(window, 0+len(text + " (" + str(temp_list[count]) + "gold) ("), y, libtcod.white, libtcod.LEFT, "E")
                    libtcod.console_set_default_foreground(window, libtcod.white)
                    libtcod.console_print_ex(window, 0+len(text + " (" + str(temp_list[count]) + "gold) (E"), y, libtcod.white, libtcod.LEFT, ")")
            
                
        else:
            libtcod.console_print_ex(window, 0, y, libtcod.white, libtcod.LEFT, text)
            libtcod.console_set_default_foreground(window, libtcod.red)
            libtcod.console_print_ex(window, 0+len(text), y, libtcod.white, libtcod.LEFT, " (N/A)")
            name = text[4:]
            for i in inventorylist[0]:
                if name in i.name and i.item.is_equipped:
                    libtcod.console_set_default_foreground(window, libtcod.white)
                    libtcod.console_print_ex(window, 0+len(text)+len(" (N/A)"), y, libtcod.white, libtcod.LEFT, " (")
                    libtcod.console_set_default_foreground(window, libtcod.red)
                    libtcod.console_print_ex(window, 0+len(text)+len(" (N/A) ("), y, libtcod.white, libtcod.LEFT, "E")
                    libtcod.console_set_default_foreground(window, libtcod.white)
                    libtcod.console_print_ex(window, 0+len(text)+len(" (N/A) (E"), y, libtcod.white, libtcod.LEFT, ")")
            
            
        

        libtcod.console_set_default_foreground(window, libtcod.white)
        y += 1
        letter_index += 1
        count += 1


    for (line, color) in shop_msgs:
        libtcod.console_set_default_foreground(window, color)
        libtcod.console_print_ex(window, 28, 0, libtcod.BKGND_NONE, libtcod.LEFT, line)
        

    #blit the contents of "window" to the root console
    x = SCREEN_WIDTH/2 - 5
    y = SCREEN_HEIGHT/15
    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 1.0)

    

    

    

    #present the root console to the player and wait for a key-press
    libtcod.console_flush()

    

    poop = None
    
    while poop == None:
        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)

        (mouse_x, mouse_y) = (mouse.cx, mouse.cy)

        if key.vk == libtcod.KEY_ENTER:
            poop = "lol"
            break

        if (mouse_y - 5) <= len(options) and (mouse_y - 5) >= 0:
            if mouse_x >= 71 and mouse_x <= (71 + len(options[mouse_y-6])):
                pass
        if mouse.lbutton_pressed:

            pass

        if key.vk == libtcod.KEY_UP and equipping == True:

            
            if(pointer == 4):
                pointer = 5
            
            
            for y in range(100):
                for x in range(44):
                    libtcod.console_print_ex(0, 25+x, 4+y, libtcod.black, libtcod.LEFT, ' ')
                    
            

            
            equip_msgs = []
            stat_displays = []
            plus_displays = []
            
            
            if pointer >= 6:
                pointer -= 1
            
            y_thing = pointer
            if equipping == False:
                name_thing = options[pointer - 6]
            else:
                name_thing = options[pointer - 5]

           
            

            for i in inventorylist[0]:
                blyat2 = '(-)'
                if i.name in name_thing:
                    if i.slot == 'Head':
                        blyat = player.fighter.head
                        blyat2 = 'Helmet'
                        cyka = i.name
                        break
                    if i.slot == 'Neck':
                        blyat = player.fighter.neck
                        blyat2 = 'Neck'
                        break
                    if i.slot == 'Right Hand':
                        blyat = player.fighter.Right
                        blyat2 = 'Right Hand'
                        break
                    if i.slot == 'Left Hand':
                        blyat = player.fighter.Left
                        blyat2 = 'Left Hand'
                        break
                    if i.slot == 'Both':
                        blyat = player.fighter.Both
                        blyat2 = 'Both Hands'
                        break
                    if i.slot == 'Shoulders':
                        blyat = player.fighter.shoulders
                        blyat2 = 'Shoulders'
                        break
                    if i.slot == 'Chest':
                        blyat = player.fighter.chest
                        blyat2 = 'Chest'
                        break
                    if i.slot == 'Bracers':
                        blyat = player.fighter.bracers
                        blyat2 = 'Bracers'
                        break
                    if i.slot == 'Gloves':
                        blyat = player.fighter.gloves
                        blyat2 = 'Gloves'
                        break
                    if i.slot == 'Legs':
                        blyat = player.fighter.legs
                        blyat2 = 'Legs'
                        break
                    if i.slot == 'Boots':
                        blyat = player.fighter.boots
                        blyat2 = 'Feet'
                        break
                    if i.slot == 'Left Ring':
                        blyat = player.fighter.ring1
                        blyat2 = 'Left Ring'
                        break
                    if i.slot == 'Right Ring':
                        blyat = player.fighter.ring2
                        blyat2 = 'Right Ring'
                        break
                    if i.slot == 'Left Trinket':
                        blyat = player.fighter.trinket1
                        blyat2 = 'Left Trinket'
                        break
                    if i.slot == 'Right Trinket':
                        blyat = player.fighter.trinket2
                        blyat2 = 'Right Trinket'
                        break
                
                    
            temp_thing2(blyat, i.item)
                

            
            count2 = 0
            listofdoom = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
            count_factor = 0
            passed = False
            for i in Dungeon.helm_info:
                
                if str(i) == '/':
                    passed = False
                    count_factor += 1
                if count_factor == 0:
                    string = 'Armor'
                    
                     
                if count_factor == 1:
                    string = 'Weight'
                if count_factor == 2:
                    string = 'Crit'
                if count_factor == 3:
                    string = 'Block Bonus'
                if count_factor == 4:
                    string = 'Weapon Min'
                if count_factor == 5:
                    string = 'Weapon Max'
                if count_factor == 6:
                    string = 'Agi Scaling'
                if count_factor == 7:
                    string = 'Str Scaling'
                if count_factor == 8:
                    string = 'Fire Res'
                if count_factor == 9:
                    string = 'Cold Res'
                if count_factor == 10:
                    string = 'Lightning Res'
                if count_factor == 11:
                    string = 'Spirit Res'
                if count_factor == 12:
                    string = 'Ammo Cost'
                if count_factor == 13:
                    string = 'Range'
                if count_factor == 14:
                    string = 'Conceal Bonus'
                if count_factor == 15:
                    string = 'Armor Pen'
                if str(i) != '/':
                
                        
                    if str(i) == '-':

                        try:

                            thing = int(Dungeon.helm_info[count2+1])
                            thing2 = int(Dungeon.helm_info[count2+2])
                            thing3 = int(Dungeon.helm_info[count2+3])
                            equip_message(str(i) + str(thing) + str(thing2) + str(thing3) + ' ' + string, libtcod.red)


                        except:
                            try:

                                thing = int(Dungeon.helm_info[count2+1])
                                thing2 = int(Dungeon.helm_info[count2+2])
                                
                                equip_message(str(i) + str(thing) + str(thing2) + ' ' + string, libtcod.red)


           
                            except:
                                try:

                                    thing = int(Dungeon.helm_info[count2+1])
                                    
                                    equip_message(str(i) + str(thing) + ' ' + string, libtcod.red)


                                except Exception as e:
                                    print str(e)

                        
                    
                if Dungeon.helm_info[count2] in listofdoom and Dungeon.helm_info[count2+1] in listofdoom:
                    equip_message('+' + Dungeon.helm_info[count2] + Dungeon.helm_info[count2+1] + ' ' + string, libtcod.green)



                if Dungeon.helm_info[count2] in listofdoom and Dungeon.helm_info[count2+1] == '/':
                    if count2 < 1:
                        equip_message('+' + Dungeon.helm_info[count2] + ' ' + string, libtcod.green)


                    elif Dungeon.helm_info[count2-1] != '-':
                        equip_message('+' + Dungeon.helm_info[count2] + ' ' + string, libtcod.green)



                if str(i) == '0':
                    
                    if count2 > 0 and count2 <= 1:
                        try:
                            thing = int(Dungeon.helm_info[count2-1])
                            equip_message('+' + str(thing) + str(i) + ' ' + string, libtcod.green)
                            
                        except:
                            pass
                    elif count2 >= 2:
                        try:
                            thing2 = int(Dungeon.helm_info[count2-2])
                            thing3 = int(Dungeon.helm_info[count2-3])
                            thing1 = int(Dungeon.helm_info[count2-1])
                            equip_message('+' + str(thing3) + str(thing2) + str(thing1) + str(i) + ' ' + string, libtcod.green)

                        except:
                            try:
                                thing2 = int(Dungeon.helm_info[count2-2])
                                
                                thing1 = int(Dungeon.helm_info[count2-1])
                                equip_message('+' + str(thing2) + str(thing1) + str(i) + ' ' + string, libtcod.green)

                            except:
                                try:
                                    
                                    
                                    thing1 = int(Dungeon.helm_info[count2-1])
                                    equip_message('+' + str(thing1) + str(i) + ' ' + string, libtcod.green)

                                    
                                except:
                                    pass
                    
                        
                        

                count2 += 1
                            
                
                

            
            
            libtcod.console_set_default_foreground(0, libtcod.white)

            
            

            listOfPrefixes = ["Left Hand","Min Damage: ", "Max Damage: ", "Fire: ", "Ice: ", "Lightning: ", "Spirit: ", 
                    " ","Right Hand","Min Damage: ", "Max Damage: ", "Fire: ", "Ice: ", "Lightning: ", "Spirit: "]

            for i in range(len(listOfPrefixes)):
                libtcod.console_print_ex(0, 114, 6+i, libtcod.BKGND_NONE, libtcod.LEFT, listOfPrefixes[i])

            libtcod.console_set_default_foreground(0, libtcod.white)

            for (line, color) in equip_msgs:
                libtcod.console_set_default_foreground(0, color)
                if blyat2 == '(-)':
                    libtcod.console_print_ex(0, 52, y_thing, libtcod.BKGND_NONE, libtcod.LEFT, '       ')
                    y_thing += 1
                elif line != str(0) and line != str(0) + str(0):
                    libtcod.console_print_ex(0, 52, y_thing, libtcod.BKGND_NONE, libtcod.LEFT, line)
                    y_thing += 1
            if((len(equip_msgs)) == 0):
                libtcod.console_set_default_foreground(0, libtcod.grey)
                libtcod.console_print_ex(0, 35, y_thing, libtcod.BKGND_NONE, libtcod.LEFT, 'No difference in stats.')
            else:
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_ex(0, 35, pointer, libtcod.BKGND_NONE, libtcod.LEFT, 'You ')
                libtcod.console_set_default_foreground(0, libtcod.green)
                libtcod.console_print_ex(0, 39, pointer, libtcod.BKGND_NONE, libtcod.LEFT, 'Gain')
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_ex(0, 43, pointer, libtcod.BKGND_NONE, libtcod.LEFT, '/')
                libtcod.console_set_default_foreground(0, libtcod.red)
                libtcod.console_print_ex(0, 44, pointer, libtcod.BKGND_NONE, libtcod.LEFT, 'Lose:')

    

    
            
            libtcod.console_set_default_foreground(0, libtcod.white)
                    
            
            
            libtcod.console_print_ex(0, 67, pointer, libtcod.yellow, libtcod.LEFT, '-->')
            libtcod.console_print_ex(0, 67, pointer+1, libtcod.yellow, libtcod.LEFT, '   ')

            libtcod.console_set_default_foreground(0, libtcod.yellow)  
            libtcod.console_print_ex(0, 35, 3, libtcod.BKGND_NONE, libtcod.LEFT, 'Current slot is: ' + str(blyat2))
            libtcod.console_set_default_foreground(0, libtcod.white)
            
            libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 1.0)
            libtcod.console_flush()
        if key.vk == libtcod.KEY_DOWN and equipping == True:
            
            try:

                for y in range(100):
                    for x in range(44):
                        libtcod.console_print_ex(0, 25+x, 4+y, libtcod.black, libtcod.LEFT, ' ')

                
                equip_msgs = []
                stat_displays = []
                plus_displays = []

                if pointer < (4 + len(options)):
                    
                    pointer += 1

                
                y_thing = pointer 
                if equipping == False:
                    name_thing = options[pointer - 6]
                else:
                    name_thing = options[pointer - 5]
                print "This is name thing" + str(name_thing)
                itemToFind = None
                for i in inventorylist[0]:
                    blyat2 = '(-)'
                    if i.name in name_thing:
                        if i.slot == 'Head' and i.slot in name_thing:
                            blyat = player.fighter.head
                            blyat2 = 'Helmet'
                            cyka = i.name
                            itemToFind = i
                            break
                        if i.slot == 'Neck' and i.slot in name_thing:
                            blyat = player.fighter.neck
                            blyat2 = 'Neck'
                            itemToFind = i
                            break
                        if i.slot == 'Right Hand' and i.slot in name_thing:
                            print "searched for " + i.name
                            blyat = player.fighter.Right
                            blyat2 = 'Right Hand'
                            itemToFind = i
                            break
                        if i.slot == 'Left Hand' and i.slot in name_thing:
                            blyat = player.fighter.Left
                            blyat2 = 'Left Hand'
                            itemToFind = i
                            break
                        if i.slot == 'Both' and i.slot in name_thing:
                            blyat = player.fighter.Both
                            blyat2 = 'Both Hands'
                            itemToFind = i
                            break
                        if i.slot == 'Shoulders' and i.slot in name_thing:
                            blyat = player.fighter.shoulders
                            blyat2 = 'Shoulders'
                            itemToFind = i
                            break
                        if i.slot == 'Chest' and i.slot in name_thing:
                            blyat = player.fighter.chest
                            blyat2 = 'Chest'
                            itemToFind = i
                            break
                        if i.slot == 'Bracers' and i.slot in name_thing:
                            blyat = player.fighter.bracers
                            blyat2 = 'Bracers'
                            itemToFind = i
                            break
                        if i.slot == 'Gloves' and i.slot in name_thing:
                            blyat = player.fighter.gloves
                            blyat2 = 'Gloves'
                            itemToFind = i
                            break
                        if i.slot == 'Legs' and i.slot in name_thing:
                            blyat = player.fighter.legs
                            blyat2 = 'Legs'
                            itemToFind = i
                            break
                        if i.slot == 'Boots' and i.slot in name_thing:
                            blyat = player.fighter.boots
                            blyat2 = 'Feet'
                            itemToFind = i
                            break
                        if i.slot == 'Left Ring' and i.slot in name_thing:
                            blyat = player.fighter.ring1
                            blyat2 = 'Left Ring'
                            itemToFind = i
                            break
                        if i.slot == 'Right Ring' and i.slot in name_thing:
                            blyat = player.fighter.ring2
                            blyat2 = 'Right Ring'
                            itemToFind = i
                            break
                        if i.slot == 'Left Trinket' and i.slot in name_thing:
                            blyat = player.fighter.trinket1
                            blyat2 = 'Left Trinket'
                            itemToFind = i
                            break
                        if i.slot == 'Right Trinket' and i.slot in name_thing:
                            blyat = player.fighter.trinket2
                            blyat2 = 'Right Trinket'
                            itemToFind = i
                            break
                    
                        
                temp_thing2(blyat, i.item)
                
                CalledOther = False
                
                try:
                    print "First call with : " + str(blyat)
                    if(blyat2 == "Both"):
                        print "This is the first call : " + str((damage_test(None,None, blyat)))
                        first_list = ((damage_test(None, None, blyat)))
                    if(blyat2 == "Left Hand"):
                        print "This is the first call : " + str((damage_test(blyat,None, None)))
                        first_list = ((damage_test(None, None, blyat)))
                    if(blyat2 == "Right Hand"):
                        print "This is the first call : " + str((damage_test(None,blyat, None)))
                        first_list = ((damage_test(None, None, blyat)))
                except Exception as e:
                    print "ERROR IN FIRST CALL : " + str(e)
                    first_list = [blyat2, 0,0,0,0,0,0] #What you have equipped is first_list
                try:
                    print str(itemToFind.item.name)
                    if(itemToFind.item.slot == "Both"):
                        print "Second call with : " + itemToFind.item.name + " " + str((damage_test(None, None, itemToFind.item, True)))
                        second_list = (damage_test(None, None, itemToFind.item, True))
                    if(itemToFind.item.slot == "Right Hand"):
                        print "Second call with : " + itemToFind.item.name + " " + str((damage_test(None, itemToFind.item, None, True)))
                        second_list = (damage_test(None,itemToFind.item, None, True))
                        if(len(player.fighter.Left) > 0):
                            third_list = (damage_test(player.fighter.Left[0], None, None, True)) 
                            CalledOther = True
                        else:
                            third_list = ["Left Hand", 0,0,0,0,0,0] #The third list, is whatever weapon we did not compare, when we are talking about DW
                    if(itemToFind.item.slot == "Left Hand"):
                        print "Second call with : " + itemToFind.item.name + " " + str((damage_test(itemToFind.item, None, None, True)))
                        second_list = (damage_test(itemToFind.item, None, None, True))
                        if(len(player.fighter.Right) > 0):
                            third_list = (damage_test(player.fighter.Right[0], None, None, True))
                            CalledOther = False
                        else:
                            third_list = ["Right Hand", 0,0,0,0,0,0] #The third list, is whatever weapon we did not compare, when we are talking about DW
                except Exception as e:
                    print "ERROR IN SECOND CALL :" + str(e)
                #Name, Weapon min, Weapon max, Weapon Fire, Weapon ice, weapon lightning, weapon spirit
                differenceList = [0,0,0,0,0,0,0]
                for i in range(len(first_list)):
                    if(i > 0):
                        differenceList[i] = (second_list[i] - first_list[i])
                
                print "This is the difference list: " + str(differenceList)
                

                
                count2 = 0
                count_factor = 0
                listofdoom = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
                passed = False
                for i in Dungeon.helm_info:
                    
                    if str(i) == '/':
                        passed = False
                        count_factor += 1

                    if count_factor == 0:
                        string = 'Armor'
                         
                    if count_factor == 1:
                        string = 'Weight'
                    if count_factor == 2:
                        string = 'Crit'
                    if count_factor == 3:
                        string = 'Block Bonus'
                    if count_factor == 4:
                        string = 'Weapon Min'
                    if count_factor == 5:
                        string = 'Weapon Max'
                    if count_factor == 6:
                        string = 'Agi Scaling'
                    if count_factor == 7:
                        string = 'Str Scaling'
                    if count_factor == 8:
                        string = 'Fire Res'
                    if count_factor == 9:
                        string = 'Cold Res'
                    if count_factor == 10:
                        string = 'Lightning Res'
                    if count_factor == 11:
                        string = 'Spirit Res'
                    if count_factor == 12:
                        string = 'Ammo Cost'
                    if count_factor == 13:
                        string = 'Range'
                    if count_factor == 14:
                        string = 'Conceal Bonus'
                    if count_factor == 15:
                        string = 'Armor Pen'
                    if str(i) != '/':
                        
                        if str(i) == '-':

                            try:

                                thing = int(Dungeon.helm_info[count2+1])
                                thing2 = int(Dungeon.helm_info[count2+2])
                                thing3 = int(Dungeon.helm_info[count2+3])
                                equip_message(str(i) + str(thing) + str(thing2) + str(thing3) + ' ' + string, libtcod.red)

                            except:
                                try:

                                    thing = int(Dungeon.helm_info[count2+1])
                                    thing2 = int(Dungeon.helm_info[count2+2])
                                    
                                    equip_message(str(i) + str(thing) + str(thing2) + ' ' + string, libtcod.red)

                                except:
                                    try:

                                        thing = int(Dungeon.helm_info[count2+1])
                                        
                                        equip_message(str(i) + str(thing) + ' ' + string, libtcod.red)

                                    except Exception as e:
                                        print str(e)

                            
                        
                    if Dungeon.helm_info[count2] in listofdoom and Dungeon.helm_info[count2+1] in listofdoom:
                        equip_message('+' + Dungeon.helm_info[count2] + Dungeon.helm_info[count2+1] + ' ' + string, libtcod.green)


                    if Dungeon.helm_info[count2] in listofdoom and Dungeon.helm_info[count2+1] == '/':
                        if count2 < 1:
                            equip_message('+' + Dungeon.helm_info[count2] + ' ' + string, libtcod.green)

                        elif Dungeon.helm_info[count2-1] != '-':
                            equip_message('+' + Dungeon.helm_info[count2] + ' ' + string, libtcod.green)

                    if str(i) == '0':
                        
                        if count2 > 0 and count2 <= 1:
                            try:
                                thing = int(Dungeon.helm_info[count2-1])
                                equip_message('+' + str(thing) + str(i) + ' ' + string, libtcod.green)
                             
                            except:
                                pass
                        elif count2 >= 2:
                            try:
                                thing2 = int(Dungeon.helm_info[count2-2])
                                thing3 = int(Dungeon.helm_info[count2-3])
                                thing1 = int(Dungeon.helm_info[count2-1])
                                equip_message('+' + str(thing3) + str(thing2) + str(thing1) + str(i) + ' ' + string, libtcod.green)


                            except:
                                try:
                                    thing2 = int(Dungeon.helm_info[count2-2])
                                    
                                    thing1 = int(Dungeon.helm_info[count2-1])
                                    equip_message('+' + str(thing2) + str(thing1) + str(i) + ' ' + string, libtcod.green)


                                except:
                                    try:
                                        
                                        
                                        thing1 = int(Dungeon.helm_info[count2-1])
                                        equip_message('+' + str(thing1) + str(i) + ' ' + string, libtcod.green)

                                        
                                    except:
                                        pass
                        
                            
                            

                    count2 += 1
                                
                    
                    
                start_Index = 0
                

                if(second_list[0] == 'Right Hand:'):
                    start_Index = 8
                
                if(second_list[0] == 'Both'):
                    listOfPrefixes = ["Both", "Min Damage: ", "Max Damage: ", "Fire: ", "Ice: ", "Lightning ", "Spirit: "]
                

                #to_crit (crit %), weapon_agi (Y/N?), weapon_str (Y/N?), armor_pen (Y), proc_chanse (Y), Conceal_Bonus (Y), weight, env (Object proc)
                listOfPrefixes = ["Left Hand","Min Damage: ", "Max Damage: ", "Fire: ", "Ice: ", "Lightning: ", "Spirit: ", 
                    " ","Right Hand","Min Damage: ", "Max Damage: ", "Fire: ", "Ice: ", "Lightning: ", "Spirit: "]
                
                
                for i in range(len(third_list)):
                    if(i >0):
                        if(start_Index == 8):
                            if(third_list[i] == 0):

                                libtcod.console_set_default_foreground(0, libtcod.grey)
                                libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i, libtcod.BKGND_NONE, libtcod.LEFT, str(third_list[i]) + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                            else:

                                libtcod.console_set_default_foreground(0, libtcod.white)
                                libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i, libtcod.BKGND_NONE, libtcod.LEFT, str(third_list[i]) + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                        else: #You already have a left equipped, so render the third list to be your second weapon 
                            if(third_list[i] == 0):

                                libtcod.console_set_default_foreground(0, libtcod.grey)
                                libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i+8, libtcod.BKGND_NONE, libtcod.LEFT, str(third_list[i]) + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                            else:
                                #Bottom region when top has been rendered
                                libtcod.console_set_default_foreground(0, libtcod.grey)
                                libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i+8, libtcod.BKGND_NONE, libtcod.LEFT, str(third_list[i]/2) + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                
                
                for i in range(len(differenceList)): #Go through the differences of the values
                    

                    if(i > 0): #If you are past the first index, which is the name of the Slot we are talking about
                        value = differenceList[i] #The differential between what you have equipped and what you are equipping
                        if(value > 0):
                             #It's more than what you ahve equipped
                            
                            if(start_Index < 8):
                                libtcod.console_set_default_foreground(0, libtcod.green) #Both of these cases are for increments, give them green
                                libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, str(first_list[i] + value) +  "  (+" + str(differenceList[i]) + ")" + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                            else:
                                libtcod.console_set_default_foreground(0, libtcod.green) #Green as well
                                libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, str((first_list[i] + value)/2) +  "  (+" + str((differenceList[i])/2) + ")" + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                            #Add the value to what we have equipped, and render it green
                        if(value < 0):
                             #It's less than what you have equipped, 
                            if(start_Index < 8):        
                                libtcod.console_set_default_foreground(0, libtcod.red)
                                libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, str(first_list[i] + value) +  "  (" + str(differenceList[i]) + ")" + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                            else:
                                libtcod.console_set_default_foreground(0, libtcod.red)
                                libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, str((first_list[i] + value)/2) +  "  (" + str((differenceList[i])/2) + ")" + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                                #Since the differential is a negative one, simply render what the target weapon is, but with the differential as well
                        else: #Render lower menu for right hand
                             #It's equal
                            if(start_Index < 8):
                                #egin by writing out all the values
                                libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, str(first_list[i] + value))
                                
                                #Check to see if there is a negative differential
                                if(differenceList[i] < 0):
                                    libtcod.console_set_default_foreground(0, libtcod.red)
                                    libtcod.console_print_ex(0, 115+len(listOfPrefixes[i])+len(str(first_list[i] + value)), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, "  (" + str(differenceList[i]) + ")" + "  ")    
                                elif(differenceList[i] == 0):
                                    libtcod.console_set_default_foreground(0, libtcod.grey)
                                    libtcod.console_print_ex(0, 115+len(listOfPrefixes[i])+len(str(first_list[i] + value)), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, "  (" + str(differenceList[i]) + ")" + "  ") 
                                else:
                                    libtcod.console_set_default_foreground(0, libtcod.green)
                                    libtcod.console_print_ex(0, 115+len(listOfPrefixes[i])+len(str(first_list[i] + value)), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, "  (+" + str(differenceList[i]) + ")" + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                            else:
                                if(len(player.fighter.Left) > 0):
                                    libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, str((first_list[i] + value)/2))
                                else:
                                    libtcod.console_print_ex(0, 115+len(listOfPrefixes[i]), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, str((first_list[i] + value)))
                                
                                
                                if(differenceList[i] < 0):
                                    libtcod.console_set_default_foreground(0, libtcod.red)
                                    libtcod.console_print_ex(0, 115+len(listOfPrefixes[i])+len(str(first_list[i] + value)), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, "  (" + str(differenceList[i]/2) + ")" + "  ")    
                                elif(differenceList[i] == 0):
                                    libtcod.console_set_default_foreground(0, libtcod.grey)
                                    libtcod.console_print_ex(0, 115+len(listOfPrefixes[i])+len(str(first_list[i] + value)), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, "  (" + str(differenceList[i]/2) + ")" + "  ") 
                                else:
                                    libtcod.console_set_default_foreground(0, libtcod.green)
                                    if(len(player.fighter.Left) > 0):
                                        libtcod.console_print_ex(0, 115+len(listOfPrefixes[i])+len(str(first_list[i] + value)), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, "  (+" + str(differenceList[i]/2) + ")" + "  ")
                                    else:
                                        libtcod.console_print_ex(0, 115+len(listOfPrefixes[i])+len(str(first_list[i] + value)), 6+i+start_Index, libtcod.BKGND_NONE, libtcod.LEFT, "  (+" + str(differenceList[i]) + ")" + "  ")
                                libtcod.console_set_default_foreground(0, libtcod.white)
                                #Remains the same, so we just don't add anything to it and render the same as we currently have
                        #Regardless of what the value is, we add it to 
                
                
                for i in range(len(listOfPrefixes)):
                  
                    libtcod.console_print_ex(0, 114, 6+i, libtcod.BKGND_NONE, libtcod.LEFT,str(listOfPrefixes[i]))               

 


                for (line, color) in equip_msgs:
                    libtcod.console_set_default_foreground(0, color)
                    if blyat2 == '(-)':
                        libtcod.console_print_ex(0, 52, y_thing, libtcod.BKGND_NONE, libtcod.LEFT, '       ')
                        y_thing += 1
                    elif line != str(0) and line != str(0) + str(0):
                        libtcod.console_print_ex(0, 52, y_thing, libtcod.BKGND_NONE, libtcod.LEFT, line)
                        y_thing += 1
                if((len(equip_msgs)) == 0):
                    libtcod.console_set_default_foreground(0, libtcod.grey)
                    libtcod.console_print_ex(0, 35, y_thing, libtcod.BKGND_NONE, libtcod.LEFT, 'No difference in stats.')
                else:
                    libtcod.console_set_default_foreground(0, libtcod.white)
                    libtcod.console_print_ex(0, 35, pointer, libtcod.BKGND_NONE, libtcod.LEFT, 'You ')
                    libtcod.console_set_default_foreground(0, libtcod.green)
                    libtcod.console_print_ex(0, 39, pointer, libtcod.BKGND_NONE, libtcod.LEFT, 'Gain')
                    libtcod.console_set_default_foreground(0, libtcod.white)
                    libtcod.console_print_ex(0, 43, pointer, libtcod.BKGND_NONE, libtcod.LEFT, '/')
                    libtcod.console_set_default_foreground(0, libtcod.red)
                    libtcod.console_print_ex(0, 44, pointer, libtcod.BKGND_NONE, libtcod.LEFT, 'Lose:')

        
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                        
                
                libtcod.console_print_ex(0, 42, pointer-2, libtcod.yellow, libtcod.LEFT, '   ')
                
                libtcod.console_print_ex(0, 48, pointer+2, libtcod.yellow, libtcod.LEFT, ' ')
                        
                libtcod.console_print_ex(0, 67, pointer-1, libtcod.yellow, libtcod.LEFT, '   ')
                libtcod.console_print_ex(0, 67, pointer, libtcod.yellow, libtcod.LEFT, '-->')

                libtcod.console_set_default_foreground(0, libtcod.yellow)  
                libtcod.console_print_ex(0, 35, 3, libtcod.BKGND_NONE, libtcod.LEFT, 'Current slot is: ' + str(blyat2))
                libtcod.console_set_default_foreground(0, libtcod.white)
                
                libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 1.0)
                libtcod.console_flush()
            except Exception as e:
                print "ERROR IN POINTER " + str(e)


            
            
            

        
    

    

    #convert the ASCII code to an index; if it corresponds to an option, return it
        index = key.c - ord('a')

        if index == 13 and len(shopping_list) > 0 and shop == True:
            return 'Declined'
        if index >= 0 and index < len(options):
            
            return index

        
        if index == 24 and shop == True:
            if len(shopping_list) > 0:
            
                return 'Accepted'

        
        
        
def find_Thing(search_slot, name):
    for item in inventorylist[0]:
        if item.slot == search_slot and item.name == name:
            return item


def inventory_menu(header, shop=False, search_slot=None, dequipping=False, equipping=False):
    global shopping_list, EQUIP_LIST
    #show a menu with each item of the inventory as an option
    key_char = chr(key.c)
    PRESSED = ord(key_char)

    

    poop_list = []

    scoop = 0
    count = 0
    
    toEquip = None

    
    if len(inventorylist[0]) == 0:
        options = ['Inventory is empty.']
    else:
        options = []

        if search_slot != None:
            for item in inventorylist[0]:

                if item.slot == search_slot:
                    

                    toEquip = item

                
                    text = item.name
                    if item.is_equipped == True:
                        
                        text += ' (Equipped on ' + str(item.slot) + ')'
                        options.append(text + "(" + item.slot + ")") 
                    else:
                       
                        
                        options.append(text + "(" + item.slot + ")")
                   
                count += 1
                item.index = count - 1

                

            
            
        
        if search_slot == None:
            for item in inventorylist[0]:
                if item.is_equipped == False:
                    
                    if item.slot != None:
                        text = item.name + ' ' + '(' +  str(item.weight) + 's) ' + '(' + str(item.slot) + ')'
                        
                    else:
                        
                        text = item.name + ' ' + '(' +  str(item.weight) + 's)'
                    count += 1
                    item.index = count - 1
                    
                if item.is_equipped == True:
                    message(str(item.name) + " is equipped")
                    if item.slot != None:
                        text = item.name + ' ' + '(' +  str(item.weight) + 's) ' + '(' + str(item.slot) + ') (Equipped)'
                        
                    else:
                        
                        text = item.name + ' ' + '(' +  str(item.weight) + 's)'
                    count += 1
                    item.index = count - 1

                if search_slot == None:
                    try:
                        if len(text2) > 0 and text2 not in options:
                            options.append(text2)
                    except:
                        options.append(text)

                
            if shop == True:
                
                try:
                    if item.item.worth > 0:
                        text += str('   Sells for: ' + str(item.item.worth) + ' gold.')
                    else:
                        text +=('   No Worth.')
                except:
                    text += ('   No Worth.')
                
            #show additional information, in case it's equipped
            
            
        
        if len(inventorylist[0]) == 25:
            if len(inventorylist) > 1:
                if len(inventorylist[1]) > 0:
                    options.append('Next page')

    if shop == True:
        index = inventory_inside_menu(header, options, INVENTORY_WIDTH, False, True)
    
    else:
        
        if search_slot == None:
            if len(options) == 0:
                message("Your inventory is Empty!", libtcod.red)
                return
            index = inventory_inside_menu(header, options, INVENTORY_WIDTH)

    
    if search_slot != None and len(options) == 0:
        message("No items to choose from!", libtcod.red)
        return 

    page = 0
    if(len(options) > 0):
        index = inventory_inside_menu(header, options, INVENTORY_WIDTH, equipping = True)
    if index is None or len(inventorylist[0]) == 0 or index == -84:
        
        
        return None

    if index == 'Accepted':
        return 'Accepted'
    
    
    count = 0
    

    toCheck = str(options[index]).split('(')
    print (search_slot)
    if search_slot != None:    
        
        for item in inventorylist[0]:
            if item.slot == search_slot and item.name == toCheck[0]:
                toEquip = item
        if(toEquip != None):

            inventorylist[0].remove(toEquip)
            
            toEquip.item.equip(toEquip.item.slot, True)




    
    if index is int(25):
        options = []
        number = 0
        page += 1
        if len(inventorylist) == (page+1):
            if len(inventorylist[page]) > 0:
                for item in inventorylist[page]:
                    text = item.name + ' ' + '(' +  str(item.weight) + 's) ' + '(' + str(item.slot) + ')'
                    if item.is_equipped == True:
                        text = item.name + ' ' + '(' +  str(item.weight) + 's) ' + '(Equipped on ' + str(item.slot) + ")"

                    if shop == True:
                        try:
                            text += str('Sells for: ' + item.worth)
                        except:
                            pass
                    options.append(text)
                    number += 1

                if (25 - len(inventorylist[page])) > 0:
                    for i in range(25 - len(inventorylist[page])):
                        text = ''
                        options.append(text)           
        else:
            return None

        

        if shop == True:
            index2 = inventory_inside_menu(header, options, INVENTORY_WIDTH, False, True)
        else:
            if search_slot == None:
                index2 = inventory_inside_menu(header, options, INVENTORY_WIDTH)
            else:
                message("EQUIPPING")
                index2 = inventory_inside_menu(header, options, INVENTORY_WIDTH, equipping = True)
        
        if index2 is None or len(inventorylist[page]) == 0:        
            return None

        shopping_list = []
        if type(index2) != str:
            shopping_list.append((inventorylist[page])[index2].item)
        
            return (inventorylist[page])[index2].item
        return 'Declined'
    shopping_list = []
    if key.vk == libtcod.KEY_ENTER:
        return None
    if type(index) != str:
        
        shopping_list.append((inventorylist[page])[index].item)
        return (inventorylist[0])[index].item

    return 'Declined'



def eating_menu(header):
    
    if len(inventorylist) == 0:
        options = ['Inventory is empty.']


    else:
        options = []
        options2 = []
        for i in range(0, len(inventorylist)):
            for item in inventorylist[i]:
                if 'Corpse' in item.name:
                    text = item.name + ' ' + '(' +  str(item.weight) + 's)'
                    #show additional information, in case it's equipped
                    options.append(text)
                    options2.append(item)
                elif 'Essence of Fear' in item.name:
                    text = item.name + ' ' + '(' +  str(item.weight) + 's)'
                    #show additional information, in case it's equipped
                    options.append(text)
                    options2.append(item)
                elif 'Cooked' in item.name:
                    text = item.name + ' ' + '(' +  str(item.weight) + 's)'
                    #show additional information, in case it's equipped
                    options.append(text)
                    options2.append(item)
        if len(options) == 25:
            options.append('Next page')

    if len(options) == 0:
        message('You have nothing edible!', libtcod.red)
        return None

    index = inventory_inside_menu('What do you wish to eat?', options, 100, True)

    try:
        thing = options[index]

        thing = thing.translate(None, "()1234567890")

        thing = thing[:-1]

        listofdoom = []

        stuff = 0

        for i in thing:
            listofdoom.append(i)

        for i in listofdoom:
            try:
                if i == ' ' and listofdoom[stuff+1] == ' ':
                    listofdoom.remove(i)
            except:
                break
            stuff += 1

        listofdoom = listofdoom[:-1]

        thingofdoom = ''

        for i in listofdoom:
            thingofdoom += i

        for i in range(0, len(inventorylist)):
            for item in inventorylist[i]:
                if thingofdoom in item.name:
                    return item.item
    except:
        message('You must choose an item by pressing a valid Character.', libtcod.red)

    #convert the ASCII code to an index; if it corresponds to an option, return it

    
    #show a menu with each item of the inventory as an option
    
    page = 0
    #if an item was chosen, return it

    if index is None or len(inventorylist[0]) == 0:
        return None
    if index is int(25):
        options = []
        number = 0
        page += 1
        if len(inventorylist) == (page+1):
            if len(inventorylist[page]) > 0:
                for item in inventorylist[page]:
                    text = item.name + ' ' + '(' +  str(item.weight) + 's) ' + '(' + str(item.slot) + ')'
                    if item.is_equipped == True:
                        text = item.name + ' ' + '(' +  str(item.weight) + 's) ' + '(Equipped on ' + str(item.slot) + ")"
                    options.append(text)
                    number += 1

                if (25 - len(inventorylist[page])) > 0:
                    for i in range(25 - len(inventorylist[page])):
                        text = ''
                        options.append(text)

        else:
            return None



def ground_menu(header):
    #show a menu with each item of the inventory as an option
    img = libtcod.image_load('black_background.png')

    libtcod.image_blit_2x(img, 0, 0, 0, sx=0, sy=0, w=-1, h=-1)

    key_char = chr(key.c)
    temp = []
    temp2 = []

    for object in objects:  #look for an item in the player's tile
        if object.x == player.x and object.y == player.y and object.item:

            if len(temp) < 25:
                temp.append(object.item)
            if len(temp) == 25:
                temp2.append(object.item)

    if len(temp) == 0:
        return None

    (x, y) = (player.x, player.y)

    names = [obj.name for obj in objects
            if obj.x == x and obj.y == y and obj.name != 'player' and obj.name != 'stairs' and obj.name != 'derp']

    try:
        quantity = [obj.item.amount for obj in objects
                    if obj.x == x and obj.y == y and obj.name != 'player' and obj.name != 'stairs' and obj.name != 'derp' and obj.item.rarity == 'Material']
    except:
        pass

    weights = [obj.weight for obj in objects
              if obj.x == x and obj.y == y and obj.name != 'player' and obj.name != 'stairs' and obj.name != 'derp']

    e = 0
    amounts = 1

    options = []
    second = []
    listofdoom = []
    for i in range(100):
        listofdoom.append(i)
    for i in range(len(names)):
        try:
            if names[i+1] == names[i]:
                amounts += 1
                text = str(amounts) + ' ' + str(names[i]) + ' ' + '(' +  str(weights[e]) + ' lb.)'
            else:
                amounts = 1
                text = str(names[i]) + ' ' + '(' +  str(weights[e]) + ' lb.)'
        except:
            if amounts > 1:
                text = str(amounts) + ' ' + str(names[i]) + ' ' + '(' +  str(weights[e]) + ' lb.)'
            else:
                if str(weights[e]) != 'None':
                    text = str(names[i]) + ' ' + '(' +  str(weights[e]) + ' lb.)'
                else:
                    text = (str(quantity[0])) + ' ' + str(names[i])
        if len(options) == 25:
            break



        
        e += 1
        #show additional information, in case it's equipped
        
        
        
            
            
        options.append(text)
            
            
            
            
                
                    
##            if text[0] < (options[len(options)])[0] and len(options) > 0:
##                options.remove(options[len(options)])
##            
##                options.append(text)
##            else:
##                options.append(text)




    if len(temp) == 25:
        options.append('Next page')


    index = inventory_inside_menu(header, options, INVENTORY_WIDTH)

    #if an item was chosen, return it

    if index is None:
        return None
    if index is int(26):
        options = []
        for item in temp2:
            if len(options) == 25:
                break
            text = item.name + ' ' + '(' +  str(item.weight) + 's)'
            #show additional information, in case it's equipped
            options.append(text)


        index2 = inventory_inside_menu(header, options, INVENTORY_WIDTH)
        if index2 is None or len(temp2) == 0:
            return None
        return temp2[index2]
    return temp[index]


def stun():
    #ask the player for a target to confuse
    message('Choose an Enemy to stun!', libtcod.light_cyan)
    monster = target_monster(1.5)
    if monster is None: return 'cancelled'

    try:
        monster.debuffs.append('Stunned')
    except:
        monster.tale_told = 'Stunned'

    message('The ' + monster.name + ' is stunned!', libtcod.light_green)
    if 'Block Talent 10' in player.fighter.event:
        player.fighter.Stamina -= 65
    else:
        player.fighter.Stamina -= 75

    return 'take-turn'

def Breathe():
    if player.fighter.Stamina == player.fighter.Max_stamina:
        player.fighter.Stamina = player.fighter.Max_stamina
    elif player.fighter.Stamina > player.fighter.Max_stamina:
        player.fighter.Stamina = player.fighter.Max_stamina
        message('You are already at full Stamina!', libtcod.red)
    else:
        stamina_gain(stamina=5, factor=100)
    return 'take-turn'
def Break_Armor():
    message("LMB a enemy to cast Break Armor, RMB to cancel.", libtcod.light_cyan)
    monster = target_monster(1.5)
    if monster is None: return 'cancelled'

    if 'Spear' in get_equipped_in_slot('Both Hands').weapon_type:
        monster.fighter.defense -=10


        message('ERMAGERD')

    for object in objects:
        if object.tale_told == '' and object.monster_type == 'NPC':

            object.tale_told = 'Attacked'
            break

        elif object.tale_told == '' and object.monster_type == '':
            object.tale_told = 'Attacked'
            break

        elif object.tale_told == 'Done' and object.monster_type == 'NPC':

            object.tale_told = 'Done and Attacked'
            break


    return 'take-turn'


def Slash():
        
    if player.fighter.skill2 == 'Slash':
        monster = closest_monster(1)
        if monster is None:
            message('No enemy is close enough to Slash.', libtcod.red)
            return 'cancelled'


        elif 'Off Talent 1' in player.fighter.event:
            if player.fighter.Stamina - 40 >= 0:

                player.fighter.Stamina -= 40
                lower = int(round(player.fighter.Base_Agility*0.65))
                higher = int(round(player.fighter.Base_Agility*1.0))

                if len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:
                    lower += int(round(player.fighter.Left[0].weapon_min*0.65))
                    higher += int(round(player.fighter.Left[0].weapon_max*0.65))

                elif len(player.fighter.Right) > 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None:
                    lower += int(round(player.fighter.Right[0].weapon_min*0.65))
                    
                    higher += int(round(player.fighter.Right[0].weapon_max*0.65))

                lower = int(round(lower*1.20))
                higher = int(round(higher*1.20))
                LIGHTNING_DAMAGE = libtcod.random_get_int(0, lower, higher)
                message('You slash the ' + monster.name + ' for ' + str(LIGHTNING_DAMAGE) + ' Physical damage.', libtcod.red)
                monster.fighter.take_damage(LIGHTNING_DAMAGE)
                for object in objects:

                    if object.tale_told == '' and object.monster_type == 'NPC':

                        object.tale_told = 'Attacked'
                        break

                    elif object.tale_told == '' and object.monster_type == '':
                        object.tale_told = 'Attacked'
                        break

                    elif object.tale_told == 'Done' and object.monster_type == 'NPC':
                        object.tale_told = 'Done and Attacked'
                        break

                for object in objects:
                    if object.ai:
                        object.ai.take_turn()
                        fov_recompute = True
                        

            elif player.fighter.Stamina - 40 < 0:
                
                message("Not enough Stamina! (Costs 40 Stamina)", libtcod.red)
                
        else:
            if player.fighter.Stamina - 55 >= 0:

                player.fighter.Stamina -= 55
                
                lower = int(round(player.fighter.Base_Agility*0.65))
                higher = int(round(player.fighter.Base_Agility*1.0))

                if len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:
                    lower += int(round(player.fighter.Left[0].weapon_min*0.65))
                    higher += int(round(player.fighter.Left[0].weapon_max*0.65))

                elif len(player.fighter.Right) > 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None:
                    lower += int(round(player.fighter.Right[0].weapon_min*0.65))
                    
                    higher += int(round(player.fighter.Right[0].weapon_max*0.65))

                lower = int(round(lower*1.20))
                higher = int(round(higher*1.20))
                    
                LIGHTNING_DAMAGE = libtcod.random_get_int(0, lower, higher)
                message('You slash the ' + monster.name + ' for ' + str(LIGHTNING_DAMAGE) + ' Physical damage.', libtcod.red)
                monster.fighter.take_damage(LIGHTNING_DAMAGE)
                for object in objects:

                    if object.tale_told == '' and object.monster_type == 'NPC':

                        object.tale_told = 'Attacked'
                        break

                    elif object.tale_told == '' and object.monster_type == '':
                        object.tale_told = 'Attacked'
                        break

                    elif object.tale_told == 'Done' and object.monster_type == 'NPC':
                        object.tale_told = 'Done and Attacked'
                        break

                for object in objects:
                    if object.ai:
                        object.ai.take_turn()
                        fov_recompute = True
                        


            elif player.fighter.Stamina - 55 < 0:
                message('bug')
                message("Not enough Stamina! (Costs 55 Stamina)", libtcod.red)

                
                
        





#Fix so that Skills scale with Weapon damage lol

def slash_dmg():
    lower = int(round(player.fighter.Base_Agility*0.65))
    higher = int(round(player.fighter.Base_Agility*1.0))

    if len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:
        lower += int(round(player.fighter.Left[0].weapon_min*0.65))
        higher += int(round(player.fighter.Left[0].weapon_max*0.65))

        

    elif len(player.fighter.Right) > 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None:
        lower += int(round(player.fighter.Right[0].weapon_min*0.65))
        
        higher += int(round(player.fighter.Right[0].weapon_max*0.65))

    lower = int(round(lower*1.20))
    higher = int(round(higher*1.20))

    

    thing = str(lower) + ' to ' + str(higher)

    return thing
    

def ww_dmg():
    damage = int(round(player.fighter.Base_Strength/2)) + int(round(player.fighter.Base_Agility/2))
    damage += int(round(((player.fighter.Left[0].weapon_min + player.fighter.Left[0].weapon_max)/2)))
    damage += int(round(((player.fighter.Right[0].weapon_min + player.fighter.Right[0].weapon_max)/4)))
    damage -= 10

    return str(damage)

def Whirlwind():
    global player

    if player.fighter.Stamina - 55 < 0:
        message("Not enough Stamina! (Costs 55 Stamina)", libtcod.red)
        



    elif player.fighter.Stamina - 55 >= 0:

        player.fighter.Stamina -= 55


        x = player.x
        y = player.y

        radius = int(round(player.fighter.Base_Strength/6 + player.fighter.Base_Agility/8))

        message('The whirlwind hits everything within ' + str(radius) + ' tiles!', libtcod.orange)

        damage = int(round(player.fighter.Base_Strength/2)) + int(round(player.fighter.Base_Agility/2))
        damage += int(round(((player.fighter.Left[0].weapon_min + player.fighter.Left[0].weapon_max)/2)))
        damage += int(round(((player.fighter.Right[0].weapon_min + player.fighter.Right[0].weapon_max)/4)))
        damage -= 10
##                   minimum2 = player.fighter.Left[0].weapon_min + player.fighter.Left[0].weapon_str + player.fighter.Left[0].weapon_agi
##                   maximum2 = player.fighter.Left[0].weapon_max + player.fighter.Left[0].weapon_str + player.fighter.Left[0].weapon_agi
        for obj in objects:  #damage every fighter in range, including the player
            if obj.distance(x, y) <= radius and obj.fighter and obj.name != 'player':
                message('The ' + obj.name + ' is hit by the Whirlwind for ' + str(damage) + ' hit points.', libtcod.orange)
                
                try:
                    proc = libtcod.random_get_int(0, 1, 100)
                    if(proc < (get_weapon_in_slot(player.fighter.Left).proc_chanse)):
                        (get_weapon_in_slot(player.fighter.Left)).hit_effect()
                except:
                    pass
                try:
                    proc = libtcod.random_get_int(0, 1, 100)
                    if(proc < (get_weapon_in_slot(player.fighter.Right).proc_chanse)):
                        (get_weapon_in_slot(player.fighter.Right)).hit_effect()
                except:
                    pass
                
                obj.fighter.take_damage(damage)

                if obj.tale_told == '' and obj.monster_type == 'NPC':

                    obj.tale_told = 'Attacked'


                elif obj.tale_told == '' and obj.monster_type == '':
                    obj.tale_told = 'Attacked'

                elif obj.tale_told == 'Done' and obj.monster_type == 'NPC':

                    obj.tale_told = 'Done and Attacked'






    return 'take-turn'

def Split():
    #ask the player for a target to confuse
    message('LMB a enemy to cast Split on it, RMB to cancel.', libtcod.light_cyan)
    monster = target_monster(1.5)
    if monster is None: return 'cancelled'


    hit = libtcod.random_get_int(0, 1, 2)
    damage = int(round(player.fighter.Strength*2.5))


    if player.fighter.Stamina - 100 >= 0:
        player.fighter.Stamina -= 100
        message('With a cry of strength, you swing your weapon!!!', libtcod.light_red)

        if hit == 1:
            message('The ' + monster.name + ' is struck for ' + str(damage) + '!!', libtcod.light_red)
            monster.fighter.take_damage(damage)

        if hit == 2:
            message('You swing with all your might, but you miss!', libtcod.yellow)


    elif player.fighter.Stamina - 100 < 0:
        message("Not enough Stamina! (Costs 100 Stamina!)", libtcod.red)

    for object in objects:
        if object.tale_told == '' and object.monster_type == 'NPC':

            object.tale_told = 'Attacked'
            break

        elif object.tale_told == '' and object.monster_type == '':
            object.tale_told = 'Attacked'
            break

        elif object.tale_told == 'Done' and object.monster_type == 'NPC':
            object.tale_told = 'Done and Attacked'
            break
    return 'take-turn'

def Sturdy():
    if player.fighter.hp < player.fighter.max_hp:
        if player.fighter.Stamina >= 60:
            message('You recover some health.', libtcod.green)
            

            player.fighter.hp += int(round(player.fighter.max_hp*0.30 + (player.fighter.Base_Endurance/3)))
            if player.fighter.hp > player.fighter.max_hp:
                player.fighter.hp = player.fighter.max_hp
            player.fighter.Stamina -= 60
            return 'take-turn'
        else:
            message('Not enough Stamina! (Costs 60)', libtcod.red)
    else:
        message('You are already at full hp!', libtcod.red)


    
    

def Block():

    if len(player.fighter.Right) > 0:
        
        if get_equipped_in_left_slot(player.fighter.Right, 'Shield') != None:
            
            if player.fighter.Block_Duration == 0:
                if player.fighter.Stamina - 60 >= 0:
                    player.fighter.Stamina -= 60
                    message('You raise your shield to block incoming attacks!', libtcod.green)
                    if 'Block Talent 7' in player.fighter.event:
                        if player.fighter.Base_Endurance <= 11:
                            factor = 6
                        else:
                            factor = 7
                        player.fighter.Block_Bonus = 2 + int(round(player.fighter.Base_Endurance/2)) - factor
                    else:
                        player.fighter.Block_Bonus = 2 + int(round(player.fighter.Base_Endurance/4)) - 4
                    if 'Block Talent 1' in player.fighter.event:
                        player.fighter.Block_Duration = 7
                    else:
                        player.fighter.Block_Duration = 5

                    player.fighter.Block_Bonus += player.fighter.Right[0].block_bonus
                    
                    player.fighter.defense = player.fighter.defense + player.fighter.Block_Bonus
                    return 'take-turn'
                else:
                    message("You don't have enough Stamina to do that! (Costs 60 Stamina)", libtcod.red)
            else:
                
                
##                if 'Block Talent 11' in player.fighter.event:
##                    
##                    if player.fighter.Stamina - 40 >= 0:
##                        
##                        Shield_Slam()
##
##                    else:
##                        message('Not enough stamina!', libtcod.red)
##                else:
##                    message('You are already blocking!', libtcod.red)
                message('You are already blocking!', libtcod.red)
            




    if len(player.fighter.Left) > 0:
        if get_equipped_in_left_slot(player.fighter.Left, 'Shield') != None:
            if player.fighter.Block_Duration == 0:
                if player.fighter.Stamina - 60 >= 0:
                    player.fighter.Stamina -= 60
                    message('You raise your shield to block incoming attacks!', libtcod.green)
                    if 'Block Talent 1' in player.fighter.event:
                        player.fighter.Block_Duration = 7
                    else:
                        player.fighter.Block_Duration = 5
                    if 'Block Talent 7' in player.fighter.event:
                        if player.fighter.Base_Endurance <= 11:
                            factor = 6
                        else:
                            factor = 7
                        player.fighter.Block_Bonus = 2 + int(round(player.fighter.Base_Endurance/2)) - factor
                    else:
                        player.fighter.Block_Bonus = 2 + int(round(player.fighter.Base_Endurance/4)) - 4

                    player.fighter.Block_Bonus += player.fighter.Left[0].block_bonus
                    
                    
                    player.fighter.defense =  player.fighter.defense + player.fighter.Block_Bonus 
                    return 'take-turn'
                else:
                    message("You don't have enough Stamina to do that! (Costs 60 Stamina)", libtcod.red)
            else:
                
                
##                if 'Block Talent 11' in player.fighter.event:
##                    
##                    
##                    if player.fighter.Stamina - 40 >= 0:
##                        
##                        Shield_Slam()
##
##                    else:
##                        message('Not enough stamina!', libtcod.red)
                message('You are already blocking!', libtcod.red)
                
            
    else:
        message('You have no shield equipped!', libtcod.red)



def msgbox(text, width=50):
    menu(text, [], width)  #use menu() as a sort of "message box"

def traits_menu(header='My Traits'):
    if len(player.fighter.traits) == 0:
        options = ['You currently have no traits.']


    else:
        options = []
        for i in player.fighter.traits:
            text = i 
            #show additional information, in case it's equipped
            
            options.append(text)

    inventory_inside_menu(header, options, INVENTORY_WIDTH)




def handle_keys():
    global new_x, new_y, TURN, burn, Warlock, fov_recompute, stamina, wilderness_factor, stairs1, dungeon_enter, TORCH_RADIUS
    global stairs, stairs_out, stairs_in, amount, encounter
    global MENU_BACKGROUND, other_thing, time
    global key;

    

    if key.vk == libtcod.KEY_ESCAPE:
        choice = 'Done'
        
        sys.exit()
        return









    if game_state == 'playing':
        #movement keys
        key_char = chr(key.c)
        if key.vk == libtcod.KEY_KP8:
            global map

            for y in range(MAP_HEIGHT):
                for x in range(MAP_WIDTH):
                    map[x][y].explored = True

            

            
            

            if kick(0, -1) == True:
                player.fighter.kicked = True

            elif player.fighter.Block_Duration > 0 and 'Block Talent 11' in player.fighter.event and kick(0, -1) == False and 'Shield Slam Hit' in player.fighter.event:
                
                    
            
            
                player_move_or_attack(0, -1, True)
                

            elif kick(0, -1) == False:
                player_move_or_attack(0, -1)
                    
                




            if TURN % 40 == 0:
                player.fighter.heal(player.fighter.Life_regen)
            if burn >= 1:
                player.fighter.take_damage(1)
                burn -= 1

            

            if (player.fighter.max_satiation - player.fighter.satiation) <= 1000:
                message('You are starving!', libtcod.red)
            if player.fighter.satiation <= 0:
                message('You starved to death!', libtcod.red)

            

            


            return 'take-turn'


        elif key.vk == libtcod.KEY_KP2:
            

            if kick(0, 1) == True:
                player.fighter.kicked = True

            elif player.fighter.Block_Duration > 0 and 'Block Talent 11' in player.fighter.event and kick(0, 1) == False and 'Shield Slam Hit' in player.fighter.event:
                
                    
            
            
                player_move_or_attack(0, 1, True)
                

            elif kick(0, 1) == False:
                player_move_or_attack(0, 1)

            if TURN % 40 == 0:
                player.fighter.heal(player.fighter.Life_regen)
            if burn >= 1:
                player.fighter.take_damage(1)
                burn -= 1

            if (player.fighter.max_satiation - player.fighter.satiation) <= 1000:
                message('You are starving!', libtcod.red)
            if player.fighter.satiation <= 0:
                message('You starved to death!', libtcod.red)

            return 'take-turn'



        elif key.vk == libtcod.KEY_KP4:
            




            if kick(-1, 0) == True:
                player.fighter.kicked = True

            elif player.fighter.Block_Duration > 0 and 'Block Talent 11' in player.fighter.event and kick(-1, 0) == False and 'Shield Slam Hit' in player.fighter.event:
                
                    
            
            
                player_move_or_attack(-1, 0, True)
                

            elif kick(-1, 0) == False:
                player_move_or_attack(-1, 0)

            if TURN % 40 == 0:
                player.fighter.heal(player.fighter.Life_regen)
            if burn >= 1:
                player.fighter.take_damage(1)
                burn -= 1
            if (player.fighter.max_satiation - player.fighter.satiation) <= 1000:
                message('You are starving!', libtcod.red)
            if player.fighter.satiation <= 0:
                message('You starved to death!', libtcod.red)
            return 'take-turn'
        elif key.vk == libtcod.KEY_KP6:



   

            if kick(1,0) == True:
                player.fighter.kicked = True

            elif player.fighter.Block_Duration > 0 and 'Block Talent 11' in player.fighter.event and kick(1, 0) == False and 'Shield Slam Hit' in player.fighter.event:
                
                    
            
            
                player_move_or_attack(+1, 0, True)
                

            elif kick(1,0) == False:
                player_move_or_attack(1, 0)

            if TURN % 40 == 0:
                player.fighter.heal(player.fighter.Life_regen)
            if burn >= 1:
                player.fighter.take_damage(1)
                burn -= 1
            if (player.fighter.max_satiation - player.fighter.satiation) <= 1000:
                message('You are starving!', libtcod.red)
            if player.fighter.satiation <= 0:
                message('You starved to death!', libtcod.red)
            return 'take-turn'
        elif key.vk == libtcod.KEY_KP7:
            global HOUR
            HOUR += 1

            thing = Debuff(turns=10, damage=0, kind='Poison', name='Deep Fear')
            
                

            player.fighter.Debuffs.append(thing)

##            for i in objects:
##                if i.name == 'Order Guard':
##                    i.move(0,1)

##            try:
##                with open('derp.rtf') as f:
##                    line = list(islice(f, 999, 1000))
##
##                temp = []
##        
##                for i in line:
##                     temp.append(i)
##
##                temp.append(str(player.fighter.Race))
##                thing = temp[0] + ' ' + str(player.fighter.Race) + '!'
##                temp2 = []
##                temp2.append(thing)
##                temp2.append(' ')
##                temp2.append('As you may already know, we require a certain.. Fee, to allow ')
##                temp2.append(str(player.fighter.Race) + 's into the city.')
##                temp2.append(' ')
##                temp2.append(' ')
##
##                inspectus_menu('Bribing the Guards', temp2, 68, 7, 'Fee', 68, 22, libtcod.red, option1="a) Brawn (STR):", option1_text=" I've got your payment, right here..",
##                               option2="b) Diplomacy (Skill):", option2_text=" You'd not want the people to turn on you, would you?",
##                               option3="c) Pay the Fee ", option3_text= '(200 Gold, Have : ' + str(player.fighter.gold) + ')'
##                               , option4="d) Leave", option1_difficulty=15, option2_difficulty=20, option4_difficulty=None, fee3=200, currency3='Gold')
##            except Exception as e:


##            Quest.Quest_name.append('A Voice Speaks') #Name
##            Quest.Quest_Main.append('Find the Strange Key') #Main objective
##            add_quest('A Voice Speaks', 'Kill Captain Dalmer') #Quest name and Secondary
##            add_quest('A Voice Speaks', 'Find Jalmar')

##            Quest.Quest_name.append('The Reckoning') #Name
##            Quest.Quest_Main.append('Face Your Fate')

##            with open('derp.rtf') as f:
##                line = list(islice(f, 999, 1000))
##
##            temp = []
##
##            for i in line:
##                temp.append(i)
##
##            temp.append(str(player.fighter.Race))
##            thing = temp[0] + ' ' + str(player.fighter.Race) + '!'
##            temp2 = []
##            temp2.append(thing)
##            temp2.append(' ')
##            temp2.append('As you may already know, we require a certain.. Fee, to allow ')
##            temp2.append(str(player.fighter.Race) + 's into the city.')
##            temp2.append(' ')
##            temp2.append(' ')
##            
##            
##
##            
##                
##
##            inspectus_menu('Bribing the Guards', temp2, 68, 7, 'Fee', 68, 22, libtcod.red, option1="a) Brawn (STR):", option1_text=" I've got your payment, right here..",
##                           option2="b) Diplomacy (Skill):", option2_text=" You'd not want the people to turn on you, would you?",
##                           option3="c) Pay the Fee ", option3_text= '(200 Gold, Have : ' + str(player.fighter.gold) + ')'
##                           , option4="d) Leave", option1_difficulty=15, option2_difficulty=20, option4_difficulty=None, fee3=200, currency3='Gold')
##            
##
##


            
            
            
            
            


            if kick(-1, -1) == True:
                player.fighter.kicked = True

            elif player.fighter.Block_Duration > 0 and 'Block Talent 11' in player.fighter.event and kick(-1, -1) == False and 'Shield Slam Hit' in player.fighter.event:
                    
            
            
                player_move_or_attack(-1, -1, True)
                

            elif kick(-1, -1) == False:
                player_move_or_attack(-1, -1)

            if TURN % 40 == 0:
                player.fighter.heal(player.fighter.Life_regen)

            if burn >= 1:
                player.fighter.take_damage(1)
                burn -= 1
            if (player.fighter.max_satiation - player.fighter.satiation) <= 1000:
                message('You are starving!', libtcod.red)
            if player.fighter.satiation <= 0:
                message('You starved to death!', libtcod.red)
            return 'take-turn'
        elif key.vk == libtcod.KEY_KP9:

##            for i in objects:
##                if i.name == 'Order Guard':
##                    i.move(1,0)

            


            if kick(1, -1) == True:
                player.fighter.kicked = True

            elif player.fighter.Block_Duration > 0 and 'Block Talent 11' in player.fighter.event and kick(1, -1) == False and 'Shield Slam Hit' in player.fighter.event:
                
                    
            
            
                player_move_or_attack(+1, -1, True)
                

            elif kick(1, -1) == False:
                player_move_or_attack(1, -1)


            if TURN % 40 == 0:
                player.fighter.heal(player.fighter.Life_regen)
            if burn >= 1:
                player.fighter.take_damage(1)
                burn -= 1
            if (player.fighter.max_satiation - player.fighter.satiation) <= 1000:
                message('You are starving!', libtcod.red)
            if player.fighter.satiation <= 0:
                message('You starved to death!', libtcod.red)
            return 'take-turn'
        elif key.vk == libtcod.KEY_KP1:
            write_loot()

            for i in objects:
                if i.name == 'Order Guard':
                    try:
                        i.move(1,0)
                    except Exception as e:
                        message(str(e) + ' ERROR')



            if kick(-1, 1) == True:
                player.fighter.kicked = True

            elif player.fighter.Block_Duration > 0 and 'Block Talent 11' in player.fighter.event and kick(-1, 1) == False and 'Shield Slam Hit' in player.fighter.event:
                
                    
            
            
                player_move_or_attack(-1, +1, True)
                

            elif kick(-1, 1) == False:
                player_move_or_attack(-1, 1)


            if TURN % 40 == 0:
                player.fighter.heal(player.fighter.Life_regen)
            if burn >= 1:
                player.fighter.take_damage(1)
                burn -= 1

            if (player.fighter.max_satiation - player.fighter.satiation) <= 1000:
                message('You are starving!', libtcod.red)
            if player.fighter.satiation <= 0:
                message('You starved to death!', libtcod.red)
            return 'take-turn'
        elif key.vk == libtcod.KEY_KP3:
            wilderness(mountain=True)
            west_gate()
            
            if kick(1, 1) == True:
                player.fighter.kicked = True

            elif player.fighter.Block_Duration > 0 and 'Block Talent 11' in player.fighter.event and kick(1, 1) == False and 'Shield Slam Hit' in player.fighter.event:
                
                    
            
            
                player_move_or_attack(+1, +1, True)
                

            elif kick(1, 1) == False:
                player_move_or_attack(1, 1)

            if TURN % 40 == 0:
                player.fighter.heal(player.fighter.Life_regen)
            if burn >= 1:
                player.fighter.take_damage(1)
                burn -= 1

            if (player.fighter.max_satiation - player.fighter.satiation) <= 1000:
                message('You are starving!', libtcod.red)
            if player.fighter.satiation <= 0:
                message('You starved to death!', libtcod.red)
            return 'take-turn'
        elif key.vk == libtcod.KEY_KP5:
            global stairs_out, stairs_in
            thing = (len(Dungeon.journal)/53)+1


                       
                    

            if player.fighter.Class == 'Warrior' and player.fighter.Block_Duration == 0:
                Breathe()
                

            if TURN % 40 == 0:
                player.fighter.heal(player.fighter.Life_regen)
            if burn >= 1:
                player.fighter.take_damage(1)
                burn -= 1

            if (player.fighter.max_satiation - player.fighter.satiation) <= 1000:
                message('You are starving!', libtcod.red)
            if player.fighter.satiation <= 0:
                message('You starved to death!', libtcod.red)

            power_menu()
            
            return 'take-turn'

        elif key_char == '>' and MAP_WIDTH/2-3 == player.x or MAP_WIDTH/2+3 == player.x and  MAP_HEIGHT/2 == player.y and player.fighter.wilderness_factor == True:
            save_map()
            if player.x == MAP_WIDTH/2-3:
                player.fighter.wilderness_factor == False
                
                west_gate()
                render_all()
            elif player.x == MAP_WIDTH/2+3:
                east_gate()
        #Make a function for encounter with the gates.
            
        
        elif key_char == '>' and 50 == player.x and 20 == player.y and player.fighter.wilderness_factor == True and 'Graveyard spawn' in player.fighter.event:
            
            render_all()
            encounter = True
            Graveyard_encounter()

        elif key_char == 'T':

            if Dungeon.Terrain_type == 'West Gate':
                for object in objects:
                    if object.name == 'Order Guard' and object.distance_to(player) >= 1 and object.distance_to(player) <= 1.5:
                        if object.tale_told != 'Attacked' and object.tale_told != 'Done and Attacked' and object.tale_told != 'Stunned':
                            if 'Bribed West Gate Guards' not in player.fighter.event:
                                try:
                                    with open('derp.rtf') as f:
                                        line = list(islice(f, 999, 1000))
                
                                    temp = []
                            
                                    for i in line:
                                         temp.append(i)
                        
                                    temp.append(str(player.fighter.Race))
                                    thing = temp[0] + ' ' + str(player.fighter.Race) + '!'
                                    temp2 = []
                                    temp2.append(thing)
                                    temp2.append(' ')
                                    temp2.append('As you may already know, we require a certain.. Fee, to allow ')
                                    temp2.append(str(player.fighter.Race) + 's into the city.')
                                    temp2.append(' ')
                                    temp2.append(' ')

                                    inspectus_menu('Bribing the Guards', temp2, 68, 7, 'Fee', 68, 22, libtcod.red, option1="a) Brawn (STR):", option1_text=" I've got your payment, right here..",
                                                   option2="b) Diplomacy (Skill):", option2_text=" You'd not want the people to turn on you, would you?",
                                                   option3="c) Pay the Fee ", option3_text= '(200 Gold, Have : ' + str(player.fighter.gold) + ')'
                                                   , option4="d) Leave", option1_difficulty=15, option2_difficulty=20, option4_difficulty=None, fee3=200, currency3='Gold')
                                except Exception as e:
                                    message(str(e) + ' ERROR')
                            
            if Dungeon.Terrain_type == 'Pits of Despair':
                for object in objects:
                    if object.name == 'Old Orc' and object.distance_to(player) >= 1 and object.distance_to(player) <= 1.5 and object.tale_told == '':

                        pass


                    elif object.name == 'Old Orc' and object.distance_to(player) >= 1 and object.distance_to(player) <= 1.5 and object.tale_told == 'Done':
                        message("The Old Orc's gaze is distant..", libtcod.light_blue)

                    elif object.name == 'Old Orc' and object.distance_to(player) >= 1 and object.distance_to(player) <= 1.5 and object.tale_told == 'Attacked':
                        message("The Old Orc is flustered with Rage!", libtcod.red)

                    elif object.name == 'Old Marek' and player.x == 14 and player.y == 22:
                        if 'Old Marek Opening' not in player.fighter.event:
                            with open('derp.rtf') as f:
                                lines = list(islice(f, 265, 282))
                            inspect_menu('A Crazy Old Fool', lines, 60)
                            player.fighter.event.append('Old Marek Opening')

                        img = libtcod.image_load('black_background.png')

                        libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)

                        if len(Dungeon.Shop) == 0: 
                            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=cast_heal('minor'), eat_function=None)
                            item = Object(player.x, player.y, '!', 'Minor Healing potion', libtcod.violet,slot='Right Hand', weight=1, weapon_type='Sharp', item=item_component)

                            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=cast_heal('lesser'), eat_function=None)
                            item2 = Object(player.x, player.y, '!', 'Lesser Healing potion', libtcod.violet,slot='Right Hand', weight=1, weapon_type='Sharp', item=item_component)
                            Dungeon.Shop.append([item, 'Minor Healing Potion', 30, item, 'Minor Healing Potion', 30, item, 'Minor Healing Potion', 30, item2, 'Lesser Healing Potion', 50])

                        Shop(' ', ["I'd like to buy.", "I'd like to sell.", "I'd like to sell carefully."], LEVEL_SCREEN_WIDTH+70, "Old Marek", 0, True)
                        
                        break



                    elif object.name == 'Dying Man' and object.distance_to(player) >= 1 and object.distance_to(player) <= 1.5 and 'Dying event' not in player.fighter.event:
                        
                        with open('derp.rtf') as f:
                            line = list(islice(f, 909, 926))
                        inspectus_menu('Moment of Truth', line, 68, 3)
                        

                        player.fighter.event.append('Dying event')

                    

        elif key_char == 'S':
            power_menu(skills=True)




        elif key_char == 's':
            #A greanade use of an item
            #Fire leaves a burning dot, does extra damage to Ice Foes
            #Freeze stuns people and does some damage, does extra damage to fire foes
            #Gas does no damage, but stuns for longer
            
            monster = target_monster(CONFUSE_RANGE, True, 15,30, kind='Fire')
##            large_paint()

        elif key_char == 'C':
            craft()

        elif key_char == 'c' and player.fighter.Class == 'Warlock':
            demon_bolt()
            if player.fighter.corruption <= 95 and demon_bolt_cast == True:
                player.fighter.corruption += 5
                TURN += 4
            return 'take-turn'

        elif key_char == 'Q':
            if len(Quest.Quest_name) > 0:
                quest_journal('Quests: Press Associated Quest Key for Info', 100, increment=0)
            else:
                message("You currently don't have any quests!", libtcod.red)
                
        elif key_char == '1' and player.fighter.Class == 'Warrior':
            if player.fighter.Stamina >= 65 and 'Block Talent 10' in player.fighter.event:
                stun()
            elif player.fighter.Stamina >= 75:
                stun()
            else:
                if 'Block Talent 10' in player.fighter.event:
                    message("You don't have enough Stamina to do that! (Costs 65 Stamina)", libtcod.red)
                else:
                    message("You don't have enough stamina to do that! (Costs 75 Stamina)", libtcod.red)
        elif key_char == '2' and player.fighter.Class == 'Warrior':
            if player.fighter.skill2 == 'Whirlwind':
                Whirlwind()

            elif player.fighter.skill2 == 'Slash':
                Slash()
                
            

        elif key_char == '3' and player.fighter.Class == 'Warrior':
            if player.fighter.skill3 == 'Block':
                
                
                
                    
                
                
                if player.fighter.Block_Duration == 0:
                    Block()
                    
                elif player.fighter.Block_Duration > 0 and 'Block Talent 11' in player.fighter.event and player.fighter.Stamina >= 40:
                    if 'Shield Slam Hit' not in player.fighter.event:
                        player.fighter.event.append('Shield Slam Hit')
                        message('You ready your shield!', libtcod.red)
                        player.fighter.Stamina -= 40
                    else:
                        message('You already readied an attack!', libtcod.red)
                    
                    

                
                    
                
        elif key_char == '4' and player.fighter.Class == 'Warrior':
            if player.fighter.skill4 == 'Stone Form':
                Sturdy()

        elif key_char == 'Q':
            get_equipped_in_left_slot(player.fighter.Left, 'Shield')



        elif key_char == 'p':
##            message('Welcome to the Paint Mode!')
##            message('Press LMB to remove walls, RMB to Add walls!')
##            paint()
            item_editor()
        elif key_char == 'v' and player.fighter.Class == 'Warlock':
            drain_life()
            if player.fighter.corruption <= 100 and drain_life_cast == True:
                drain=libtcod.random_get_int(0, 3, 7)
                player.fighter.corruption += drain
                TURN += 4
            return 'take-turn'

        elif key_char == 'O':
            message('Map saved.')
            save_game()
            save_stats()

        elif key_char == ',':

            temp = []

            for object in objects:  #look for an item in the player's tile
                if object.x == player.x and object.y == player.y and object.item:
                    try:
                        if object.item.quantity >= 1:
                            object.item.name = str(object.item.quantity) + object.item.name

                        
                    except:
                        pass
                    temp.append(object.item)

            if len(temp) == 1:
                for object in objects:  #look for an item in the player's tile
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        try:
                            if object.item.rarity != 'Material' and object.item.decoration == False:
                                message('You picked up a ' + str(object.name) + '!', libtcod.green)
                        except:
                            pass
                        break


            if len(temp) > 1:
                chosen_item = ground_menu('What do you wish to pick up?')

                if chosen_item is not None:
                    chosen_item.pick_up()
                    try:
                        if chosen_item.rarity != 'Material':
                            message('You picked up a ' + str(chosen_item.name) + '!', libtcod.green)
                        else:
                            pass
                    except:
                        message('You picked up a ' + str(chosen_item) + '!', libtcod.green)

        elif key_char == 'e':
            chosen_item = eating_menu('What do you wish to eat?')

            if chosen_item is not None:
                chosen_item.eat()


        




        elif key_char == 'r':
            chosen_item = inventory_menu('What do you wish to read?\n')

            if chosen_item is not None:
                
                try:
                    if chosen_item.readable == 'Yes':
                        chosen_item.read()
                    else:
                        message("I can't read that.", libtcod.red)
                except:
                    chosen_item.read()
                
                for object in objects:
                    if object.ai:
                        object.ai.take_turn()
                        fov_recompute = True
        elif key_char == 'i':

            #show the inventory; if an item is selected, use it
            chosen_item = inventory_menu('INVENTORY\n', search_slot = None, equipping = True)

            
            
            if chosen_item is not None:
                

                
                chosen_item.use()
                
                    

                for object in objects:
                    if object.ai:
                        object.ai.take_turn()
                        fov_recompute = True
            




        elif key_char == 'I':
            chosen_item = inventory_menu('Which item do you want to inspect?\n')
            if chosen_item is not None:
                libtcod.console_flush()
                chosen_item.inspect()

        elif key_char == 'd':
            #show the inventory; if an item is selected, drop it
            chosen_item = inventory_menu('What do you want to drop?\n')
            if chosen_item is not None:
                
                chosen_item.drop()
                
                TURN += 4
                return 'take-turn'

        elif key_char == 'X':
            
            power_menu(random=True, glory = False)

        elif key_char == 'x':
            scalings()
            #show character information
            if len(player.fighter.Left) == 0 and len(player.fighter.Right) == 0 and len(player.fighter.Both) == 0:
                name = 'Unarmed'


            else:
                if len(player.fighter.Both) != 0:
                    name = str(player.fighter.Both[0].name)
                elif len(player.fighter.Left) == 0 and len(player.fighter.Right) != 0:
                    name = str(player.fighter.Right[0].name)
                elif len(player.fighter.Left) != 0 and len(player.fighter.Right) == 0:
                    name = str(player.fighter.Left[0].name)

                elif len(player.fighter.Left) != 0 and len(player.fighter.Left) != 0:
                    name = str(player.fighter.Right[0].name) + ' & ' + str(player.fighter.Left[0].name)


            stats_menu(name, 60)







        elif key_char == 't':
            traits_menu()

        elif key_char == 'o':
            Observe_monster()


        elif key_char == '<':
            
            if Dungeon.Terrain_type == 'West Gate':
                exit_west_gate()
                
                previous_level(True)
                render_all()

            
           
            
            elif Dungeon.Terrain_type != 'Pits of Despair':
                
                
                    
                try:
                    if stairs_out.x == player.x and stairs_out.y == player.y and Dungeon.dungeon_level >= 2:

                        save_map()
                    
                    
                        previous_level()


                        player.fighter.past_first_level = False
                    
                    elif stairs_out.x == player.x and stairs_out.y == player.y and Dungeon.dungeon_level == 1:
                        save_map()
                        
                        
                        wilderness()
                
                except:
                    
                    
                    if player.fighter.stairs_out_x == player.x and player.fighter.stairs_out_y == player.y and Dungeon.dungeon_level >= 2:
                        save_map()
                        
                        previous_level()

                        player.fighter.past_first_level = False
                    
                        
                    elif player.fighter.stairs_out_x == player.x and player.fighter.stairs_out_y == player.y and Dungeon.dungeon_level == 1:
                        save_map()
                        
                        wilderness()
            

            elif Dungeon.Terrain_type == 'Pits of Despair':
                
                try:
                    
                    if stairs_out.x == player.x and stairs_out.y == player.y and Dungeon.dungeon_level == 1:
                        
##                        if Dungeon.Terrain_type == 'Pits of Despair':
##                            Dungeon.Terrain_type = 'The Descent'
##                            Dungeon.dungeon_level = 3
##                            Dungeon.danger_level = 1
##
##                            map = [[ Tile(False)
##                                for y in range(MAP_HEIGHT) ]
##                                    for x in range(MAP_WIDTH) ]
##                            
##                            make_map()
##                            
##                            initialize_fov()
##
##                            message('You hear voices from ahead..')
##
##                            message('???: Grandfather, the Troops stand ready for the ritual.', libtcod.light_green)
##                            message('Grandfather: Good.', libtcod.cyan)
##                            message('???: What about.. ', libtcod.light_green)
##                            message('Grandfather: You have your orders. He dies by the law.', libtcod.cyan)
##                            message('???: Yes, Grandfather..', libtcod.light_green)
##                            message('???: MEN, WE ARE MOVING OUT!!', libtcod.light_green)
##                            
##                            
##                        else:
                        wilderness(mountain=True)
                
                except:
                    
                    if player.fighter.stairs_out_x == player.x and player.fighter.stairs_out_y == player.y and Dungeon.dungeon_level == 1:
                        
                        if Dungeon.Terrain_type == 'Pits of Despair':
                            
                            Dungeon.Terrain_type = 'The Descent'
                            Dungeon.dungeon_level = 3
                            Dungeon.danger_level = 1

                            map = [[ Tile(False)
                                for y in range(MAP_HEIGHT) ]
                                    for x in range(MAP_WIDTH) ]
                            
                            make_map()
                            
                            initialize_fov()

                            message('As you trudge out of the deep, dark pits - a cold, unsettling', libtcod.green)
                            message('dark embraces you - The walls are covered with claw marks', libtcod.green)
                            message('and whispers echoe in through these icy halls', libtcod.green)
                        else:
                            
                            wilderness()
                            
                    

        elif key_char == '>' and MAP_WIDTH/2 == player.x and MAP_HEIGHT/2 == player.y and player.fighter.wilderness_factor == True:
            dungeon_start()
            Dungeon.dungeon_level = 1
            Dungeon.danger_level = 1
            player.fighter.wilderness_factor = False

        elif key_char == '>':
            
            try:
                if stairs_in.x == player.x and stairs_in.y == player.y:
                    save_map()
                    next_level()
            except:
                if player.fighter.stairs_in_x == player.x and player.fighter.stairs_in_y == player.y and Dungeon.dungeon_level >= 1:
                    save_map()
                    next_level()
            


        elif key_char == 'N':
            choice = None
            while choice == None:  #keep asking until a choice is made
                choice = menu('Do you wish to Change your name?',
                    ['Yes', 'No'], 70)

            if choice == 0:
                name_menu()






        return 'didnt-take-turn'

def check_level_up():
    #see if the player's experience is enough to level-up
    
    level_up_xp = int(player.fighter.levels[str(player.level)])
    xp_left = int(player.fighter.levels[str(player.level)]) - player.fighter.xp
    buff = False

            
            
    if player.fighter.xp >= level_up_xp:
        #it is! level up and ask to raise some stats
        for i in player.fighter.Buffs:
            if 'Intellect' in i.name:
                
                Dungeon.skill_buffer += (player.fighter.Base_Intellect - i.effect)/3
                buff = True
                break

        if buff == False:
            Dungeon.skill_buffer += (player.fighter.Base_Intellect/3)
        
        player.level += 1
        player.fighter.xp -= level_up_xp
        player.fighter.hp += 2
        player.fighter.max_hp += 2
        message('Your battle skills grow stronger! You reached level ' + str(player.level) + '!', libtcod.yellow)

        choice = None
        while choice == None:  #keep asking until a choice is made
            choice = menu('Level up! Choose a stat to raise:\n',
                ['Endurance (+1 Endurance, from ' + str(player.fighter.Base_Endurance) + ')',
                'Strength (+1 Strength, from ' + str(player.fighter.Base_Strength) + ')',
                 'Agility (+1 Agility, from ' + str(player.fighter.Base_Agility) + ')',
                 'Intellect (+1 Intellect, from ' + str(player.fighter.Base_Intellect) + ')',
                'Defense (+1 Defense, from ' + str(player.fighter.stat_defense) + ')'], LEVEL_SCREEN_WIDTH)

        if choice == 0:
            player.fighter.Base_Endurance += 1
            player.fighter.hp += 2
            player.fighter.max_hp += 2
        elif choice == 1:
            player.fighter.Base_Strength += 1
        elif choice == 2:
            player.fighter.Base_Agility += 1
        elif choice == 3:
            player.fighter.Base_Intellect += 1
            
        elif choice == 4:
            player.fighter.stat_defense += 1

        if player.level % 3 == 0:
            choice = None
            while choice == None:
                choice = menu('Level up! Choose a stat to raise:\n',
                              ['Spirit (+1 Spirit from ' + str(player.fighter.Base_Spirit) + ')!',
                               'Fire Resistance (+5 percent from ' + str(player.fighter.fire_res) + ')',
                               'Cold Resistance (+5 percent from  ' + str(player.fighter.cold_res) + ')',
                               'Lightning Resistance (+5 percent from ' + str(player.fighter.lightning_res) + ')',
                               'Spirit Resistance (+5 percent from ' + str(player.fighter.spirit_res) + ')',
                               ], LEVEL_SCREEN_WIDTH)

                
                
                if choice == 0:
                    player.fighter.Base_Spirit += 1
                if choice == 1:
                    player.fighter.fire_res += 5
                if choice == 2:
                    player.fighter.cold_res += 5
                if choice == 3:
                    player.fighter.lightning_res += 5
                if choice == 4:
                    player.fighter.spirit_res += 5
                ##Add choices as nessecary to expand on Resistance department
        if player.level % 5 == 0:
            pass
                

    
def player_death(player):
    #the game ended!
    global game_state
    message('You died!', libtcod.red)
    game_state = 'dead'

    #for added effect, transform the player into a corpse!
    player.char = '%'
    player.color = libtcod.dark_red

    
    try:
        os.remove('savegame.txt')
    except:
        pass
    for i in range(1,11):
        try:
            s = 'random' + str(i) + '.txt'
            os.remove(s)
        except:
            pass

        try:
            s = 'randomassets' + str(i) + '.txt'
            os.remove(s)
        except:
            pass

        try:
            s = 'randomassetsthree' + str(i) + '.txt'
            os.remove(s)
        except:
            pass
        
    
    
    

def drop_table(level, monster):
    if level <= 5:
        common = libtcod.random_get_int(0, 1, 10000)
        uncommon = libtcod.random_get_int(0, 1, 10000)
        rare = libtcod.random_get_int(0, 1, 10000)

        if common <= 5000:
            try:
                drop_function('common', 5, monster)
            except:
                pass
        if uncommon <= 1500:
            try:
                drop_function('uncommon', 5, monster)
            except:
                pass
            
        if rare <= 500:
            try:
                drop_function('rare', 5, monster)
            except:
                pass

## Known bug, Uncommon and rare table are not fixed yet.
    

def drop_function(rarity, level, monster):

    #Incomplete function, stats are placeholders and need to be redone properly
    #Rare loot needs to be implemented, uncommon loot as well
    #Rebalance when implementation has been done
    

    if rarity == 'common' and level == 5:
        choice = libtcod.random_get_int(0, 1, 100)


        if choice >= 1 and choice <= 20:
            potion_choice = libtcod.random_get_int(0, 1, 100)#Create a Potion Section
            if potion_choice <= 80:
                item_component = Item(defense_bonus=0, slot='Right Hand', use_function=cast_heal('minor'), eat_function=None)
                item = Object(monster.x, monster.y, '!', 'Minor Healing potion', libtcod.violet,slot='Right Hand', weight=1, weapon_type='Sharp', item=item_component)
            else:
                item_component = Item(defense_bonus=0, slot='Right Hand', use_function=cast_heal('lesser'), eat_function=None)
                item = Object(monster.x, monster.y, '!', 'Lesser Healing potion', libtcod.violet,slot='Right Hand', weight=1, weapon_type='Sharp', item=item_component)



        elif choice >= 21 and choice <= 30:
            scroll_choice = libtcod.random_get_int(0, 1, 30)#Create a Scroll Section
            if scroll_choice <= 10:
                item_component = Item(defense_bonus=0, slot='Right Hand', use_function=cast_lightning, eat_function=None)
                item = Object(monster.x, monster.y, '#', 'Scroll of Lightning Bolt', libtcod.light_yellow,slot='Right Hand', weight=1, weapon_type='Blunt', item=item_component)
            elif scroll_choice >= 11 and choice <= 20:
                item_component = Item(defense_bonus=0, slot='Right Hand', use_function=cast_fireball, eat_function=None)
                item = Object(monster.x, monster.y, '#', 'Scroll of Fireball', libtcod.light_yellow,slot='Right Hand', weight=1, weapon_type='Blunt', item=item_component)
            elif scroll_choice >= 21 and choice <= 30:
                item_component = Item(defense_bonus=0, slot='Right Hand', use_function=cast_confuse, eat_function=None)
                item = Object(monster.x, monster.y, '#', 'Scroll of Confusion', libtcod.light_yellow,slot='Right Hand', weight=1, weapon_type='Blunt', item=item_component)
                

        elif choice >= 31 and choice <= 50:
            if player.fighter.Class == 'Warrior':
                Wepchoice = libtcod.random_get_int(0, 1, 4) 
            #Create a Weapon section
                if Wepchoice == 1:
                    Swordchoice = libtcod.random_get_int(0, 1, 4)

                    
                    #Create a Sword
                    if Swordchoice == 1:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Swordchoice == 2:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Swordchoice == 3:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Swordchoice == 4:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                elif Wepchoice == 2:
                    Axechoice = libtcod.random_get_int(0, 1, 4) 
                    #Create an Axe
                    if Axechoice == 1:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Axechoice == 2:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Axechoice == 3:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Axechoice == 4:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    
                elif Wepchoice == 3:
                    Macechoice = libtcod.random_get_int(0, 1, 4) 
                    #Create a Mace
                    if Macechoice == 1:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Macechoice == 2:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Macechoice == 3:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Macechoice == 4:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    
                elif Wepchoice == 4:
                    Daggerchoice = libtcod.random_get_int(0, 1, 4) 
                    #Create a Dagger
                    if Daggerchoice == 1:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Daggerchoice == 2:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Daggerchoice == 3:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Daggerchoice == 4:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    
                
            elif player.fighter.Class == 'Warlock':
                Wepchoice = libtcod.random_get_int(0, 1, 4) 
            #Create a Weapon section
                if Wepchoice == 1:
                    Staffchoice = libtcod.random_get_int(0, 1, 4) 
                    #Create a Staff
                    if Staffchoice == 1:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Staffchoice == 2:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Staffchoice == 3:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Staffchoice == 4:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                elif Wepchoice == 2:
                    Daggerchoice = libtcod.random_get_int(0, 1, 4) 
                    #Create an Dagger
                    if Daggerchoice == 1:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Daggerchoice == 2:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Daggerchoice == 3:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Daggerchoice == 4:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    
                elif Wepchoice == 3:
                    Offchoice = libtcod.random_get_int(0, 1, 4) 
                    #Create an off-hand
                    if Offchoice == 1:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Offchoice == 2:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Offchoice == 3:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Offchoice == 4:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    
                elif Wepchoice == 4:
                    Demonchoice = libtcod.random_get_int(0, 1, 4) 
                    #Create a Demonic Piece
                    if Demonchoice == 1:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Demonchoice == 2:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Demonchoice == 3:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                    elif Demonchoice == 4:
                        item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                        obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
##                if choice == 1:
##                    #Create a Staff
##                if choice == 2:
##                    #Create a Dagger
##                if choice == 3:
##                    #Create a Off-hand
##                if choice == 4:
##                    #Create a Demonic Piece
                

        elif choice >= 51 and choice <= 60:
            Shieldchoice = libtcod.random_get_int(0, 1, 4)
            #Create a Shield Section
            if Shieldchoice == 1:
                item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
            elif Shieldchoice == 2:
                item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
            elif Shieldchoice == 3:
                item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
                obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
                

        elif choice >= 61 and choice <= 90:
            #Create an armor piece

            

            item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
            obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)

        elif choice >= 91 and choice <= 100:
            #Create a piece of Jewlery
            item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                                              defense_bonus=0, weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Iron Axe', slot='Left Hand', use_function=None, eat_function=None)
            obj = Object(0, 0, '/', 'Iron Sword', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
        
        objects.append(item)
        item.send_to_back()
        item.always_visible = False
        
        

def monster_death(monster):
    global fov_map, color_dark_wall, color_light_wall, TORCH_RADIUS, burn, burning, TURN, wilderness_factor
    global color_dark_ground, color_light_ground, stairs1, stairs, stairs_up, stairs_down, stairs_up1
    global fov_recompute
    #transform it into a nasty corpse! it doesn't block, can't be
    #attacked and doesn't move
##    libtcod.map_compute_fov(fov_map, monster.x, monster.y, 1, FOV_LIGHT_WALLS, FOV_ALGO)
##    x_list = []
##    
##    for y in range(MAP_HEIGHT):
##        for x in range(MAP_WIDTH):
##            if libtcod.map_is_in_fov(fov_map, x, y):
##                map[x][y].lava = True

    
    try:
        if monster.faction != '':
            try:
                Dungeon.reputations[monster.faction] += monster.offense
                message(str(Dungeon.reputations) + ' REPUTATIONS')
            except:
                Dungeon.reputations[monster.faction] = monster.offense
                message(str(Dungeon.reputations) + ' REPUTATIONS')
    except:
        pass

    if len(player.fighter.Debuffs) > 0:
        for i in player.fighter.Debuffs:
            if i.name == 'Soul Burn':
                player.fighter.Debuffs.remove(i)

    if monster.name == 'Barrel' or monster.name == 'Makeshift Counter' or monster.name == 'Torch':
        message('The ' + monster.name + ' breaks. ' + '(+' + str(monster.fighter.base_xp + xp_bonus) + 'xp)' , libtcod.orange)

    


    
    if monster.name != 'Torch':
        drop_table(monster.fighter.level, monster)
    

        


    monster_list = ['Shambling Horror', 'Old Marek', 'Captain Dalmer', 'Makeshift Counter', 'Barrel', 'Hirachi', 'Torch']
    if monster.name not in monster_list:
        try:
            if (monster.level - player.level) >= -3:
                message('The ' + monster.name + ' dies. ' + '(+' + str(monster.fighter.base_xp + xp_bonus) + 'xp)' , libtcod.orange)
            else:
                message('Your level is too high to gain XP from this monster.', libtcod.red)
        except:
            message('The ' + monster.name + ' dies. ' + '(+' + str(monster.fighter.base_xp + xp_bonus) + 'xp)' , libtcod.orange)
        
    if monster.name == 'Old Orc':
        message('A curse upon you..', libtcod.red)

        if monster.tale_told == 'Done and Attacked':
            if 'Betrayer (+% Damage against Friendly NPCs)' not in player.fighter.traits:
                with open('derp.rtf') as f:
                    lines = list(islice(f, 108, 122))
                inspect_menu('Trait Gained - Betrayer', lines, 60)
                player.fighter.traits.append('Betrayer (+% Damage against Friendly NPCs)')

    elif monster.name == 'Hirachi':
        player.fighter.event.append('Hirachi Arena')
        message("I was right.. You are not like the others..", libtcod.yellow)
        message("Perhaps we will meet again..", libtcod.yellow)
        message('Farwell, for now.', libtcod.yellow)
        message("Hirachi disappears in a blinding light", libtcod.yellow)
        
        message('You gained ' + str(monster.fighter.base_xp + xp_bonus) + ' xp.', libtcod.orange)
        

    elif monster.name == 'Dying Man':
        player.fighter.event.append('Garret is Dead')
        message('You hear a voice calling to you from ahead:', libtcod.red)
        if player.fighter.Class == 'Warrior':
            
            message('???: And such, thy true nature is revealed.', libtcod.red)
            message('???: Ye sin and fall short in the presence of a God..', libtcod.red)
            message('???: In thy wake, darkness shall follow.', libtcod.red)

        elif player.fighter.Class == 'Warlock':
            
            message('???: Ye of no faith, Ye of sin!', libtcod.red)
            message('???: Thy soul, black as night - as is thine heart.', libtcod.red)
            message('???: Your shadow shall turn against you...', libtcod.red)
            message('???: And your kin shall hunt you down!', libtcod.red)

        if 'Garret Passed Out' in player.fighter.event and monster.name == 'Dying Man':
            message('You sense a terrible darkness drawing near...', libtcod.red)
            message('A malformed figure appears!', libtcod.red)

            fighter_component = Monster(hp=40, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=150, level=1,
                                    min_dam=5, max_dam=15, minimum_hit=100,race='Demon', death_function=monster_death)

            ai_component = BasicMonster()

            fear = Object(player.x-1, player.y, 'C', 'Malformed Figure', libtcod.red, blocks=True, fighter=fighter_component, ai=ai_component)

            objects.append(fear)

        

    elif monster.name == 'Malformed Figure':
        message('The figure keels over in shreeking pain.', libtcod.red)
        message('The Figure pulls you close, as it stares you in the eyes', libtcod.red)
        message("'You.. think.. you've won..?' A Grizzly bloodied smile ", libtcod.red)
        message("appears on it's malformed face. 'Don't... you... worry", libtcod.red)
        message("'I.. WILL... be.. BACK.'", libtcod.red)
            
            

        


    elif monster.name == 'Captain Dalmer':
        player.fighter.event.append('Dalmer is Dead')
        message('I.. Did.. My.. Duty..', libtcod.red)
        
        message(monster.name + ' dies. ' + '(+' + str(monster.fighter.base_xp + xp_bonus) + 'xp)', libtcod.orange)
    elif monster.name == 'Old Marek':
        message('The.. Earth.. Embraces.. Me...', libtcod.light_blue)
        message(monster.name + ' dies. ' + '(+' + str(monster.fighter.base_xp + xp_bonus) + 'xp)', libtcod.orange)

    elif monster.name == 'Shambling Horror':
        if monster.distance_to(player) >= 1 and monster.distance_to(player) < 3:
            damage = 20 - player.fighter.defense
            message('The Shambling Horror explodes for ' + str(damage) + ' damage! ' + '(+' + str(monster.fighter.base_xp + xp_bonus) + 'xp)' , libtcod.orange)
            player.fighter.hp -= (20 - player.fighter.defense)
        elif monster.distance_to(player) >= 3:
            message('The Shambling Horror explodes!' + '(+' + str(monster.fighter.base_xp + xp_bonus) + 'xp)' , libtcod.orange)


    if monster in objects:
        objects.remove(monster)

    elif monster not in objects:
        pass

    




    item_roll = libtcod.random_get_int(0, 1, 10000)

    corpse = libtcod.random_get_int(0, 0, 10000)

    gold = libtcod.random_get_int(0, 0, 10000)

    special = ['Hirachi', 'Dying Man', 'Malformed Figure']

    if monster.name in special:
        if monster.name == 'Hirachi':
            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=None)

            item = Object( monster.x, monster.y, '/', 'Runed Hilt' , libtcod.grey, slot='Right Hand', weight=1,  item=item_component)

            objects.append(item)
            item.send_to_back()
            item.always_visible = False

        elif monster.name == 'Dying Man':
            if player.fighter.Class == 'Warrior':
                item_component = Item(defense_bonus=4, slot='Right Hand', use_function=None, eat_function=None)

                item = Object( monster.x, monster.y, ']', 'Defiance' , libtcod.grey, slot='Right Hand', weight=300,  item=item_component)

                objects.append(item)
                item.send_to_back()
                item.always_visible = False
            elif player.fighter.Class == 'Warlock':

                

                
                
                
                
                item_component = Item(defense_bonus=0, weapon_min=3, weapon_max=7, fire=5, name='Burning Rage', weapon_type='Blunt',
                                      slot='Both Hands', use_function=unleash, eat_function=None)

                item = Object( monster.x, monster.y, '/', 'Burning Rage' , libtcod.red, slot='Both Hands', weight=30, weapon_min=3, weapon_max=7,
                               weapon_agi=0, weapon_str=0, weapon_type='Blunt', item=item_component)

                objects.append(item)
                item.send_to_back()
                item.always_visible = False

        elif monster.name == 'Malformed Figure':
            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=essence_of_fear)
            item = Object(monster.x, monster.y, '*', 'Essence of Fear' , libtcod.purple, slot='Right Hand', weight=1, item=item_component)

            objects.append(item)
            item.send_to_back()
            item.always_visible = False

            #, Frozen Soul, White Skull Hunter
            

    if corpse >= 9000 and monster.name not in special:

        if monster.name == 'Soulless Shatm':
            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=gorilla)

            item = Object( monster.x, monster.y, '%', 'Shatm Corpse' , libtcod.grey, slot='Right Hand', weight=70,  item=item_component)

        elif monster.name == 'Frozen Skulker':
            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=monkey)

            item = Object( monster.x, monster.y, '%', 'Frozen Skulker Corpse' , libtcod.red, slot='Right Hand', weight=10,  item=item_component)

        elif monster.name == 'Tundra Prowler':
            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=Jaguar)

            item = Object( monster.x, monster.y, '%', 'Tundra Prowler Corpse' , libtcod.white, slot='Right Hand', weight=30,  item=item_component)

        elif monster.name == 'Frozen Soul':
            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=Black_Jaguar)

            item = Object( monster.x, monster.y, '%', 'Frozen Soul Corpse' , libtcod.grey, slot='Right Hand', weight=30,  item=item_component)

        elif monster.name == 'White Skull Hunter':
            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=White_orc)

            item = Object( monster.x, monster.y, '%', 'White Orc Corpse' , libtcod.white, slot='Right Hand', weight=30,  item=item_component)

        

        

        elif monster.name == 'Old Marek':
            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=None)

            item = Object( monster.x, monster.y, '%', 'Old Mareks Corpse' , libtcod.red, slot='Right Hand', weight=50,  item=item_component)

        elif monster.name == 'Makeshift Counter':
            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=None)

            item = Object( monster.x, monster.y, '/', 'Plank' , libtcod.Color(127,101,63), slot='Right Hand', weight=50,  item=item_component)

        elif monster.name == 'Barrel':
            item_component = Item( defense_bonus=0, slot='Right Hand', use_function=None, eat_function=None)

            item = Object( monster.x, monster.y, '/', 'Plank' , libtcod.Color(127,101,63), slot='Right Hand', weight=50,  item=item_component)

        elif monster.name == 'Guard':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=thug_corpse)

            item = Object( monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.blue, slot='Right Hand', weight=50,  item=item_component)


        elif monster.name == 'Cave Wolf':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=wolf_corpse)

            item = Object(monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.grey, slot='Right Hand', weight=40, item=item_component)
        elif monster.name == 'Thug':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=thug_corpse)

            item = Object( monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.Color(127,101,63), slot='Right Hand', weight=50,  item=item_component)


        elif monster.name == 'Orc' or monster.name == 'Old Orc':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=orc_corpse)

            item = Object( monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.Color(127,101,63), slot='Right Hand', weight=50,  item=item_component)

        elif monster.name == 'Captain Dalmer':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=orc_corpse)

            item = Object( monster.x, monster.y, '%', 'Captain Dalmers Head' , libtcod.dark_blue, slot='Right Hand', weight=50,  item=item_component)
        elif monster.name == 'Cave Wolf Alpha':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=alpha_wolf_corpse)

            item = Object(monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.grey, slot='Right Hand', weight=55, item=item_component)
        elif monster.name == 'Troll':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=troll_corpse)

            item = Object(monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.darker_green , slot='Right Hand', weight=150, item=item_component)
        elif monster.name == 'Shadow Troll':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=shadow_troll_corpse)

            item = Object(monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.darker_purple , slot='Right Hand', weight=220, item=item_component)
        elif monster.name == 'Flaming Imp':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=flaming_imp_corpse)

            item = Object(monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.red, slot='Right Hand', weight=40, item=item_component)
        elif monster.name == 'Ghoul':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=ghoul_corpse)
            item = Object(monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.grey, slot='Right Hand', weight=70, item=item_component)
        elif monster.name == 'Abomination':

            item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=abomination_corpse)
            item = Object(monster.x, monster.y, '%', monster.name + ' Corpse' , libtcod.purple, slot='Right Hand', weight=200, item=item_component)

        objects.append(item)
        item.send_to_back()
        item.always_visible = False

    if gold >= 9000 and monster.name not in special:

        item_component = Item(defense_bonus=0, slot='Right Hand', use_function=None, eat_function=None)
        item = Object(monster.x, monster.y, 'o', 'Gold', libtcod.yellow, weight=0, item=item_component)

        objects.append(item)
        item.send_to_back()
        item.always_visible = False

    



    




def target_tile(max_range=None, greanade=False, mapping=False):
    #return the position of a tile left-clicked in player's FOV (optionally in a range), or (None,None) if right-clicked.
    global key, mouse, fov_recompute
    x = None
    y = None
    thing = False
    while True:
        #render the screen. this erases the inventory and shows the names of objects under the mouse.
        libtcod.console_flush()
        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)
        render_all()
        
        try:
            if x == None:
                x = player.x
        except:
            pass
        try:
            if y == None:
                y = player.y
        except:
            pass

        if thing == False:
            
            libtcod.console_put_char_ex(con, x, y, 'X', libtcod.red, libtcod.black)
            
            if greanade == True:
                libtcod.console_put_char_ex(con, x-1, y, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x+1, y, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x, y-1, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x, y+1, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x-2, y, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x+2, y, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x, y+2, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x, y-2, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x-1, y-1, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x+1, y+1, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x+1, y-1, 'X', libtcod.red, libtcod.black)
                
                libtcod.console_put_char_ex(con, x-1, y+1, 'X', libtcod.red, libtcod.black)
                
                
            
        
        
        
        
        if key.vk == libtcod.KEY_KP2:
            libtcod.console_clear(con)
            fov_recompute = True
            
            y += 1
            if not libtcod.map_is_in_fov(fov_map, x, y):
                message("I can't see that far!", libtcod.red)
                y -= 1
            else:
                libtcod.console_put_char_ex(con, x, y, 'X', libtcod.red, libtcod.black)
                
            
            
            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    message('Current target is : ' + str(obj.name))

        if key.vk == libtcod.KEY_KP3:
            libtcod.console_clear(con)
            fov_recompute = True
            
            y += 1
            x += 1
            if not libtcod.map_is_in_fov(fov_map, x, y):
                message("I can't see that far!", libtcod.red)
                y -= 1
                x -= 1
            else:
                libtcod.console_put_char_ex(con, x, y, 'X', libtcod.red, libtcod.black)
            

            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    message('Current target is : ' + str(obj.name))
            
        if key.vk == libtcod.KEY_KP8:
            
            libtcod.console_clear(con)
            fov_recompute = True
            y -= 1
            if not libtcod.map_is_in_fov(fov_map, x, y):
                message("I can't see that far!", libtcod.red)
                y += 1
            else:
                libtcod.console_put_char_ex(con, x, y, 'X', libtcod.red, libtcod.black)
                

            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    message('Current target is : ' + str(obj.name))

        if key.vk == libtcod.KEY_KP7:
            
            libtcod.console_clear(con)
            fov_recompute = True
            x -= 1
            y -= 1
            if not libtcod.map_is_in_fov(fov_map, x, y):
                message("I can't see that far!", libtcod.red)
                x += 1
                y += 1
            else:
                libtcod.console_put_char_ex(con, x, y, 'X', libtcod.red, libtcod.black)
                

            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    message('Current target is : ' + str(obj.name))

        if key.vk == libtcod.KEY_KP9:
            
            libtcod.console_clear(con)
            fov_recompute = True
            x += 1
            y -= 1
            if not libtcod.map_is_in_fov(fov_map, x, y):
                message("I can't see that far!", libtcod.red)
                x -= 1
                y += 1
            else:
                libtcod.console_put_char_ex(con, x, y, 'X', libtcod.red, libtcod.black)
                

            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    message('Current target is : ' + str(obj.name))
            
        if key.vk == libtcod.KEY_KP4:
            
            libtcod.console_clear(con)
            fov_recompute = True
            x -= 1
            
            if not libtcod.map_is_in_fov(fov_map, x, y):
                message("I can't see that far!", libtcod.red)
                x += 1
            else:
                libtcod.console_put_char_ex(con, x, y, 'X', libtcod.red, libtcod.black)
                
            

            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    message('Current target is : ' + str(obj.name))
                    
        if key.vk == libtcod.KEY_KP1:
            
            libtcod.console_clear(con)
            fov_recompute = True
            x -= 1
            y += 1
            if not libtcod.map_is_in_fov(fov_map, x, y):
                message("I can't see that far!", libtcod.red)
                x += 1
                y -= 1
            else:
                libtcod.console_put_char_ex(con, x, y, 'X', libtcod.red, libtcod.black)
                

            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    message('Current target is : ' + str(obj.name))

        if key.vk == libtcod.KEY_KP6:
            
            libtcod.console_clear(con)
            fov_recompute = True
            
            
            x += 1
            if not libtcod.map_is_in_fov(fov_map, x, y):
                message("I can't see that far!", libtcod.red)
                x -= 1
            else:
                libtcod.console_put_char_ex(con, x, y, 'X', libtcod.red, libtcod.black)

            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    message('Current target is : ' + str(obj.name))

        
        
        

        if mouse.rbutton_pressed or key.vk == libtcod.KEY_ESCAPE:
            return (None, None)  #cancel if the player right-clicked or pressed Escape

        #accept the target if the player clicked in FOV, and in case a range is specified, if it's in that range
        if (mouse.lbutton_pressed and libtcod.map_is_in_fov(fov_map, x, y) and
            (max_range is None or player.distance(x, y) <= max_range)):
            libtcod.console_clear(con)
            fov_recompute = True

            if greanade == True:
                return (x, y)
            
            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    return (x, y)

            if mapping == True:
                return (x, y)
            return (None, None)
        if (key.vk == libtcod.KEY_ENTER and libtcod.map_is_in_fov(fov_map, x, y) and
            (max_range is None or player.distance(x, y) <= max_range)):
            libtcod.console_clear(con)
            fov_recompute = True

            if greanade == True:
                return (x, y)
            
            for obj in objects:
                if obj.x == x and obj.y == y and obj.fighter and obj != player:
                    return (x, y)
            return (None, None)

def target_monster(max_range=None, greanade=False, damage_min=0, damage_max=0, kind='Freeze'):
    global objects

    player_hit = False
    
    #returns a clicked monster inside FOV up to a range, or None if right-clicked
    
    while True:
        if greanade == True:

            
            
            (x, y) = target_tile(max_range, True)

            for obj in objects:  #damage every fighter in range, including the player
                damage = libtcod.random_get_int(0, damage_min, damage_max)
                try:
                    if obj.distance(x, y) <= 2 and obj.fighter and obj.name != 'player':

                        if obj.tale_told == '' and obj.monster_type == 'NPC':
                    

                            obj.tale_told = 'Attacked'


                        elif obj.tale_told == '' and obj.monster_type == '':
                            obj.tale_told = 'Attacked'

                        elif obj.tale_told == 'Done' and obj.monster_type == 'NPC':

                            obj.tale_told = 'Done and Attacked'
                        
                        if kind == 'Gas':
                            message('The ' + obj.name + ' is paralyzed by the gas, for ' + str(damage) + ' turns!', libtcod.orange)
                            obj.tale_told = 'Stunned' + str(damage)
                        if kind == 'Fire':
                            message('The ' + obj.name + ' is hit by the Explosion for ' + str(damage) + ' fire damage!', libtcod.orange)
                            burn = libtcod.random_get_int(0, 4, 8)
                            try:
                                obj.fighter.burn += burn
                                message('The ' + obj.name + ' is lit ablaze by the greanade!', libtcod.orange)
                            except:
                                pass
                            
                        if kind == 'Freeze':
                            message('The ' + obj.name + ' is hit by the Explosion for ' + str(damage) + ' cold damage!', libtcod.orange)
                            message('The ' + obj.name + ' is frozen by the blast, for ' + str(damage/2) + ' turns!', libtcod.orange)
                            obj.tale_told = 'Stunned' + str(damage/2)
                        if kind != 'Gas':
                            obj.fighter.take_damage(damage)
                    if player.distance(x, y) <= 2:
                        if player_hit == False:
                            
                            if kind == 'Freeze':
                                damage = (damage*(100-player.fighter.cold_res))/100
                            if kind == 'Fire':
                                damage = (damage*(100-player.fighter.fire_res))/100

                            if kind == 'Freeze': #Add freezing effect
                                message('You are hit by the explosion for ' + str(damage) + ' cold damage!', libtcod.orange)
                            if kind == 'Fire':
                                message('You are hit by the explosion for ' + str(damage) + ' fire damage!', libtcod.orange)
                                
                            damage = int(damage)
                            if kind != 'Gas':
                                player.fighter.hp -= damage
                            player_hit = True
                            if player.fighter.hp <= 0:
                                player_death(player)
                                thingy = libtcod.random_get_int(0, 1, 5)
                                if kind == 'Fire':
                                    if thingy == 1:
                                        message('You are burnt to a crisp!', libtcod.red)
                                    if thingy == 2:
                                        message('You flesh is seared black and scorched!', libtcod.red)
                                    if thingy == 3:
                                        message('The heatwave sweeps over you!', libtcod.red)
                                    if thing == 4:
                                        message('Your body is ripped apart from the blast!', libtcod.red)
                                    if thing == 5:
                                        message('A blinding flash and a sudden blastwave washes over you!', libtcod.red)
                                if kind == 'Freeze':
                                    if thingy == 1:
                                        message('You blew yourself to a thousand pieces!', libtcod.red)
                                    if thingy == 2:
                                        message('You shattered into a million pieces!', libtcod.red)
                                    if thingy == 3:
                                        message('The shockwave shatters your body!', libtcod.red)
                                    if thing == 4:
                                        message('Your body is ripped apart from the blast!', libtcod.red)
                                    if thing == 5:
                                        message('The cold shatters your body and mind!', libtcod.red)
                 
                except:
                    pass

                
         
        else:
            (x, y) = target_tile(max_range)

        
        if x == None:  #player cancelled
            message('Targeted nothing, targeting cancelled.')
            message('Stopped')
            return None

        if kind == 'Fire':
            message('A roaring explosion erupts!', libtcod.red)
            ore_pos = libtcod.random_get_int(0, -1, 1)
            ore_y_pos = libtcod.random_get_int(0, -1, 1)

            if map[x+ore_pos][y+ore_y_pos].blocked == False:
                ore_amount = libtcod.random_get_int(0, 1, 3)
                ore_chanse = libtcod.random_get_int(0, 1, 100)
            
                if ore_chanse >= 77:
                    item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)), weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                                      weapon_str=int(round(player.fighter.Base_Strength/5)), worth=10, quantity=10, amount=ore_amount, rarity='Material',
                                      weapon_type='Axe', name= 'Iron Ore', slot='Left Hand', use_function=None, eat_function=None)
                    obj = Object(x + ore_pos, y + ore_y_pos, '#', 'Iron Ore', libtcod.grey, id_number=1, slot='Left Hand', weight=None, weapon_type='Axe', item=item_component)

                    objects.append(obj)

            

            
            
            map[x][y].block_sight = False
            map[x][y].blocked = False
            
            map[x-1][y].block_sight = False
            map[x-1][y].blocked = False
            
            map[x+1][y].block_sight = False
            map[x+1][y].blocked = False
            
            map[x][y-1].block_sight = False
            map[x][y-1].blocked = False

            
            map[x][y+1].block_sight = False
            map[x][y+1].blocked = False
            
            map[x-2][y].block_sight = False
            map[x-2][y].blocked = False
            
            map[x+2][y].block_sight = False
            map[x+2][y].blocked = False
           
            map[x][y+2].block_sight = False
            map[x][y+2].blocked = False
            
            map[x][y-2].block_sight = False
            map[x][y-2].blocked = False
            
            map[x-1][y-1].block_sight = False
            map[x-1][y-1].blocked = False
            
            map[x+1][y+1].block_sight = False
            map[x+1][y+1].blocked = False
            
            map[x+1][y-1].block_sight = False
            map[x+1][y-1].blocked = False
            
            map[x-1][y+1].block_sight = False
            map[x-1][y+1].blocked = False
       
            map[x-1][y].block_sight = False
            map[x-1][y].blocked = False
            
            map[x+1][y].block_sight = False
            map[x+1][y].blocked = False

            map[x][y-1].block_sight = False
            map[x][y-1].blocked = False

            map[x][y+1].block_sight = False
            map[x][y+1].blocked = False
         
            map[x-1][y].block_sight = False
            map[x-1][y].blocked = False
          
            map[x-2][y].block_sight = False
            map[x-2][y].blocked = False

            map[x+2][y].block_sight = False
            map[x+2][y].blocked = False
            
            map[x][y+2].block_sight = False
            map[x][y+2].blocked = False
            
            map[x][y-2].block_sight = False
            map[x][y-2].blocked = False
        
            map[x-1][y-1].block_sight = False
            map[x-1][y-1].blocked = False
 
            map[x+1][y+1].block_sight = False
            map[x+1][y+1].blocked = False
            map[x+1][y-1].block_sight = False
            map[x+1][y-1].blocked = False

            map[x-1][y+1].block_sight = False
            map[x-1][y+1].blocked = False
            initialize_fov() #Allows for Block Destructon and full FoV Recomputation
            
        if kind == 'Fire':
            try:
                if map[x][y].gate == True:
                    message('You blast apart pieces of the gate!', libtcod.red)
                    map[x][y].gate = False
                    map[x][y].block_sight = False
                    map[x][y].blocked = False

                    map[x-1][y].gate = False
                    map[x-1][y].block_sight = False
                    map[x-1][y].blocked = False

                    map[x+1][y].gate = False
                    map[x+1][y].block_sight = False
                    map[x+1][y].blocked = False

                    map[x][y-1].gate = False
                    map[x][y-1].block_sight = False
                    map[x][y-1].blocked = False

                    map[x][y+1].gate = False
                    map[x][y+1].block_sight = False
                    map[x][y+1].blocked = False

                    map[x-2][y].gate = False
                    map[x-2][y].block_sight = False
                    map[x-2][y].blocked = False

                    map[x+2][y].gate = False
                    map[x+2][y].block_sight = False
                    map[x+2][y].blocked = False

                    map[x][y+2].gate = False
                    map[x][y+2].block_sight = False
                    map[x][y+2].blocked = False

                    map[x][y-2].gate = False
                    map[x][y-2].block_sight = False
                    map[x][y-2].blocked = False

                    map[x-1][y-1].gate = False
                    map[x-1][y-1].block_sight = False
                    map[x-1][y-1].blocked = False

                    map[x+1][y+1].gate = False
                    map[x+1][y+1].block_sight = False
                    map[x+1][y+1].blocked = False

                    map[x+1][y-1].gate = False
                    map[x+1][y-1].block_sight = False
                    map[x+1][y-1].blocked = False

                    map[x-1][y+1].gate = False
                    map[x-1][y+1].block_sight = False
                    map[x-1][y+1].blocked = False

                    map[x-1][y].gate = False
                    map[x-1][y].block_sight = False
                    map[x-1][y].blocked = False

                    map[x+1][y].gate = False
                    map[x+1][y].block_sight = False
                    map[x+1][y].blocked = False

                    map[x][y-1].gate = False
                    map[x][y-1].block_sight = False
                    map[x][y-1].blocked = False

                    map[x][y+1].gate = False
                    map[x][y+1].block_sight = False
                    map[x][y+1].blocked = False

                    map[x-1][y].gate = False
                    map[x-1][y].block_sight = False
                    map[x-1][y].blocked = False

                    map[x-2][y].gate = False
                    map[x-2][y].block_sight = False
                    map[x-2][y].blocked = False

                    map[x+2][y].gate = False
                    map[x+2][y].block_sight = False
                    map[x+2][y].blocked = False

                    map[x][y+2].gate = False
                    map[x][y+2].block_sight = False
                    map[x][y+2].blocked = False

                    map[x][y-2].gate = False
                    map[x][y-2].block_sight = False
                    map[x][y-2].blocked = False

                    map[x-1][y-1].gate = False
                    map[x-1][y-1].block_sight = False
                    map[x-1][y-1].blocked = False

                    map[x+1][y+1].gate = False
                    map[x+1][y+1].block_sight = False
                    map[x+1][y+1].blocked = False

                    map[x+1][y-1].gate = False
                    map[x+1][y-1].block_sight = False
                    map[x+1][y-1].blocked = False

                    map[x-1][y+1].gate = False
                    map[x-1][y+1].block_sight = False
                    map[x-1][y+1].blocked = False

            except:
                pass
                
        return 'take-turn'
          

def closest_monster(max_range):
    #find closest enemy, up to a maximum range, and in the player's FOV
    closest_enemy = None
    closest_dist = max_range + 1  #start with (slightly more than) maximum range

    for object in objects:
        if object.fighter and not object == player and libtcod.map_is_in_fov(fov_map, object.x, object.y):
            #calculate distance between this object and the player
            dist = player.distance_to(object)
            if dist < closest_dist:  #it's closer, so remember it
                closest_enemy = object
                closest_dist = dist
    return closest_enemy

def armor_buff(name, strength, length):
    #strength = ['Minor', 'Lesser', 'Medium', 'Large', 'Major', 'Great']
    if name == 'Strength':
        if strength == 'Minor':
            effect = 2
        elif strength == 'Lesser':
            effect = 5
        elif strength == 'Medium':
            effect = 8
        elif strength == 'Large':
            effect = 11
        elif strength == 'Major':
            effect = 13
        elif strength == 'Great':
            effect = 15
    if name == 'Luck':
        if strength == 'Minor':
            effect = 2
        elif strength == 'Lesser':
            effect = 5
        elif strength == 'Medium':
            effect = 8
        elif strength == 'Large':
            effect = 11
        elif strength == 'Major':
            effect = 13
        elif strength == 'Great':
            effect = 15

    if name == 'Intellect':
        if strength == 'Minor':
            effect = 2
        elif strength == 'Lesser':
            effect = 5
        elif strength == 'Medium':
            effect = 8
        elif strength == 'Large':
            effect = 11
        elif strength == 'Major':
            effect = 13
        elif strength == 'Great':
            effect = 15
    if name == 'Armor':
        if strength == 'Minor':
            effect = 2
        elif strength == 'Lesser':
            effect = 5
        elif strength == 'Medium':
            effect = 8
        elif strength == 'Large':
            effect = 11
        elif strength == 'Major':
            effect = 13
        elif strength == 'Great':
            effect = 15

    if name == 'Speed':
        if strength == 'Minor':
            effect = 2
        elif strength == 'Lesser':
            effect = 5
        elif strength == 'Medium':
            effect = 8
        elif strength == 'Large':
            effect = 11
        elif strength == 'Major':
            effect = 13
        elif strength == 'Great':
            effect = 15
    if name == 'Agility':
        if strength == 'Minor':
            effect = 2
        elif strength == 'Lesser':
            effect = 5
        elif strength == 'Medium':
            effect = 8
        elif strength == 'Large':
            effect = 11
        elif strength == 'Major':
            effect = 13
        elif strength == 'Great':
            effect = 15

    buff = Buff(name, length, effect)
        
    player.fighter.Buffs.append(buff)
    
    
    

def cast_heal(strength, craft=False):
    #heal the player
    print "CAST HEAL WAS CALLED"

    if player.fighter.hp < player.fighter.max_hp:
        pass
    elif player.fighter.hp >= player.fighter.max_hp:
        if craft == False:
            message('You are already at full health!', libtcod.red)
        return 'cancelled'
    
    

    
    if strength == 'minor' or strength == 'Minor':
        HEAL_AMOUNT = libtcod.random_get_int(0, 8, 16) #12
        if HEAL_AMOUNT <= 11:
            message('You feel slightly better.', libtcod.green)
        elif HEAL_AMOUNT >= 12 and HEAL_AMOUNT <= 13:
            message('You feel better.', libtcod.green)
        elif HEAL_AMOUNT >= 14:
            message('You feel much better!', libtcod.green)

        player.fighter.hp += HEAL_AMOUNT
        if player.fighter.hp > player.fighter.max_hp:
            player.fighter.hp = player.fighter.max_hp
        

    elif strength == 'lesser' or strength == 'Lesser':
        HEAL_AMOUNT = libtcod.random_get_int(0, 10, 23)  #16.5
        if HEAL_AMOUNT <= 14:
            message('You feel slightly better.', libtcod.green)
        elif HEAL_AMOUNT >= 15 and HEAL_AMOUNT <= 19:
            message('You feel better.', libtcod.green)
        elif HEAL_AMOUNT >= 20:
            message('You feel much better!', libtcod.green)
        player.fighter.hp += HEAL_AMOUNT
        if player.fighter.hp > player.fighter.max_hp:
            player.fighter.hp = player.fighter.max_hp

    elif strength == 'Medium':
        HEAL_AMOUNT = libtcod.random_get_int(0, 12, 30) #21
        if HEAL_AMOUNT <= 17:
            message('You feel slightly better.', libtcod.green)
        elif HEAL_AMOUNT >= 18 and HEAL_AMOUNT <= 25:
            message('You feel better.', libtcod.green)
        elif HEAL_AMOUNT >= 26:
            message('You feel much better!', libtcod.green)
        player.fighter.hp += HEAL_AMOUNT
        if player.fighter.hp > player.fighter.max_hp:
            player.fighter.hp = player.fighter.max_hp

    elif strength == 'Large':
        HEAL_AMOUNT = libtcod.random_get_int(0, 14, 37) #25.5
        if HEAL_AMOUNT <= 20:
            message('You feel slightly better.', libtcod.green)
        elif HEAL_AMOUNT >= 21 and HEAL_AMOUNT <= 31:
            message('You feel better.', libtcod.green)
        elif HEAL_AMOUNT >= 32:
            message('You feel much better!', libtcod.green)
        player.fighter.hp += HEAL_AMOUNT
        if player.fighter.hp > player.fighter.max_hp:
            player.fighter.hp = player.fighter.max_hp

    elif strength == 'Major':
        HEAL_AMOUNT = libtcod.random_get_int(0, 16, 44) #30
        if HEAL_AMOUNT <= 23:
            message('You feel slightly better.', libtcod.green)
        elif HEAL_AMOUNT >= 24 and HEAL_AMOUNT <= 37:
            message('You feel better.', libtcod.green)
        elif HEAL_AMOUNT >= 38:
            message('You feel much better!', libtcod.green)
        player.fighter.hp += HEAL_AMOUNT
        if player.fighter.hp > player.fighter.max_hp:
            player.fighter.hp = player.fighter.max_hp

    elif strength == 'Great':
        HEAL_AMOUNT = libtcod.random_get_int(0, 18, 52) #35
        if HEAL_AMOUNT <= 26:
            message('You feel slightly better.', libtcod.green)
        elif HEAL_AMOUNT >= 27 and HEAL_AMOUNT <= 43:
            message('You feel better.', libtcod.green)
        elif HEAL_AMOUNT >= 44:
            message('You feel much better!', libtcod.green)
        player.fighter.hp += HEAL_AMOUNT
        if player.fighter.hp > player.fighter.max_hp:
            player.fighter.hp = player.fighter.max_hp
        

    #strength = ['Minor', 'Lesser', 'Medium', 'Large', 'Major', 'Great']
            
        return 'take-turn'
    else:
        pass







#List of corpses that have different effects
#If a corpse only gives satiation, it's darker yellow
#If a corpse makes you lose satiation, it's light blue
#If a corpse gives a temporary buff, it's green
#if a corpse gives a permanent buff, it's darker green
#if a corpse gives a bad but temporary effect, it's red
#if a corpse gives a bad but permanent effect, it's darker red

def Jaguar():
    stuff = libtcod.random_get_int(0,0,100)
    if stuff >= 80 and player.fighter.Base_Agility <= 13:
        message('You feel more Agile!', libtcod.dark_green)
        player.fighter.Base_Agility += 1
    message('A lean and dry taste.', libtcod.dark_yellow)
    player.fighter.satiation += 500

    return 'take-turn'
    
def gorilla():
    stuff = libtcod.random_get_int(0,0,100)
    if stuff >= 80 and player.fighter.Base_Strength <= 13:
        message('You feel Stronger!', libtcod.dark_green)
        player.fighter.Base_Strength += 1
    player.fighter.satiation += 500
    if player.fighter.Class == 'Warlock':
        message('From death, life..', libtcod.dark_yellow)
    elif player.fighter.Class == 'Warrior':
        if player.fighter.Gender == 'Male':
            message("A man's gotta do what he's gotta do..", libtcod.dark_yellow)
        elif player.fighter.Gender == 'Female':
            message("A woman's gotta do what she's gotta do..", libtcod.dark_yellow)
    
    return 'take-turn'

def monkey():
    if player.fighter.Class == 'Warlock':
        message('Tastes like.. Fear', libtcod.dark_yellow)
    elif player.fighter.Class == 'Warrior':
        message("A deep taste of .. Terror.", libtcod.dark_yellow)

    player.fighter.satiation += 500

    return 'take-turn'

##Black Jaguar, White Skull hunter, Monkey

def White_orc():
    message('Tastes like frozen flesh..', libtcod.dark_yellow)
    player.fighter.satiation += 500

    return 'take-turn'

def Black_Jaguar():
    
    player.fighter.satiation += 500
    stuff = libtcod.random_get_int(0,0,100)
    if stuff >= 80 and player.fighter.Base_Intellect <= 13:
        message('Whispers of Secrets expands your mind!', libtcod.dark_green)
        player.fighter.Base_Intellect += 1

    message('Carries a taste of cold bitterness.', libtcod.dark_yellow)

    if player.fighter.Class == 'Warrior':
        message('These were once brave souls..', libtcod.dark_yellow)
    elif player.fighter.Class == 'Warlock':
        message('The damned.. They are restless.', libtcod.dark_yellow)
    
    return 'take-turn'
def wolf_corpse(): #Has a chance of giving a slight, temporary Power bonus to the player
    #Gives a modest amount of Satiation
    player.fighter.satiation += 500
    message('The meat carries a fierce taste.', libtcod.green)
    return 'take-turn'

def bones(): #This is essentialy just eating bones. Bones don't give a lot of nutrition, and they are crunchy.
    player.fighter.satiation += 100
    message('The bones are very hard, dry and crunchy.', libtcod.dark_yellow)
    return 'take-turn'

def alpha_wolf_corpse(): #Alpha wolfs have a higher chanse of giving a bigger and longer power bonus
    #Higher ranks of wolves have a chanse of giving certain power incrases, permanently
    message('The meat carries a very ferocious taste.', libtcod.green)
    player.fighter.satiation += 500
    return 'take-turn'

def thug_corpse(): #Has a chance to give the player diseases, if the player is a human
    #Otherwise, does not do much other than give flavor text based on race
    #Tastes dirty and rugged, does not give a lot of satiation.
    message('This meat tastes very dirty and rugged, much', libtcod.red)
    message("like the previous owner's looks..", libtcod.red)
    player.fighter.satiation += 500
    return 'take-turn'

def troll_corpse(): #Normal trolls give a small amount of satiation and taste really foul
    #Shadow trolls, on the other hand, have a chanse to give regen and taste succulent
    message('This meat tastes really, really foul..', libtcod.dark_yellow)
    return 'take-turn'

def shadow_troll_corpse(): #Since these are a rare spawn, they have a chanse of giving a permanent regen bonus
    message('The meat is succulent.', libtcod.dark_yellow)
    message('You feel invigorated!', libtcod.green)
    player.fighter.satiation += 500
    return 'take-turn'


def orc_corpse(): #Normal orcs taste pretty okay, moderately tough meat
    #The higher ranks of orcs taste differently, based on the hierachy and what they consist of
    #Different orcs taste different, higher ups taste tougher
    message('This meat tastes alright - a bit tough, though.', libtcod.dark_yellow)
    player.fighter.satiation += 500
    return 'take-turn'

def flaming_imp_corpse(): #Imps are of demonic nature, and thus have a corrupting influence if one eats them
    #Flaming Imps have a chanse to corrupt the player, but also has a chanse to give them increased fire resistance

    message("The meat itself barely tastes anything - but it's followed by", libtcod.green)
    message('a very interesting afer-taste..', libtcod.green)
    player.fighter.satiation += 500
    return 'take-turn'
def abomination_corpse(): #Undead corpses are filled with necromantic energy and dark powers
    #Given that the meat is rotten, they taste very bad and generally make the player get sick/puke and lose satiation
    #Althought, given that that they have these powers, they can sometimes grant effects to the player

    #Abominations have a chance to grant you a aura of putridness, that damages enemies near you

    message('This meat is nearly unedible - it carries a putrid, bitter and terrible taste.', libtcod.red)
    message('You feel dark powers pulsating throughout your body..', libtcod.green)
    player.fighter.satiation += 500
    return 'take-turn'
def ghoul_corpse(): #Ghouls are lesser foot soldiers in the hierachy of the Undead Society, thus
    #a ghoul has a chanse of giving a temporary defense Bonus

    message('This meat is really rotten, smells horrible and is terribly discoloured.', libtcod.red)
    message('You feel your flesh becoming more resilient..', libtcod.green)
    player.fighter.satiation += 500
    return 'take-turn'

#make diseases, make random chanse for when you eat bad stuff to get diseases
#Put in a cooking skill
#Create a Skill Table with skillups
#Think about principle of levling up skills
#Think about expanding environments
#Random Spawns?
#Loot incentive
#Power Influx of Loot
#Lose loot?
#Loot Modifications?
#Difficulty increase to increase Loot gain?
#Flexibility of game mechanics?
#Challenge Runs
#Starting Bonuses
#Customization
#Fix the god damn control display


def cast_lightning():
    #find closest enemy (inside a maximum range) and damage it
    monster = closest_monster(LIGHTNING_RANGE)
    if monster is None:  #no enemy found within maximum range
        message('No enemy is close enough to strike.', libtcod.red)
        return 'cancelled'

    #zap it!
    LIGHTNING_DAMAGE = libtcod.random_get_int(0,15,20)
    message('A lighting bolt strikes the ' + monster.name + ' with a loud thunder!', libtcod.light_blue)
    message('The damage is ' + str(LIGHTNING_DAMAGE) + ' hit points.', libtcod.light_blue)
    monster.fighter.take_damage(LIGHTNING_DAMAGE)
    return 'take-turn'

def demon_bolt():
    global demon_bolt_cast
    monster = closest_monster(LIGHTNING_RANGE)
    if monster is None:
        message('No enemy is close enough to strike.', libtcod.purple)
        demon_bolt_cast = False
        return 'cancelled'

    LIGHTNING_DAMAGE = libtcod.random_get_int(0,15,20)
    message('Demonic energies lash out at the ' + monster.name + '!', libtcod.purple)
    monster.fighter.take_damage(LIGHTNING_DAMAGE)

    heal = int(round(LIGHTNING_DAMAGE/3))

    player.fighter.heal(heal)
    
    demon_bolt_cast = True

    
    return 'take-turn'


#Put on Hold in the meantime until guns are implemented
def cannon():
    if len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Gun') != None:
        if player.fighter.Left[0].fire_mode == 'Single/Aimed':
            message('Choose a Monster to shoot.', libtcod.light_cyan)
            monster = target_monster(CONFUSE_RANGE)
            if monster is None: return 'cancelled'

            player.fighter.Left[0].ammo -= 1

            hit = libtcod.random_get_int(0, 1, 100) + player.fighter.Base_Agility
            try:
                hit -= monster.evade
            except:
                pass

            if hit > 10:
                    LIGHTNING_DAMAGE = libtcod.random_get_int(0,player.fighter.Left[0].weapon_min,player.fighter.Left[0].weapon_max)
                    LIGHTNING_DAMAGE -= monster.defense
                    try:
                        if player.fighter.Left[0].armor_pen <= monster.defense:
                            LIGHTNING_DAMAGE += player.fighter.Left[0].armor_pen
                        elif player.fighter.Left[0].armor_pen > monster.defense:
                            LIGHTNING_DAMAGE += (monster.defense)
                    except:
                        pass
                    message('You shoot the ' + monster.name + ' for ' + str(LIGHTNING_DAMAGE) + ' damage!', libtcod.yellow)
                    monster.fighter.take_damage(LIGHTNING_DAMAGE)

            else:
                message('You missed the ' + monster.name + '!', libtcod.red)

        if player.fighter.Left[0].fire_mode == 'Rapid Fire/Aimed':
            message('Choose a Monster to shoot.', libtcod.light_cyan)
            monster = target_monster(CONFUSE_RANGE)
            if monster is None: return 'cancelled'

            
            if player.fighter.Left[0].ammo > player.fighter.Left[0].ammo_cost:
                
                player.fighter.Left[0].ammo -= player.fighter.Left[0].ammo_cost

                hit = libtcod.random_get_int(0, 1, 100) + player.fighter.Base_Agility
                try:
                    hit -= monster.evade
                except:
                    pass
                
                if hit > 20:
                    LIGHTNING_DAMAGE = libtcod.random_get_int(0,player.fighter.Left[0].weapon_min,player.fighter.Left[0].weapon_max)
                    LIGHTNING_DAMAGE -= monster.defense
                    try:
                        if player.fighter.Left[0].armor_pen <= monster.defense:
                            LIGHTNING_DAMAGE += player.fighter.Left[0].armor_pen
                        elif player.fighter.Left[0].armor_pen > monster.defense:
                            LIGHTNING_DAMAGE += (monster.defense)
                    except:
                        pass
                    LIGHTNING_DAMAGE = int(round(LIGHTNING_DAMAGE*1.15))
                    message('You shoot the ' + monster.name + ' for ' + str(LIGHTNING_DAMAGE) + ' damage!', libtcod.yellow)
                    monster.fighter.take_damage(LIGHTNING_DAMAGE)

                else:
                    message('You missed the ' + monster.name + '!', libtcod.red)

        

        if player.fighter.Left[0].fire_mode == 'Rapid Fire/Quick':
            monster = closest_monster(player.fighter.Left[0].fire_range)
            if monster is None:
                message('No enemy is close enough to shoot!', libtcod.red)
                return 'cancelled'

            
            if player.fighter.Left[0].ammo > player.fighter.Left[0].ammo_cost:
                
                player.fighter.Left[0].ammo -= player.fighter.Left[0].ammo_cost

                hit = libtcod.random_get_int(0, 1, 100) + player.fighter.Base_Agility
                try:
                    hit -= monster.evade
                except:
                    pass
                
                if hit > 40:
                    LIGHTNING_DAMAGE = libtcod.random_get_int(0,player.fighter.Left[0].weapon_min,player.fighter.Left[0].weapon_max)
                    LIGHTNING_DAMAGE -= monster.defense
                    try:
                        if player.fighter.Left[0].armor_pen <= monster.defense:
                            LIGHTNING_DAMAGE += player.fighter.Left[0].armor_pen
                        elif player.fighter.Left[0].armor_pen > monster.defense:
                            LIGHTNING_DAMAGE += (monster.defense)
                    except:
                        pass
                    LIGHTNING_DAMAGE = int(round(LIGHTNING_DAMAGE*1.25))
                    message('You shoot the ' + monster.name + ' for ' + str(LIGHTNING_DAMAGE) + ' damage!', libtcod.yellow)
                    monster.fighter.take_damage(LIGHTNING_DAMAGE)

                else:
                    message('You missed the ' + monster.name + '!', libtcod.red)
            

            
            
        if player.fighter.Left[0].fire_mode == 'Single/Quick':
            monster = closest_monster(player.fighter.Left[0].fire_range)
            if monster is None:
                message('No enemy is close enough to shoot!', libtcod.red)
                return 'cancelled'

            
            if player.fighter.Left[0].ammo > 0:
                
                player.fighter.Left[0].ammo -= 1

                hit = libtcod.random_get_int(0, 1, 100) + player.fighter.Base_Agility
                try:
                    hit -= monster.evade
                except:
                    pass
                
                if hit > 25:
                    LIGHTNING_DAMAGE = libtcod.random_get_int(0,player.fighter.Left[0].weapon_min,player.fighter.Left[0].weapon_max)
                    LIGHTNING_DAMAGE -= monster.defense
                    try:
                        if player.fighter.Left[0].armor_pen <= monster.defense:
                            LIGHTNING_DAMAGE += player.fighter.Left[0].armor_pen
                        elif player.fighter.Left[0].armor_pen > monster.defense:
                            LIGHTNING_DAMAGE += (monster.defense)
                    except:
                        pass
                    LIGHTNING_DAMAGE = int(round(LIGHTNING_DAMAGE*1.15))
                    message('You shoot the ' + monster.name + ' for ' + str(LIGHTNING_DAMAGE) + ' damage!', libtcod.yellow)
                    monster.fighter.take_damage(LIGHTNING_DAMAGE)

                else:
                    message('You missed the ' + monster.name + '!', libtcod.red)
            
                

            
        

def monster_drain():
    monster = closest_monster(1)
    if monster is None:
        inspect_menu('No enemy is close enough', 'derp', 70)

    player.fighter.take_damage(10 - player.fighter.defense)
    monster.fighter.hp += 10
    message('current monster hp: ' + str(monster.fighter.hp))
    message('The monster drains your life force.')

def drain_life():
    global drain_life_cast
    monster = closest_monster(1)
    if monster is None:
        message('No enemy is close enough to drain.', libtcod.purple)
        drain_life_cast = False
        return 'cancelled'

    LIGHTNING_DAMAGE = libtcod.random_get_int(0,5,15)
    message('You drain the life force of the ' + monster.name + '!', libtcod.green)
    monster.fighter.take_damage(LIGHTNING_DAMAGE)
    player.fighter.heal(LIGHTNING_DAMAGE)
    drain_life_cast = True
    return 'take-turn'

def corruption():
    derp = libtcod.random_get_int(0,3,3)
    if derp == 1:

        with open('derp.rtf') as f:
                lines = list(islice(f, 10, 13))
        inspect_menu('Demonic Claws', lines, 70)
    if derp == 2:
        player.fighter.base_defense -= 15

    if derp == 3:
        player.fighter.take_damage(20)
        player.fighter.base_max_hp -= 20

def essence_of_fear():
    message('Visions of Terror flow through your mind!', libtcod.red)
    message('You gained the trait: Fearless.', libtcod.green)
    message('Fearless gives a chanse to proc extra effects when striking demons.', libtcod.green)
    player.fighter.traits.append('Fearless')
    
def unleash():
    player.fighter.hp -=5
    player.fighter.max_hp -= 5

    player.fighter.Base_Intellect += 2
    message('As you touch the staff, the staff lights up in a bright light!', libtcod.red)
    message('You feel a burning hatred consuming your soul!', libtcod.red)
    


def cast_fireball():
    #ask the player for a target tile to throw a fireball at
    message('LMB a target tile to cast fireball, RMB to cancel.', libtcod.light_cyan)
    (x, y) = target_tile()
    if x is None: return 'cancelled'
    message('The fireball explodes, burning everything within ' + str(FIREBALL_RADIUS) + ' tiles!', libtcod.orange)

    for obj in objects:  #damage every fighter in range, including the player
        if obj.distance(x, y) <= FIREBALL_RADIUS and obj.fighter:
            message('The ' + obj.name + ' gets burned for ' + str(FIREBALL_DAMAGE) + ' hit points.', libtcod.orange)
            obj.fighter.take_damage(FIREBALL_DAMAGE)
    return 'take-turn'

def cast_confuse():
    #ask the player for a target to confuse
    message('LMB a enemy to confuse it, RMB to cancel.', libtcod.light_cyan)
    monster = target_monster(CONFUSE_RANGE)
    if monster is None: return 'cancelled'

    #replace the monster's AI with a "confused" one; after some turns it will restore the old AI
    old_ai = monster.ai
    monster.ai = ConfusedMonster(old_ai)
    monster.ai.owner = monster  #tell the new component who owns it
    message('The eyes of the ' + monster.name + ' look vacant, as he starts to stumble around!', libtcod.light_green)
    return 'take-turn'



def Observe_monster():
    global mouse
    message('LMB a enemy to observe it, RMB to cancel.', libtcod.yellow)
    monster = target_monster(max_range=None)
    if monster is None:
        message('Nope')
        return 'cancelled'

    #return a string with the names of all objects under the mouse

    (x, y) = (mouse.cx, mouse.cy)

    #create a list with the names of all objects at the mouse's coordinates and in FOV
    names = [obj.name for obj in objects
             if obj.x == x and obj.y == y and libtcod.map_is_in_fov(fov_map, obj.x, obj.y)]
    for i in names:
        if i == 'orc':
            with open('derp.rtf') as f:
                lines = list(islice(f, 0, 4))
            inspect_menu('orc', lines, 70)


def paint_map_add():
    global map_stuff_add
    FILE = open("Map_stuff_Add.txt", "w")

    cPickle.dump(map_stuff_add, FILE)

    FILE.close()

def paint_map_remove():
    global map_stuff_remove
    FILE = open("Map_stuff_Remove.txt", "w")

    cPickle.dump(map_stuff_remove, FILE)

    FILE.close()


def save_map():
    global objects, player, map, MAP_HEIGHT, MAP_WIDTH

    if Dungeon.Terrain_type == 'Wilderness':
        s = 'Wilderness.txt'

        
                

        FILE = open(s, 'w')
        
        cPickle.dump(map, FILE)
        cPickle.dump(objects, FILE)
        FILE.close()
        

    if Dungeon.Terrain_type == 'Random':
        s = "random" + str(Dungeon.dungeon_level) + ".txt"

        s2 = "randomassets" + str(Dungeon.dungeon_level) + ".txt"

        s3 = "randomassetsthree" + str(Dungeon.dungeon_level) + ".txt"
        
        try:
            FILE = open(s, 'w')
            cPickle.dump(map, FILE)
            cPickle.dump(objects, FILE)
            FILE.close()
        except:
            message('bug')
        try:

            number = stairs_in.x
            number2 = stairs_in.y
            
            FILE = open(s2, 'w')
            cPickle.dump(number, FILE)
            cPickle.dump(number2, FILE)
            FILE.close()
        except:
            
            number = player.fighter.stairs_in_x 
            number2 = player.fighter.stairs_in_y

            FILE = open(s2, 'w')
            cPickle.dump(number, FILE)
            cPickle.dump(number2, FILE)
            FILE.close()

        try:
            number3 = stairs_out.x
            number4 = stairs_out.y
            
            FILE = open(s3, 'w')
            cPickle.dump(number3, FILE)
            cPickle.dump(number4, FILE)
            FILE.close()
        except:
            number3 = player.fighter.stairs_out_x
            number4 = player.fighter.stairs_out_y

            FILE = open(s3, 'w')
            cPickle.dump(number3, FILE)
            cPickle.dump(number4, FILE)
            FILE.close()
def save_stats():
    global objects, player, stairs_in, stairs_out

    try:
        right = player.fighter.Right[0]
    except:
        right = []

    try:
        left = player.fighter.Left[0]
    except:
        left = []

    try:
        both = player.fighter.Both[0]
    except:
        both = []

    if player.fighter.wilderness_factor == False:
        wilderness = ['bla']

    elif player.fighter.wilderness_factor == True:
        wilderness = []

    try:
        player.fighter.stairs_out_x = stairs_out.x
        player.fighter.stairs_out_y = stairs_out.y

        stairs_out_x = player.fighter.stairs_out_x
        stairs_out_y = player.fighter.stairs_out_y

    except:
        player.fighter.stairs_out_x = 0
        player.fighter.stairs_out_y = 0

        stairs_out_x = player.fighter.stairs_out_x
        stairs_out_y = player.fighter.stairs_out_y

    try:
        player.fighter.stairs_in_x = stairs_in.x
        player.fighter.stairs_in_y = stairs_in.y

        stairs_in_x = player.fighter.stairs_in_x
        stairs_in_y = player.fighter.stairs_in_y

    except:
        player.fighter.stairs_in_x = 0
        player.fighter.stairs_in_y = 0

        stairs_in_x = player.fighter.stairs_in_x
        stairs_in_y = player.fighter.stairs_in_y

    gold_stuff = player.fighter.gold

    

    

    FILE = open("stats.txt", 'w')

    cPickle.dump(wilderness, FILE)

    cPickle.dump(gold_stuff, FILE)

    cPickle.dump(right, FILE)
    cPickle.dump(left, FILE)
    cPickle.dump(both, FILE)

    

    cPickle.dump(stairs_in_x, FILE)
    cPickle.dump(stairs_in_y, FILE)

    cPickle.dump(stairs_out_x, FILE)
    cPickle.dump(stairs_out_y, FILE)

    

    

    FILE.close()


    cold = player.fighter.cold_res
    fire = player.fighter.fire_res
    light = player.fighter.lightning_res
    spirit = player.fighter.spirit_res
    

    FILE = open("stats1.txt", 'w')

    cPickle.dump(cold, FILE)
    cPickle.dump(fire, FILE)
    cPickle.dump(light, FILE)
    cPickle.dump(spirit, FILE)

    FILE.close()

def load_stats():
    global objects, player, stairs_in, stairs_out

    FILE = open("stats.txt", 'r')

    wilderness = cPickle.load(FILE)

    gold_stuff = cPickle.load(FILE)
        
    right = cPickle.load(FILE)
    left = cPickle.load(FILE)

    
    stairs_in_x = cPickle.load(FILE)
    stairs_in_y = cPickle.load(FILE)
    stairs_out_x = cPickle.load(FILE)
    stairs_out_y = cPickle.load(FILE)

    
    

    

    FILE.close()

    

    if len(wilderness) == 0:
        player.fighter.wilderness_factor = True

    elif len(wilderness) > 0:
        player.fighter.wilderness_factor = False

    

    if right != []:
        player.fighter.Right.append(right)
    else:
        player.fighter.Right = right

    if left != []:
        player.fighter.Left.append(left)
    else:
        player.fighter.Left = left


    for i in objects:
        if i.x == player.x and i.y == player.y and i.name == 'player':
            objects.remove(i)
            break

    
    player.fighter.stairs_out_x = stairs_out_x
    player.fighter.stairs_out_y = stairs_out_y


    
    player.fighter.stairs_in_x = stairs_in_x
    player.fighter.stairs_in_y = stairs_in_y

    player.fighter.gold = gold_stuff

    
    FILE = open("stats1.txt", 'r')

    cold = cPickle.load(FILE)
    fire = cPickle.load(FILE)
        
    light = cPickle.load(FILE)
    spirit = cPickle.load(FILE)

    FILE.close()

    player.fighter.cold_res = cold
    player.fighter.fire_res = fire
    player.fighter.lightning_res = light
    player.fighter.spirit_res = spirit

    

    

def save_game():
    global objects, player, game_msgs, mouse, stairs_out, stairs_in, game_msgs2

    stuff = player.level
    stuff2 = game_msgs
    stuff3 = inventorylist
    stuff4 = Dungeon.Terrain_type

    stuff5 = Dungeon.dungeon_level

    

    

    stuffx = player.x
    stuffy = player.y

    

    name_stuff = player.fighter.Name

    map_x = []
    map_y = []

    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            if map[x][y].block_sight:
                map_x.append(x)
                map_y.append(y)

    stuff_map_x = map_x
    stuff_map_y = map_y

##    fighter_component = Fighter(hp=500, max_hp = 500, Race=None, Sub_race=None, Base_Endurance=15, Endurance=15, Base_Strength=10,
##                                                Strength=10, Base_Intellect=8, Intellect=8, Base_Spirit=13, Spirit=13, Base_Luck=10,
##                                                Luck=10, Base_Agility=8, Agility=8, Life_regen=2, Stamina=100, Max_stamina=100,
##                                                Ki=1, Max_Ki=1, stat_defense=3, defense=3, xp=0, corruption=0, Life_leech=0, satiation=5000,
##                                                max_satiation=10000, metabolism=3, max_corruption=1, Class='Warrior', death_function=player_death)
##            player = Object(0, 0, '@', 'player', libtcod.white, blocks=True, fighter=fighter_component)

    

    hp = player.fighter.hp
    max_hp = player.fighter.max_hp
    
    race = player.fighter.Race
    sub_race = player.fighter.Sub_race
    base_endurance = player.fighter.Base_Endurance
    endurance = player.fighter.Endurance
    base_strength = player.fighter.Base_Strength
    strength = player.fighter.Strength

    base_intellect = player.fighter.Base_Intellect
    intellect = player.fighter.Intellect

    base_spirit = player.fighter.Base_Spirit
    spirit = player.fighter.Spirit

    base_luck = player.fighter.Base_Luck
    luck = player.fighter.Luck

    base_agility = player.fighter.Base_Agility
    agility = player.fighter.Agility

    life_regen = player.fighter.Life_regen
    
    stamina = player.fighter.Stamina
    max_stamina = player.fighter.Max_stamina

    ki_stuff = player.fighter.Ki

    ki_max_stuff = player.fighter.Max_Ki

    stat_def = player.fighter.stat_defense

    defense = player.fighter.defense

    xp = player.fighter.xp

    corruption = player.fighter.corruption

    

    satiation = player.fighter.satiation

    max_satiation = player.fighter.max_satiation

    metabolism = player.fighter.metabolism

    max_corruption = player.fighter.max_corruption

    player_class = player.fighter.Class

    

    event = player.fighter.event

    quest_main = Quest.Quest_Main

    quest_name = Quest.Quest_name

    quest_second = Quest.Quest_Second

    
        
    

    
                
    
    FILE = open("savegame.txt", 'w')

    cPickle.dump(map, FILE)
    
    
    cPickle.dump(objects, FILE)
    cPickle.dump(stuff, FILE)
    cPickle.dump(stuff2, FILE)
    cPickle.dump(stuff3, FILE)
    cPickle.dump(stuff4, FILE)
    cPickle.dump(stuff5, FILE)
    cPickle.dump(stuffx, FILE)
    cPickle.dump(stuffy, FILE)
    cPickle.dump(name_stuff, FILE)
    cPickle.dump(stuff_map_x, FILE)
    cPickle.dump(stuff_map_y, FILE)
    cPickle.dump(hp, FILE)
    cPickle.dump(max_hp, FILE)
    cPickle.dump(stamina, FILE)
    cPickle.dump(max_stamina, FILE)
    cPickle.dump(race, FILE)
    cPickle.dump(sub_race, FILE)
    cPickle.dump(base_endurance, FILE)
    cPickle.dump(endurance, FILE)
    cPickle.dump(base_strength, FILE)
    cPickle.dump(strength, FILE)
    cPickle.dump(base_intellect, FILE)
    cPickle.dump(intellect, FILE)
    cPickle.dump(base_spirit, FILE)
    cPickle.dump(spirit, FILE)
    cPickle.dump(base_luck, FILE)
    cPickle.dump(luck, FILE)
    cPickle.dump(base_agility, FILE)
    cPickle.dump(agility, FILE)
    cPickle.dump(life_regen, FILE)
    cPickle.dump(ki_stuff, FILE)
    cPickle.dump(ki_max_stuff, FILE)
    cPickle.dump(stat_def, FILE)
    cPickle.dump(defense, FILE)
    cPickle.dump(xp, FILE)
    cPickle.dump(corruption, FILE)
    cPickle.dump(satiation, FILE)
    cPickle.dump(max_satiation, FILE)
    cPickle.dump(metabolism, FILE)
    cPickle.dump(max_corruption, FILE)
    cPickle.dump(player_class, FILE)
    cPickle.dump(quest_main, FILE)
    cPickle.dump(quest_name, FILE)
    cPickle.dump(quest_second, FILE)

    
    cPickle.dump(event, FILE)

    

    

    
    FILE.close()

    
        
        

    

    


def load_game():

    global map, objects, game_msgs, game_msgs2, fov_recompute, game_state, inventorylist, mouse, key, LOAD_FACTOR, combat_msgs, combat_log

    

    
    
    
    

    FILE = open("savegame.txt", 'r')

    map = cPickle.load(FILE)
    
    objects = cPickle.load(FILE)
    stuff = cPickle.load(FILE)
    stuff2 = cPickle.load(FILE)
    stuff3 = cPickle.load(FILE)
    stuff4 = cPickle.load(FILE)
    stuff5 = cPickle.load(FILE)
    stuffx = cPickle.load(FILE)
    stuffy = cPickle.load(FILE)
    name_stuff = cPickle.load(FILE)
    stuff_map_y = cPickle.load(FILE)
    stuff_map_x = cPickle.load(FILE)
    hp = cPickle.load(FILE)
    max_hp = cPickle.load(FILE)
    stamina = cPickle.load(FILE)
    max_stamina = cPickle.load(FILE)

    race = cPickle.load(FILE)
    sub_race = cPickle.load(FILE)
    base_endurance = cPickle.load(FILE)
    endurance = cPickle.load(FILE)
    base_strength = cPickle.load(FILE)
    strength = cPickle.load(FILE)
    base_intellect = cPickle.load(FILE)
    intellect = cPickle.load(FILE)
    base_spirit = cPickle.load(FILE)
    spirit = cPickle.load(FILE)
    base_luck = cPickle.load(FILE)
    luck = cPickle.load(FILE)
    base_agility = cPickle.load(FILE)
    agility = cPickle.load(FILE)
    life_regen = cPickle.load(FILE)
    ki_stuff = cPickle.load(FILE)
    ki_max_stuff = cPickle.load(FILE)
    stat_def = cPickle.load(FILE)
    defense = cPickle.load(FILE)
    xp = cPickle.load(FILE)
    corruption = cPickle.load(FILE)
    satiation = cPickle.load(FILE)
    max_satiation = cPickle.load(FILE)
    metabolism = cPickle.load(FILE)
    max_corruption = cPickle.load(FILE)
    player_class = cPickle.load(FILE)
    quest_main = cPickle.load(FILE)
    quest_name = cPickle.load(FILE)
    quest_second = cPickle.load(FILE)

    event = cPickle.load(FILE)

    
    
    
    

    FILE.close()

    

    

    

    initialize_fov()

    

    
    shop_msgs = []
    game_msgs = []

    combat_msgs = []
    combat_log = []

    game_msgs2 = []
    inventorylist = stuff3
    Dungeon.Terrain_type = stuff4
    Dungeon.dungeon_level = stuff5

    player.fighter.Name = name_stuff

    player.fighter.hp = hp
    player.fighter.max_hp = max_hp

    player.fighter.Stamina = stamina
    player.fighter.Max_stamina = max_stamina

    

    player.fighter.event = event
    

    player.fighter.Race = race
    player.fighter.Sub_race = sub_race
    player.fighter.Base_Endurance = base_endurance
    player.fighter.Endurance = endurance
    player.fighter.Base_Strength = base_strength
    player.fighter.Strength = strength
    player.fighter.Base_Intellect = base_intellect
    player.fighter.Intellect = intellect
    player.fighter.Base_Spirit = base_spirit
    player.fighter.Spirit = spirit
    player.fighter.Base_Luck = base_luck
    player.fighter.Luck = luck
    player.fighter.Base_Agility = base_agility
    player.fighter.Agility = agility
    player.fighter.Life_regen = life_regen
    player.fighter.Ki = ki_stuff
    player.fighter.Max_Ki = ki_max_stuff
    player.fighter.stat_defense = stat_def
    player.fighter.defense = defense
    player.fighter.xp = xp
    player.fighter.corruption = corruption
    player.fighter.satiation = satiation
    player.fighter.max_satiation = max_satiation
    player.fighter.metabolism = metabolism
    player.fighter.max_corruption = max_corruption
    player.fighter.Class = player_class

       
    
    

    
    

    

    for i in objects:
        if i.x == 10 and i.y == 10 and i.name == 'player':
            objects.remove(i)

    player.x = stuffx
    player.y = stuffy

    

    
    

    

    

    player.level = stuff
    Quest.Quest_Main = quest_main
    Quest.Quest_name = quest_name
    Quest.Quest_Second = quest_second

    game_state = 'playing'

    key = libtcod.Key()

    mouse = libtcod.Mouse()

    LOAD_FACTOR = 1


def search_pot(materials, number, costs):
    count = 0
    for i in Dungeon.materials:
        if materials[number] == i.name:
            
            if i.item.quantity >= costs[number]:
                index = count
                
                message('You have ' + str(i.item.quantity) + ' ' + i.name + ', req: ' + str(costs[number]) + '.', libtcod.green)
                Dungeon.copy.append('Craft')  
                i.item.quantity -= costs[number]
                Dungeon.copy.append(index)
                Dungeon.copy.append(costs[number])
                
                break
            elif i.item.quantity < costs[number]:
                message('You have ' + str(i.item.quantity) + ' ' + i.name + ', req: ' + str(costs[number]) + '.', libtcod.yellow)
                (Dungeon.materials[(Dungeon.copy[-2])]).item.quantity += Dungeon.copy[-1]
                break

        count += 1

def Conceal_Bonus(slot):
    
    conceal_return = 0
    if len(slot) > 0:
        item = slot[0]
        try:
            conceal_return += item.Conceal_Bonus
            return conceal_return
        except Exception as e:
            return conceal_return
    else:
        return conceal_return

def craft_potion(strength, effect, name, costs, materials):
    global objects
    check_list = []
    Dungeon.copy = []
    for i in Dungeon.materials:
        check_list.append(i.name)
    for i in materials:
        if i not in check_list:
            Dungeon.copy.append(i)
    if len(Dungeon.copy) > 0:
        thing = str(Dungeon.copy)
        message('You lack : ' + thing[1:-1] + '!', libtcod.red)
        return
    
    for i in range(len(materials)):
        
        search_pot(materials, i, costs)

    if len(Dungeon.copy) == len(materials)*3:
        potion_name = str(strength + ' ' + effect + ' ' + name)
        
        if 'Healing' in potion_name:
            #strength = ['Minor', 'Lesser', 'Medium', 'Large', 'Major', 'Great']
            if strength == 'Minor':
                color = libtcod.Color(240,114,114)
            if strength == 'Lesser':
                color = libtcod.Color(249,84,84)
            if strength == 'Medium':
                color = libtcod.Color(252,60,60)
            if strength == 'Large':
                color = libtcod.Color(249,45,45)
            if strength == 'Major':
                color = libtcod.Color(247,35,35)
            if strength == 'Great':
                color = libtcod.Color(255,13,13)
                
            derp = cast_heal(strength, True)
            weight = 3
            
        elif 'Armor' in potion_name:
            if strength == 'Minor':
                color = libtcod.Color(175,175,175)
            if strength == 'Lesser':
                color = libtcod.Color(195,195,195)
            if strength == 'Medium':
                color = libtcod.Color(215,215,215)
            if strength == 'Large':
                color = libtcod.Color(235,235,235)
            if strength == 'Major':
                color = libtcod.Color(245,245,245)
            if strength == 'Great':
                color = libtcod.Color(255,255,255)

            weight = 10
            derp = armor_buff('Armor', strength, 5)
        elif 'Speed' in potion_name:
            if strength == 'Minor':
                color = libtcod.Color(255,255,115)
            if strength == 'Lesser':
                color = libtcod.Color(255,255,95)
            if strength == 'Medium':
                color = libtcod.Color(255,255,75)
            if strength == 'Large':
                color = libtcod.Color(255,255,55)
            if strength == 'Major':
                color = libtcod.Color(255,255,35)
            if strength == 'Great':
                color = libtcod.Color(255,255,15)

            weight = 2

        #effects = ['Strength'

        elif 'Strength' in potion_name:
            if strength == 'Minor':
                color = libtcod.Color(240,114,114)
            if strength == 'Lesser':
                color = libtcod.Color(249,84,84)
            if strength == 'Medium':
                color = libtcod.Color(252,60,60)
            if strength == 'Large':
                color = libtcod.Color(249,45,45)
            if strength == 'Major':
                color = libtcod.Color(247,35,35)
            if strength == 'Great':
                color = libtcod.Color(255,13,13)

            weight = 3
            

        elif 'Agility' in potion_name:
            if strength == 'Minor':
                color = libtcod.Color(100,255,100)
            if strength == 'Lesser':
                color = libtcod.Color(80,255,80)
            if strength == 'Medium':
                color = libtcod.Color(60,255,60)
            if strength == 'Large':
                color = libtcod.Color(40,255,40)
            if strength == 'Major':
                color = libtcod.Color(20,255,20)
            if strength == 'Great':
                color = libtcod.Color(0,255,0)

            weight = 3

        elif 'Freeze Greanade' in potion_name:
            color = libtcod.Color(51,255,255)

            weight = 7

            derp = target_monster(4, True, 5, 10, kind='Freeze')
            

        

        
            

        item_component = Item(defense_bonus=0, name=potion_name, slot='Right Hand', use_function=derp, eat_function=None)
        obj = Object(player.x, player.y, '!', potion_name, color ,slot='Right Hand', weight=weight, weapon_type='Sharp', item=item_component)

        objects.append(obj)
        obj.send_to_back()
        obj.always_visible = False

        
        armor_buff('Agility', 'Lesser', 6)#6
        
        
        
        
        

        
        
        

    

def temp_thing2(slot, slot2=None):
    if slot == None and slot2 == None:
        Dungeon.temp = ''
        Dungeon.temp2 = ''
        return

    if len(slot) > 0:
        Dungeon.temp2 = slot[0]

    equip_list = [player.fighter.head, player.fighter.neck, player.fighter.chest, player.fighter.shoulders, player.fighter.belt, player.fighter.bracers, player.fighter.gloves, player.fighter.legs,
                  player.fighter.boots, player.fighter.trinket1, player.fighter.ring2, player.fighter.ring1, player.fighter.trinket2]
    if slot2 == None and len(slot) > 0:
        Dungeon.helm_info = str(slot[0].defense_bonus) + '/' + str(slot[0].weight) + '/' + str(slot[0].crit) + '/'
                                                      
        Dungeon.helm_info = Dungeon.helm_info + str(slot[0].block_bonus) + '/' + str(slot[0].weapon_min) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot[0].weapon_max) + '/' + str(slot[0].weapon_agi) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot[0].weapon_str) + '/' + str(slot[0].fire) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot[0].ice) + '/' + str(slot[0].lightning) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot[0].spirit) + '/' + str(slot[0].ammo_cost) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot[0].fire_range) + '/' + str(slot[0].Conceal_Bonus) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot[0].armor_pen)
        if slot[0].fire_mode != '':
            Dungeon.helm_info = Dungeon.helm_info + '/ ' + str(slot[0].fire_mode)

    

    elif len(slot) > 0 and slot2 != None:
        
        Dungeon.helm_info = str(slot2.defense_bonus - slot[0].defense_bonus ) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.weight - slot[0].weight) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.crit - slot[0].crit) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.block_bonus - slot[0].block_bonus) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.weapon_min - slot[0].weapon_min) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.weapon_max - slot[0].weapon_max) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.weapon_agi - slot[0].weapon_agi) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.weapon_str - slot[0].weapon_str) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.fire - slot[0].fire) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.ice - slot[0].ice) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.lightning - slot[0].lightning) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.spirit - slot[0].spirit) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.ammo_cost - slot[0].ammo_cost) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.fire_range - slot[0].fire_range) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.Conceal_Bonus - slot[0].Conceal_Bonus) + '/'
        Dungeon.helm_info = Dungeon.helm_info + str(slot2.armor_pen - slot[0].armor_pen) + '/'
        

    else:
        if len(slot) == 0 and slot2 != None:
            Dungeon.helm_info = str(slot2.defense_bonus) + '/' + str(slot2.weight) + '/' + str(slot2.crit) + '/'
                                                      
            Dungeon.helm_info = Dungeon.helm_info + str(slot2.block_bonus) + '/' + str(slot2.weapon_min) + '/'
            Dungeon.helm_info = Dungeon.helm_info + str(slot2.weapon_max) + '/' + str(slot2.weapon_agi) + '/'
            Dungeon.helm_info = Dungeon.helm_info + str(slot2.weapon_str) + '/' + str(slot2.fire) + '/'
            Dungeon.helm_info = Dungeon.helm_info + str(slot2.ice) + '/' + str(slot2.lightning) + '/'
            Dungeon.helm_info = Dungeon.helm_info + str(slot2.spirit) + '/' + str(slot2.ammo_cost) + '/'
            Dungeon.helm_info = Dungeon.helm_info + str(slot2.fire_range) + '/' + str(slot2.Conceal_Bonus) + '/'
            Dungeon.helm_info = Dungeon.helm_info + str(slot2.armor_pen)
            if slot2.fire_mode != '':
                Dungeon.helm_info = Dungeon.helm_info + '/ ' + str(slot2.fire_mode)

def temp_thing():

    listofdoom = []
    listofdoom3 = []
    listofdoom2 = ['Armor: ', 'Weight: ', 'Crit: ', 'Block Bonus: ', 'Weapon min: ', 'Weapon max: ', 'Agi scaling: ', 'Str scaling: ', 'Fire res: ', 'Ice res: ', 'Lightning res: ', 'Spirit res: ',
                   'Ammo Cost: ', 'Range Increase: ', 'Range Dmg Increase: ', 'Armor Pen: ']

    count = 0
    count2 = 0

    counting = 0

    temp1 = []
    temp2 = []

    for i in Dungeon.helm_info:
        try:
            if Dungeon.helm_info[count+1] != '/' and i != '/' and Dungeon.helm_info[count+2] != '/':
                listofdoom.append(i + Dungeon.helm_info[count+1] + Dungeon.helm_info[count+2])
            elif Dungeon.helm_info[count+1] != '/' and i != '/':
                listofdoom.append(i + Dungeon.helm_info[count+1])
                
            
            else:
                if i != '/' and Dungeon.helm_info[count-1] == '/':
                    listofdoom.append(i)
                elif count == 0:
                    if i != '0':
                        listofdoom.append(i)
            count += 1
        except:
            pass
        
    for i in listofdoom:
        if i != '0':
            listofdoom3.append(i)

    


    empty1 = ''

    empty2 = ''

    count = 0

    for i in listofdoom3:
        empty1 += i

    count = 0
    count2 = 0
    save_list = []

    
    
    for i in Dungeon.helm_info:
        empty2 = ''
        if i != '/':
            
            
            
            try:

                if i == '-':
                    empty2 += '-'
                    count += 1
                
                empty2 += listofdoom2[count] + i
                if Dungeon.helm_info[count2+1] != '/':
                    empty2 += Dungeon.helm_info[count2+1]

                
                
                
                save_list.append(empty2)
                    

                
            except:
                pass
    
            
            count += 1

        count2 += 1

    

    

    
##    thing = empty1.strip('-')
##    thingy2 = empty2.strip('-/')
##    
##
##    if thing not in thingy2:
##        listofdoom3 = listofdoom3[:-1]
##
##    
##
##    count = 0
##
##    for i in listofdoom2:
##        try:
##            listofdoom2[count] = listofdoom2[count] + listofdoom3[count]
##            count += 1
##        except:
##            listofdoom2 = listofdoom2[0:count]
##            break
##
##    Dungeon.temp = listofdoom2
##        
##    
    return
    


    

def power_menu(page=None, read_pages=None, max_page=1, factorofdoom = 0, index_count = 0, second_factor = 0, poop = 0,
               Crafting=False, adding=False, cooking=False, level_up=False, skills=False, first_time=False, alchemy=False, random=False, glory=False, glory2=False,
               glory3=False, slot1=None, slot2=None, slot3=None, slot4=None,
               slot1_cost=None, slot2_cost=None, slot3_cost=None,
               weapon=None, armor=None, strength=None):
    global game_state, mouse, craft_msgs, equip_msgs, xp_bonus, blyat2
    mouse = libtcod.Mouse()
    choice = None

    read_pages = 0


    if cooking == True:
        window = libtcod.console_new(100, 90)
        

    

    if Crafting == True:

        
        window = libtcod.console_new(65, 100)
        window2 = libtcod.console_new(65, 60)
        window3 = libtcod.console_new(65, 1)
        
        Dungeon.craft_list = []
        Dungeon.damage_min = 0
        Dungeon.damage_max = 0
        current_slot = 'None'
        current_material = 'None'
        commited_slot1 = 'None'
        commited_slot2 = 'None'
        commited_slot3 = 'None'
        commited_slot4 = 'None'

        name = False

        

        stuff = 0
        index = 0
        
        if len(inventorylist[index]) > 0:
            for i in inventorylist[index]:
            
                try:
                    if i.item.rarity == 'Material':
                        
                        
                        Dungeon.craft_list.append(i.id_number)
                        

                        
                        
                        if i.name not in Dungeon.craft_names:
                            Dungeon.craft_names.append(i.name)
                            

                            
                except:
                    pass
                                          
                stuff += 1
                if stuff % 25 == 0:
                    index += 1
        crafting_y = 20

        if len(Dungeon.craft_list) > 0:
            Dungeon.craft_list.sort()
            
            
            amounts = []
            index_count = 0
           
            old = Dungeon.craft_list[0]
        

            

            
                    
        
            

    

    if page == None and Crafting == False:
        page = 0


    #player.fighter.defense1
    #player.fighter.off1
    #player.fighter.2h1
    #player.fighter.elements1
    #player.fighter.unarmed1

    

    #Above is for 2h
##    if Crafting == False:
##        window = libtcod.console_new(100, 90)

    if random == True or skills == True:
        window = libtcod.console_new(150, 90)

    else:
        window = libtcod.console_new(100, 90)
        
        
    
    
        

    

    while choice == None:

        if alchemy == True and Crafting == False:
            libtcod.console_clear(0)
            libtcod.console_clear(window)
            img = libtcod.image_load('black_background.png')

            libtcod.image_blit_2x(img, window, 0, 0, sx=0, sy=0, w=-1, h=-1)

            img = libtcod.image_load('black_background.png')
            libtcod.image_blit_2x(img, 0, 95, 0, sx=0, sy=0, w=-1, h=-1)
            count = 0
            letter_index = ord('a')
            #Uncommon, rare, artifact, shatm #green, dark_cyan, orange, light_red
            #Minor, Lesser, Medium, Large, Major, Great
            if strength == 'Medium':
                libtcod.console_set_default_foreground(window, libtcod.green)
            if strength == 'Large':
                libtcod.console_set_default_foreground(window, libtcod.dark_cyan)
            if strength == 'Major':
                libtcod.console_set_default_foreground(window, libtcod.orange)
            if strength == 'Great':
                libtcod.console_set_default_foreground(window, libtcod.light_red)
            libtcod.console_print_ex(window, 10, 7, libtcod.BKGND_NONE, libtcod.LEFT, strength + ' Potions')
            libtcod.console_set_default_foreground(window, libtcod.white)

            
            
            strength_list = []
            Dungeon.original_recipies = []
            
            
            
            for i in Dungeon.recipies:
                if 'Minor' in i:
                    if 'Minor' not in strength_list:
                        strength_list.append('Minor')
                if 'Lesser' in i:
                    if 'Lesser' not in strength_list:
                        strength_list.append('Lesser')

                if 'Medium' in i:
                    if 'Medium' not in strength_list:
                        strength_list.append('Medium')

                if 'Large' in i:
                    if 'Large' not in strength_list:
                        strength_list.append('Large')

                if 'Major' in i:
                    if 'Major' not in strength_list:
                        strength_list.append('Major')

                if 'Great' in i:
                    if 'Great' not in strength_list:
                        strength_list.append('Great')
 
                if strength in i:
                    
                    Dungeon.original_recipies.append(i)
                    
                    libtcod.console_print_ex(window, 10, 9+count, libtcod.BKGND_NONE, libtcod.LEFT, chr(letter_index) + ')' + i)
                    letter_index += 1
                    count += 1


            libtcod.console_print_ex(window, 80, 5, libtcod.white, libtcod.LEFT, 'MATERIALS:')
            y = 6
            for i in Dungeon.materials:
                libtcod.console_print_ex(window, 80, y, libtcod.white, libtcod.LEFT, str(i.item.quantity) + ' ' + str(i.name))
                y += 1

            

            

            

            if len(strength_list) > 1:
                
                libtcod.console_print_ex(window, 35, 7, libtcod.BKGND_NONE, libtcod.LEFT, '<<<-->>>')
            
            

            

        if skills == True and Crafting == False:
            img = libtcod.image_load('black_background.png')

            libtcod.image_blit_2x(img, window, 0, 0, sx=0, sy=0, w=-1, h=-1)

            img = libtcod.image_load('black_background.png')
            libtcod.image_blit_2x(img, 0, 95, 0, sx=0, sy=0, w=-1, h=-1)

            count = 10
            count2 = 10

            libtcod.console_print_ex(window, 58, 8, libtcod.BKGND_NONE, libtcod.LEFT, 'Currently: ')

            if adding == False:
            
                
                libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_ex(window, 69, 8, libtcod.BKGND_NONE, libtcod.LEFT, 'Subtracting')
                libtcod.console_set_default_foreground(window, libtcod.white)
            else:
                

                libtcod.console_set_default_foreground(window, libtcod.green)
                libtcod.console_print_ex(window, 69, 8, libtcod.BKGND_NONE, libtcod.LEFT, 'Adding')
                libtcod.console_set_default_foreground(window, libtcod.white)

            libtcod.console_print_ex(window, 58, 6, libtcod.BKGND_NONE, libtcod.LEFT, 'Skill points: ' + str(Dungeon.skill_buffer)) #Come back skill_buffer

            if first_time == True:
                libtcod.console_print_ex(window, 50, 4, libtcod.BKGND_NONE, libtcod.LEFT, 'Points cap in a Skill for Character Creation is 35')

            libtcod.console_print_ex(window, 58, 3, libtcod.BKGND_NONE, libtcod.LEFT, 'LMB to change between Add/Subtract')

            for i in Dungeon.skills:
                libtcod.console_set_default_foreground(window, libtcod.orange)
                libtcod.console_print_ex(window, 58, count2, libtcod.BKGND_NONE, libtcod.LEFT, i)
                libtcod.console_set_default_foreground(window, libtcod.white)
                if i != 'No skills':
                    libtcod.console_print_ex(window, 59+len(Dungeon.skills[count-10]), count2, libtcod.BKGND_NONE, libtcod.LEFT, ': ' + str(Dungeon.skill_numbers[count-10]))
                count += 1
                count2 += 2
          

        if random == True and Crafting == False:
            
            (x, y) = (mouse.x, mouse.y)
            img = libtcod.image_load('black_background.png')

            libtcod.image_blit_2x(img, window, 0, 0, sx=0, sy=0, w=-1, h=-1)

            img = libtcod.image_load('black_background.png')
            libtcod.image_blit_2x(img, 0, 95, 0, sx=0, sy=0, w=-1, h=-1)
            count = 0
            for (line, color) in equip_msgs:
                libtcod.console_set_default_foreground(window, color)
                libtcod.console_print_ex(window, 58, 4+count, libtcod.BKGND_NONE, libtcod.LEFT, line)
                count += 1

            libtcod.console_set_default_foreground(window, libtcod.white)

            libtcod.console_clear(window)
            
            width = 150
            height = 100

            
            
            libtcod.console_print(window, 3,5,"%c%c%c%cName:%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

            libtcod.console_print_rect_ex(window, 9, 5, width/2-30, height/2 , libtcod.white, libtcod.LEFT, player.fighter.Name) #Player name

            libtcod.console_print(window, 3,7,"%c%c%c%cAge:%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))
            

            libtcod.console_print_rect_ex(window, 7, 7, width/2-30, height/2 , libtcod.white, libtcod.LEFT, str(Dungeon.age)) #Player age

            libtcod.console_print(window, 3,9,"%c%c%c%cGender:%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

            libtcod.console_print_rect_ex(window, 11, 9, width/2-30, height/2 , libtcod.white, libtcod.LEFT, player.fighter.Gender) #Player Gender

            libtcod.console_print(window, 3,11,"%c%c%c%cHeight:%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

            libtcod.console_print_rect_ex(window, 11, 11, width/2-30, height/2 , libtcod.white, libtcod.LEFT, 'ph') #Player Height

            libtcod.console_print(window, 3,13,"%c%c%c%cEye Colour:%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

            libtcod.console_print(window, 3,15,"%c%c%c%cHair Colour:%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

            libtcod.console_print(window, 3,17,"%c%c%c%cSkin Colour:%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

            

            
                
                
            if len(Dungeon.temp) > 0: #Come Back3
                if Dungeon.temp == 'N/A':
                    libtcod.console_set_default_foreground(window, libtcod.light_red)

                    
                if Dungeon.temp != '' and Dungeon.temp != 'N/A':
                    
                    try:
                        if Dungeon.temp2.rarity == '':
                            libtcod.console_print_rect_ex(window, 45, 2, width/2-40, height/2 , libtcod.red, libtcod.LEFT, Dungeon.temp2.name) #Player Height
                            libtcod.console_set_default_foreground(window, libtcod.white)
                        if Dungeon.temp2.rarity == 'Uncommon':
                            libtcod.console_set_default_foreground(window, libtcod.green)
                            libtcod.console_print_rect_ex(window, 45, 2, width/2-40, height/2 , libtcod.red, libtcod.LEFT, Dungeon.temp2.name) #Player Height
                            libtcod.console_set_default_foreground(window, libtcod.white)
                        elif Dungeon.temp2.rarity == 'Rare':
                            libtcod.console_set_default_foreground(window, libtcod.dark_cyan)
                            libtcod.console_print_rect_ex(window, 45, 2, width/2-40, height/2 , libtcod.red, libtcod.LEFT, Dungeon.temp2.name) #Player Height
                            libtcod.console_set_default_foreground(window, libtcod.white)
                        elif Dungeon.temp2.rarity == 'Artifact':
                            #NOT IN THIS ONE
                            libtcod.console_set_default_foreground(window, libtcod.orange)
                            libtcod.console_print_rect_ex(window, 45, 2, width/2-40, height/2 , libtcod.red, libtcod.LEFT, Dungeon.temp2.name) #Player Height
                            libtcod.console_set_default_foreground(window, libtcod.white)
                        elif Dungeon.temp2.rarity == 'Shatm':
                            libtcod.console_set_default_foreground(window, libtcod.light_red)
                            libtcod.console_print_rect_ex(window, 45, 2, width/2-40, height/2 , libtcod.red, libtcod.LEFT, Dungeon.temp2.name) #Player Height
                            libtcod.console_set_default_foreground(window, libtcod.white)
                    except:
                        libtcod.console_print_rect_ex(window, 45, 2, width/2-40, height/2 , libtcod.red, libtcod.LEFT, Dungeon.temp2.name) #Player Height
                

                count = 0
                
                
                for i in Dungeon.temp:
                    libtcod.console_print_rect_ex(window, 45, 3+count, width/2-40, height/2 , libtcod.red, libtcod.LEFT, i) #Player Height
                    count += 1
                    
                    
                libtcod.console_set_default_foreground(window, libtcod.white)
                

            if len(player.fighter.head) > 0:
                libtcod.console_print_rect_ex(window, 65, 4, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'a) Helm: ') #Player Height
                if player.fighter.head[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.head[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.head[0].rarity == 'Artifact':
                    
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.head[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 74, 4, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.head[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 4, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'a) Helm:                                            ')

            if len(player.fighter.Right) > 0:
                libtcod.console_print_rect_ex(window, 65, 46, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'o) Right Hand: ') #Player Height
                if player.fighter.Right[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.Right[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.Right[0].rarity == 'Artifact':
                    
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.Right[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 80, 46, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.Right[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            

            else:
                if len(player.fighter.Both) == 0:
                    libtcod.console_print_rect_ex(window, 65, 46, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'o) Right Hand:                                            ')

            if len(player.fighter.Both) == 0 and len(player.fighter.Right) == 0 and len(player.fighter.Left) == 0:
                libtcod.console_print_rect_ex(window, 65, 49, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'p) Both Hands:                                            ')

            if len(player.fighter.Both) > 0:
                libtcod.console_print_rect_ex(window, 65, 49, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'p) Both Hands: ') #Player Height
                if player.fighter.Both[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.Both[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.Both[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.Both[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 80, 43, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.Both[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            if len(player.fighter.Left) > 0:
                
                libtcod.console_print_rect_ex(window, 65, 43, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'n) Left Hand: ') #Player Height
                if player.fighter.Left[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.Left[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.Left[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.Left[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 79, 43, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.Left[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            

            else:
                if len(player.fighter.Both) == 0:
                    libtcod.console_print_rect_ex(window, 65, 43, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'n) Left Hand:                                            ')

            
                

            if len(player.fighter.neck) > 0:
                libtcod.console_print_rect_ex(window, 65, 7, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'b) Neck: ') #Player Height

                
                if player.fighter.neck[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.neck[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.neck[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.neck[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 74, 7, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.neck[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 7, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'b) Neck:                                            ')

            if len(player.fighter.shoulders) > 0:
                libtcod.console_print_rect_ex(window, 65, 10, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'c) Shoulders: ') #Player Height

                
                if player.fighter.shoulders[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.shoulders[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.shoulders[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.shoulders[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 79, 10, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.shoulders[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 10, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'c) Shoulders:                                            ')

            if len(player.fighter.ring1) > 0: 
                libtcod.console_print_rect_ex(window, 65, 40, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'm) Left Ring: ') #Player Height

                if player.fighter.ring1[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.ring1[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.ring1[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.ring1[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 79, 41, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.ring1[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 40, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'm) Left Ring:                                            ')
            if len(player.fighter.ring2) > 0: 
                libtcod.console_print_rect_ex(window, 65, 37, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'l) Right Ring: ') #Player Height

                

                
                if player.fighter.ring2[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.ring2[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.ring2[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.ring2[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 80, 37, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.ring2[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 37, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'l) Right Ring:                                            ')

            if len(player.fighter.trinket1) > 0: 
                libtcod.console_print_rect_ex(window, 65, 31, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'j) Left Trinket: ') #Player Height

                

                
                if player.fighter.trinket1[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.trinket1[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.trinket1[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.trinket1[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 72, 31, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.trinket1[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 31, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'j) Left Trinket:                                            ')

            if len(player.fighter.trinket2) > 0: 
                
                libtcod.console_print_rect_ex(window, 65, 34, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'k) Right Trinket: ') #Player Height

                
                if player.fighter.trinket2[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.trinket2[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.trinket2[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.trinket2[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 83, 34, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.trinket2[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 34, width/2, 1 , libtcod.white, libtcod.LEFT, 'k) Right Trinket:                                            ')
                 

            if len(player.fighter.boots) > 0: 
                libtcod.console_print_rect_ex(window, 65, 28, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'f) Boots: ') #Player Height

                
                if player.fighter.boots[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.boots[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.boots[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.boots[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 75, 28, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.boots[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 28, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'i) Boots:                                            ') 

            if len(player.fighter.legs) > 0: 
                

                libtcod.console_print_rect_ex(window, 65, 25, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'f) Legs: ') #Player Height

                
                if player.fighter.legs[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.legs[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.legs[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.legs[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 74, 25, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.legs[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 25, width/2-5, height/2 , libtcod.white, libtcod.LEFT, 'h) Legs:                                            ')

            if len(player.fighter.gloves) > 0: #come back4
                libtcod.console_print_rect_ex(window, 65, 22, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'f) Gloves: ') #Player Height

                
                if player.fighter.gloves[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.gloves[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.gloves[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.gloves[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 76, 22, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.gloves[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 22, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'g) Gloves:                                            ')

            if len(player.fighter.bracers) > 0: 
                libtcod.console_print_rect_ex(window, 65, 19, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'f) Bracers: ') #Player Height

                
                if player.fighter.bracers[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.bracers[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.bracers[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.bracers[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 77, 19, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.bracers[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 19, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'f) Bracers:                                            ')

            if len(player.fighter.belt) > 0: 
                libtcod.console_print_rect_ex(window, 65, 16, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'e) Belt: ') #Player Height
                
                if player.fighter.belt[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.belt[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.belt[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.belt[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 74, 16, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.belt[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 16, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'e) Belt:                                            ')

            if len(player.fighter.chest) > 0:
                
                libtcod.console_print_rect_ex(window, 65, 13, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'd) Chest: ') #Player Height

                

                
                if player.fighter.chest[0].rarity == 'Uncommon':
                    libtcod.console_set_default_foreground(window, libtcod.green)

                if player.fighter.chest[0].rarity == 'Rare':
                    libtcod.console_set_default_foreground(window, libtcod.dark_cyan)

                if player.fighter.chest[0].rarity == 'Artifact':
                    libtcod.console_set_default_foreground(window, libtcod.orange)

                if player.fighter.chest[0].rarity == 'Shatm':
                    libtcod.console_set_default_foreground(window, libtcod.red)
                libtcod.console_print_rect_ex(window, 75, 13, width/2-5, height/2 , libtcod.white, libtcod.LEFT, str(player.fighter.chest[0].name)) #Player Height

                libtcod.console_set_default_foreground(window, libtcod.white)

            else:
                libtcod.console_print_rect_ex(window, 65, 13, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'd) Chest:                                            ')


            Conceal = 0


            Conceal += Conceal_Bonus(player.fighter.Right)
            Conceal += Conceal_Bonus(player.fighter.Left)
            Conceal += Conceal_Bonus(player.fighter.Both)
            Conceal += Conceal_Bonus(player.fighter.head)
            Conceal += Conceal_Bonus(player.fighter.neck)
            Conceal += Conceal_Bonus(player.fighter.shoulders)
            Conceal += Conceal_Bonus(player.fighter.chest)
            Conceal += Conceal_Bonus(player.fighter.belt)
            Conceal += Conceal_Bonus(player.fighter.gloves)
            Conceal += Conceal_Bonus(player.fighter.bracers)
            Conceal += Conceal_Bonus(player.fighter.legs)
            Conceal += Conceal_Bonus(player.fighter.boots)
            Conceal += Conceal_Bonus(player.fighter.ring1)
            Conceal += Conceal_Bonus(player.fighter.ring2)
            Conceal += Conceal_Bonus(player.fighter.trinket1)
            Conceal += Conceal_Bonus(player.fighter.trinket2)
            

            

      
            

            libtcod.console_print(window, 3,19,"%c%c%c%cWeight:%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

            libtcod.console_print(window, 65,51,"%c%c%c%cSpirit Resistance:%c"%(libtcod.COLCTRL_FORE_RGB,10,100,1,libtcod.COLCTRL_STOP))
            libtcod.console_print_rect_ex(window, 83, 51, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(player.fighter.spirit_res) + '%')

            libtcod.console_set_default_foreground(0, libtcod.orange)


            libtcod.console_print_rect_ex(0, 113, 3, width/2-5, 1 , libtcod.white, libtcod.LEFT, '#### Stats ####')

            libtcod.console_set_default_foreground(0, libtcod.white)

            
            libtcod.console_print_rect_ex(0, 113, 5, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Block Bonus: ' + str(player.fighter.Block_Bonus))

            libtcod.console_print_rect_ex(0, 113, 7, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Armor: ' + str(player.fighter.defense))

            libtcod.console_set_default_foreground(0, libtcod.light_green)

            libtcod.console_print_rect_ex(0, 113, 19, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Life Leech: ')

            libtcod.console_set_default_foreground(0, libtcod.white)

            libtcod.console_print_rect_ex(0, 125, 19, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(player.fighter.Life_leech))

            

            

            if len(player.fighter.Left) > 0 or len(player.fighter.Right) > 0:
                armor_pen1 = 0
                armor_pen2 = 0
                try:
                    armor_pen1 = player.fighter.Left[0].armor_pen
                except:
                    armor_pen1 = 0
                try:
                    armor_pen2 = player.fighter.Left[0].armor_pen
                except:
                    armor_pen2 = 0

                armor_pen = armor_pen1 + armor_pen2

            elif len(player.fighter.Both) > 0:
                armor_pen1 = 0

                try:
                    armor_pen1 = player.fighter.Both[0].armor_pen
                except:
                    armor_pen = 0

                armor_pen = armor_pen1

            
            try:
                
                libtcod.console_print_rect_ex(0, 113, 9, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Armor Penetration: ')
                
                
                libtcod.console_print_rect_ex(0, 132, 9, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(armor_pen))
            except:
                
                libtcod.console_print_rect_ex(0, 113, 9, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Armor Penetration: ')
                
                
                libtcod.console_print_rect_ex(0, 132, 9, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(0))

            
            if len(player.fighter.Left) > 0 or len(player.fighter.Right) > 0:
                fire1 = None
                fire2 = None
                try:
                    fire1 = player.fighter.Left[0].fire
                except:
                    pass
                try:
                    fire2 = player.fighter.Left[0].fire
                except:
                    pass

                if fire1 != None and fire2 != None:
                    fire = fire1 + fire2

                elif fire1 == None and fire2 != None:
                    fire = fire2

                elif fire1 != None and fire2 == None:
                    fire = fire1

                else:
                    fire = 0

            elif len(player.fighter.Both) > 0:
                fire1 = None

                try:
                    fire1 = player.fighter.Both[0].fire
                except:
                    fire = 0

                if fire1 == None:
                    fire = 0
                else:
                    fire = fire1

            
            try:
                libtcod.console_set_default_foreground(0, libtcod.red)
                libtcod.console_print_rect_ex(0, 113, 11, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Fire Damage: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 126, 11, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(fire))
            except:
                libtcod.console_set_default_foreground(0, libtcod.red)
                libtcod.console_print_rect_ex(0, 113, 11, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Fire Damage: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 126, 11, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(0))

            if len(player.fighter.Left) > 0 or len(player.fighter.Right) > 0:
                cold1 = None
                cold2 = None
                try:
                    cold1 = player.fighter.Left[0].cold
                except:
                    pass
                try:
                    cold2 = player.fighter.Left[0].cold
                except:
                    pass

                if cold1 != None and cold2 != None:
                    cold = cold1 + cold2

                elif cold1 == None and cold2 != None:
                    cold = cold2

                elif cold1 != None and cold2 == None:
                    cold = cold1

                else:
                    cold = 0

            elif len(player.fighter.Both) > 0:
                cold1 = None

                try:
                    cold1 = player.fighter.Both[0].cold
                except:
                    cold = 0

                if cold1 == None:
                    cold = 0
                else:
                    cold = cold1

            
            try:
                libtcod.console_set_default_foreground(0, libtcod.light_blue)
                libtcod.console_print_rect_ex(0, 113, 13, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Cold Damage: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 126, 13, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(cold))
            except:
                libtcod.console_set_default_foreground(0, libtcod.light_blue)
                libtcod.console_print_rect_ex(0, 113, 13, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Cold Damage: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 126, 13, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(0))

            if len(player.fighter.Left) > 0 or len(player.fighter.Right) > 0:
                spirit1 = None
                spirit2 = None
                try:
                    spirit1 = player.fighter.Left[0].spirit
                except:
                    pass
                try:
                    spirit2 = player.fighter.Left[0].spirit
                except:
                    pass

                if spirit1 != None and spirit2 != None:
                    spirit = spirit1 + spirit2

                elif spirit1 == None and spirit2 != None:
                    spirit = spirit2

                elif spirit1 != None and spirit2 == None:
                    spirit = spirit1

                else:
                    spirit = 0

            elif len(player.fighter.Both) > 0:
                spirit1 = None

                try:
                    spirit1 = player.fighter.Both[0].spirit
                except:
                    spirit = 0

                if spirit1 == None:
                    spirit = 0
                else:
                    spirit = spirit1

            
            try:
                libtcod.console_set_default_foreground(0, libtcod.dark_yellow)
                libtcod.console_print_rect_ex(0, 113, 15, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Spirit Damage: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 128, 15, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(spirit))
            except:
                libtcod.console_set_default_foreground(0, libtcod.dark_yellow)
                libtcod.console_print_rect_ex(0, 113, 15, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Spirit Damage: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 128, 15, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(0))

            libtcod.console_set_default_foreground(0, libtcod.purple)
            libtcod.console_print_rect_ex(0, 113, 21, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Xp bonus: ')
            
            
            libtcod.console_set_default_foreground(0, libtcod.white)

            libtcod.console_print_rect_ex(0, 123, 21, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(xp_bonus))

            
            if len(player.fighter.Left) > 0 or len(player.fighter.Right) > 0:
                Lightning1 = None
                Lightning2 = None
                try:
                    Lightning1 = player.fighter.Left[0].lightning
                except:
                    pass
                try:
                    Lightning2 = player.fighter.Left[0].lightning
                except:
                    pass

                if Lightning1 != None and Lightning2 != None:
                    Lightning = Lightning1 + Lightning2

                elif Lightning1 == None and Lightning2 != None:
                    Lightning = Lightning2

                elif Lightning1 != None and Lightning2 == None:
                    Lightning = Lightning1

                else:
                    Lightning = 0

            elif len(player.fighter.Both) > 0:
                Lightning1 = None

                try:
                    Lightning1 = player.fighter.Both[0].lightning
                except:
                    Lightning = 0

                if Lightning1 == None:
                    Lightning = 0
                else:
                    Lightning = Lightning1

            
            try:
                libtcod.console_set_default_foreground(0, libtcod.yellow)
                libtcod.console_print_rect_ex(0, 113, 17, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Lightning Damage: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 131, 17, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(Lightning))
            except:
                libtcod.console_set_default_foreground(0, libtcod.yellow)
                libtcod.console_print_rect_ex(0, 113, 17, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Lightning Damage: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 131, 17, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(0))

            try:
                libtcod.console_set_default_foreground(0, libtcod.yellow)
                libtcod.console_print_rect_ex(0, 113, 19, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Concealment: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 113 + (len('Concealment: ')), 19, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(Conceal))
            except:
                libtcod.console_set_default_foreground(0, libtcod.grey)
                libtcod.console_print_rect_ex(0, 113, 19, width/2-5, 1 , libtcod.white, libtcod.LEFT, 'Concealment: ')
                
                libtcod.console_set_default_foreground(0, libtcod.white)
                libtcod.console_print_rect_ex(0, 113 + (len('Concealment: ')), 19, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(0))

            libtcod.console_print(window, 65,57,"%c%c%c%cLightning Resistance:%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_STOP))
            libtcod.console_print_rect_ex(window, 86, 57, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(player.fighter.lightning_res) + '%')

            libtcod.console_print(window, 65,55,"%c%c%c%cCold Resistance:%c"%(libtcod.COLCTRL_FORE_RGB,1,50,100,libtcod.COLCTRL_STOP))
            libtcod.console_print_rect_ex(window, 81, 55, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(player.fighter.cold_res) + '%')

            libtcod.console_print(window, 65,53,"%c%c%c%cFire Resistance:%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_STOP))
            libtcod.console_print_rect_ex(window, 81, 53, width/2-5, 1 , libtcod.white, libtcod.LEFT, str(player.fighter.fire_res) + '%')

            libtcod.console_print(window, 75,60,"%c%c%c%cPress Enter to Exit%c"%(libtcod.COLCTRL_FORE_RGB,255,255,1,libtcod.COLCTRL_STOP))

            

            

            libtcod.console_print(window, 3,22,"%c%c%c%c##################### BACKGROUND ####################%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

            libtcod.console_print(window, 29,58,"%c%c%c%c# PAGE:%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

            
            e = 0
         
            if len(Dungeon.journal) >= 0:
                
                page = 1
                
                read_pages = int(read_pages)
       
                for i in range(0,(((len(Dungeon.journal))/53)+1) + read_pages):

                    
                    
                    
                    if e == 32:

                        for q in range(53):
                            for w in range(32):
                                libtcod.console_print(window, 3+q,23+w,' ')
                      
                        page += 1
                        
                        
                                                  
                        e = 0                 
                    libtcod.console_print(window, 3,24+e-1,str(Dungeon.journal[(53*i):(53*i)+53])+ '[')
                    libtcod.console_print(window, 56,24+e-1,' ')     
                    if e <= 31:                        
                                                
                        e += 1

                    

                    first_division = float(len(Dungeon.journal))/float(1696)

                    double_check = len(Dungeon.journal)/1696

                    if first_division > double_check:
                        max_page = double_check + 1

                    elif first_division <= double_check:
                        max_page = double_check

                    if glory3 == True:
                        if read_pages < len(Dungeon.journal) and len(Dungeon.journal) - read_pages > 0:

                            thing = float(len(Dungeon.journal))/float(1696)

                            
                            correction = 1

                            thing = str(thing)
                            
                            minus = thing[0]

                            count = int(minus) * 1696

                            length = len(Dungeon.journal) - count

                            if length == 0:
                                sentances = 1696/53
                            else:
                                sentances = float(length)/float(53)

                                str_sentances = str(sentances)

                                minus2 = str_sentances[0]

                                sentances_second = sentances - int(minus2)

                                if sentances_second < 0.5:
                                    factor = 1
                                else:
                                    factor = 0

                                sentances = int(sentances) + factor

                        Dungeon.poop = 0
                        second_factor = 0
                        if factorofdoom == max_page - 1:
                            
                            read_pages += sentances + 1
                        else:
                            read_pages += 32
                            
                        glory3 = False
                        glory2 = False
                    if glory2 == True:
                       
                        if read_pages < len(Dungeon.journal) and len(Dungeon.journal) - read_pages > 0:

                            thing = float(len(Dungeon.journal))/float(1696)

                            
                            correction = 1

                            thing = str(thing)
                            
                            minus = thing[0]

                            count = int(minus) * 1696

                            length = len(Dungeon.journal) - count

                            if length == 0:
                                sentances = 1696/53
                            else:
                                sentances = float(length)/float(53)

                                str_sentances = str(sentances)

                                minus2 = str_sentances[0]

                                sentances_second = sentances - int(minus2)

                                if sentances_second < 0.5:
                                    factor = 1
                                else:
                                    factor = 0

                                sentances = int(sentances) + factor

                                second_factor = Dungeon.poop 
                    
                                read_pages = -(sentances + 1 + second_factor)

                                Dungeon.poop += 32

                            glory2 = False
                           
##                            read_pages -= remainder

                    if page > 1 and page < max_page:
                        factorofdoom = page
                        
                        libtcod.console_print(window, 37,58, '<== ' + str(page) + ' ==>')
                    elif page > 1 and page == max_page:
                        factorofdoom = page
                        
                        libtcod.console_print(window, 37,58, '<== ' + str(page) + '    ')
                    elif page == 1 and page < max_page:
                        factorofdoom = page
                        
                        libtcod.console_print(window, 37,58,'    ' + str(page) + ' =>')
                    elif page == 1 and max_page == 1 or max_page == 0:
                        factorofdoom = page
                        
                        libtcod.console_print(window, 37,58, '<> ' + str(page) + ' <>')
                    if glory == True:
                        libtcod.console_print(window, 37,60, 'Writing: ')
                        libtcod.console_print(window, 47,60,"%c%c%c%cOn %c"%(libtcod.COLCTRL_FORE_RGB,1,200,1,libtcod.COLCTRL_STOP))
                    else:
                        libtcod.console_print(window, 37,60, 'Writing: ')
                        libtcod.console_print(window, 47,60,"%c%c%c%cOff%c"%(libtcod.COLCTRL_FORE_RGB,200,1,1,libtcod.COLCTRL_STOP))

        if page == 0 and Crafting == False and random == False and skills == False and alchemy == False:
            #
            

            #Unarmed Mastery

            libtcod.console_print_rect_ex(window, 75, 55, 15, 1, libtcod.white, libtcod.LEFT, 'Next page: x')
            libtcod.console_print_rect_ex(window, 75, 57, 15, 1, libtcod.white, libtcod.LEFT, 'Prev page: z')
            libtcod.console_print_rect_ex(window, 25, 60, 60, 1, libtcod.white, libtcod.LEFT, 'Press ? for more info about each Talent on this page.')
            libtcod.console_print_rect_ex(window, 25, 62, 60, 1, libtcod.white, libtcod.LEFT, 'Press ENTER to Start/Return to the Game.')
            libtcod.console_print_rect_ex(window, 50, 10, 30, 1, libtcod.white, libtcod.LEFT, 'Available Talent Points:' + str(player.fighter.Talent_Points))

            
            libtcod.console_print_rect_ex(window, 10, 10, 40, 1, libtcod.white, libtcod.LEFT, 'Choose your Traits: Unarmed')
            libtcod.console_print_rect_ex(window, 10, 25, 17, 1, libtcod.white, libtcod.LEFT, 'a)Steel Fist')
            if 'Unarmed Talent 1' in player.fighter.event: #Done for Slash, do for all Dual-wield skills #a
                if 'Steel Fist' not in player.fighter.unarmed1:
                    player.fighter.unarmed1.append('Steel Fist')
                    
                
                libtcod.console_print_rect_ex(window, 9, 25, 17, 1, libtcod.green, libtcod.LEFT, '#')
            
            
            libtcod.console_print_rect_ex(window, 24, 25, 2, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 24, 24, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 24, 26, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 25, 23, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 25, 27, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 26, 27, 55, 1, libtcod.white, libtcod.LEFT, 'd)Kidney Shot -> h)Forceful Blows -> m)Divine Strength') #Lower

            if 'Unarmed Talent 11' in player.fighter.event: #Not Done #m
                libtcod.console_print_rect_ex(window, 54, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                thing = "Divine Strength" #Scoring a Critical Strike allows you to strike Faster.

                if thing not in player.fighter.unarmed2 and len(player.fighter.unarmed2) <= 2:
                    player.fighter.unarmed2.append(thing)
                elif thing not in player.fighter.unarmed2 and len(player.fighter.unarmed2) >= 3:
                    if len(player.fighter.unarmed3) <= 2 and thing not in player.fighter.unarmed3:
                        player.fighter.unarmed3.append(thing)
                    elif len(player.fighter.unarmed3) >= 3 and thing not in player.fighter.unarmed3:
                        player.fighter.unarmed4.append(thing)

            if 'Unarmed Talent 7' in player.fighter.event: #Done #d

                #If you critically strike a target, it is stunned for 1 round
                rds = 'Kidney Shot'
                libtcod.console_print_rect_ex(window, 24, 26, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 25, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 26, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if rds not in player.fighter.unarmed1 and len(player.fighter.unarmed1) <= 2:
                    player.fighter.unarmed1.append(rds)
                elif rds not in player.fighter.unarmed1 and rds not in player.fighter.unarmed2 and len(player.fighter.unarmed2) <= 2:
                    player.fighter.unarmed2.append(rds)

                elif rds not in player.fighter.unarmed1 and rds not in player.fighter.unarmed2 and rds not in player.fighter.unarmed3 and len(player.fighter.unarmed1) <= 2:
                    player.fighter.unarmed3.append(rds)

            if 'Unarmed Talent 9' in player.fighter.event: #Not Done #h

                #If an enemy is on 10% HP or less, you automatically kill it
                Su = 'Forceful Blows'
                libtcod.console_print_rect_ex(window, 41, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if Su not in player.fighter.unarmed1 and len(player.fighter.unarmed1) <= 2:
                    player.fighter.unarmed1.append(Su)
                elif Su not in player.fighter.unarmed1 and len(player.fighter.unarmed1) >= 3:
                    if len(player.fighter.unarmed2) <= 2 and Su not in player.fighter.unarmed2:
                        player.fighter.unarmed2.append(Su)
                    elif len(player.fighter.unarmed3) >= 3 and Su not in player.fighter.unarmed3:
                        player.fighter.unarmed3.append(Su)

           

            

            libtcod.console_print_rect_ex(window, 46, 28, 1, 2, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 46, 29, 1, 2, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 42, 30, 20, 1, libtcod.white, libtcod.LEFT, 'i) Wolf Stance')

            if 'Unarmed Talent 10' in player.fighter.event: #Not Done #h
                ex = 'Wolf Stance'
                #The bonus of Culling is increased to 15%
                libtcod.console_print_rect_ex(window, 41, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                

                if ex not in player.fighter.unarmed2 and len(player.fighter.unarmed2) <= 2:
                    player.fighter.unarmed2.append(ex)
                elif ex not in player.fighter.unarmed2 and len(player.fighter.unarmed2) >= 3:
                    if len(player.fighter.unarmed3) <= 2 and ex not in player.fighter.unarmed3:
                        player.fighter.unarmed3.append(ex)
                    elif len(player.fighter.unarmed3) >= 3 and ex not in player.fighter.unarmed3:
                        player.fighter.unarmed4.append(ex)

            

            libtcod.console_print_rect_ex(window, 31, 28, 15, 1, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 31, 29, 15, 1, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 27, 30, 15, 1, libtcod.white, libtcod.LEFT, 'e)Bear Stance')

            if 'Unarmed Talent 8' in player.fighter.event: #Not Done #m
                #If an enemy is critcally struck, you regain stamina.
                libtcod.console_print_rect_ex(window, 26, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                SW = 'Bear Stance'

                if SW not in player.fighter.unarmed1 and len(player.fighter.unarmed1) <= 2:
                    player.fighter.unarmed1.append(SW)
                elif SW not in player.fighter.unarmed1 and len(player.fighter.unarmed1) >= 3:
                    if len(player.fighter.unarmed2) <= 2 and SW not in player.fighter.unarmed2:
                        player.fighter.unarmed2.append(SW)
                    elif len(player.fighter.unarmed3) >= 3 and SW not in player.fighter.unarmed3:
                        player.fighter.unarmed3.append(SW)

            

            libtcod.console_print_rect_ex(window, 26, 23, 70, 1, libtcod.white, libtcod.LEFT, "c)Hard Skin -> g)Ox Stance -> k)Divine Strike") #Upper section

            if 'Unarmed Talent 6' in player.fighter.event: #Not Done #k
                #Unlocks a secondary effect for DW intended effects
                libtcod.console_print_rect_ex(window, 55, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 56, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                dw = 'Divine Strike'

                if dw not in player.fighter.unarmed2 and len(player.fighter.unarmed2) <= 2:
                    player.fighter.unarmed2.append(dw)
                elif dw not in player.fighter.unarmed2 and len(player.fighter.unarmed2) >= 3:
                    if len(player.fighter.unarmed3) <= 2 and dw not in player.fighter.unarmed3:
                        player.fighter.unarmed3.append(dw)
                    elif len(player.fighter.unarmed3) >= 3 and dw not in player.fighter.unarmed3:
                        player.fighter.unarmed4.append(dw)

            if 'Unarmed Talent 4' in player.fighter.event: #Not Done #g
                stam = 'Ox Stance' #Increases Stamina Regen
                libtcod.console_print_rect_ex(window, 39, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")

                libtcod.console_print_rect_ex(window, 40, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 41, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if stam not in player.fighter.unarmed1 and len(player.fighter.unarmed1) <= 2:
                    player.fighter.unarmed1.append(stam)
                elif stam not in player.fighter.unarmed1 and len(player.fighter.unarmed2) <= 2:
                    if stam not in player.fighter.unarmed2 and len(player.fighter.unarmed2) <= 2:
                        player.fighter.unarmed2.append(stam)
                    elif stam not in player.fighter.unarmed3 and len(player.fighter.unarmed3) <= 2 and stam not in player.fighter.unarmed2:
                        player.fighter.unarmed3.append(stam)

            

            libtcod.console_print_rect_ex(window, 31, 22, 15, 1, libtcod.white, libtcod.LEFT, 'I')
            libtcod.console_print_rect_ex(window, 31, 21, 15, 1, libtcod.white, libtcod.LEFT, '^')

            libtcod.console_print_rect_ex(window, 27, 20, 20, 1, libtcod.white, libtcod.LEFT, "b)Absorb Pain")

            if 'Unarmed Talent 3' in player.fighter.event: #Not Done #b
                #The lower your HP is, the more damage you do
                libtcod.console_print_rect_ex(window, 31, 22, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 31, 21, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if 'Absorb Pain' not in player.fighter.unarmed1 and len(player.fighter.unarmed1) <= 2:
                    player.fighter.unarmed1.append('Absorb Pain')
                elif 'Absorb Pain' not in player.fighter.unarmed1 and len(player.fighter.unarmed2) <= 2:
                    if 'Absorb Pain' not in player.fighter.unarmed2 and len(player.fighter.unarmed2) <= 2:
                        player.fighter.unarmed2.append('Absorb Pain')
                    elif 'Absorb Pain' not in player.fighter.unarmed3 and len(player.fighter.unarmed3) <= 2 and 'Absorb Pain' not in player.fighter.unarmed2:
                        player.fighter.unarmed3.append('Absorb Pain')

            if 'Unarmed Talent 2' in player.fighter.event: #Not Done #c
                r = 'Hard Skin'
                #Every time you take damage, you have a chanse of gaining some Stamina
                libtcod.console_print_rect_ex(window, 25, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 24, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if r not in player.fighter.unarmed1 and len(player.fighter.unarmed1) <= 2:
                    player.fighter.unarmed1.append(r)
                elif r not in player.fighter.unarmed1 and len(player.fighter.unarmed2) <= 2:
                    if r not in player.fighter.unarmed2 and len(player.fighter.unarmed2) <= 2:
                        player.fighter.unarmed2.append(r)
                    elif r not in player.fighter.unarmed3 and len(player.fighter.unarmed3) <= 2 and r not in player.fighter.unarmed2:
                        player.fighter.unarmed3.append(r)

            
            
            libtcod.console_print_rect_ex(window, 36, 18, 20, 1, libtcod.white, libtcod.LEFT, "f)Imp. Ox Stance")

            if 'Unarmed Talent 5' in player.fighter.event:
                #You can pay with a fraction of your HP to cast spells, if you run out of Stamina
                ra = 'Imp. Ox Stance'
                libtcod.console_print_rect_ex(window, 35, 18, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if ra not in player.fighter.unarmed2 and len(player.fighter.unarmed2) <= 2:
                    player.fighter.unarmed2.append(ra)
                elif ra not in player.fighter.unarmed2 and len(player.fighter.unarmed2) >= 3:
                    if len(player.fighter.unarmed3) <= 2 and ra not in player.fighter.unarmed3:
                        player.fighter.unarmed3.append(ra)
                    elif len(player.fighter.unarmed3) >= 3 and ra not in player.fighter.unarmed3:
                        player.fighter.unarmed4.append(ra)
            

            libtcod.console_print_rect_ex(window, 44, 19, 1, 1, libtcod.white, libtcod.LEFT, "^")

            libtcod.console_print_rect_ex(window, 44, 21, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 44, 20, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 44, 22, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_ex(0, 105, 9, libtcod.BKGND_NONE, libtcod.LEFT, "Talents taken in Unarmed: ")

            libtcod.console_print_ex(0, 93, 11, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.unarmed1))
            
            if len(player.fighter.unarmed2) >= 1:
                libtcod.console_print_ex(0, 93, 13, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.unarmed2))

           

            if len(player.fighter.unarmed3) >= 1:
                
                libtcod.console_print_ex(0, 93, 15, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.unarmed3))

            if len(player.fighter.unarmed4) >= 1:
                libtcod.console_print_ex(0, 93, 17, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.unarmed4))
                

        elif page == 1 and Crafting == False and random == False:
            

            #Elements
            #This page should cover a variety of different Elemental affixes, resistances and interactions with elemental damage overall

            libtcod.console_print_rect_ex(window, 75, 55, 15, 1, libtcod.white, libtcod.LEFT, 'Next page: x')
            libtcod.console_print_rect_ex(window, 75, 57, 15, 1, libtcod.white, libtcod.LEFT, 'Prev page: z')
            libtcod.console_print_rect_ex(window, 25, 60, 60, 1, libtcod.white, libtcod.LEFT, 'Press ? for more info about each Talent on this page.')
            libtcod.console_print_rect_ex(window, 25, 62, 60, 1, libtcod.white, libtcod.LEFT, 'Press ENTER to Start/Return to the Game.')
            libtcod.console_print_rect_ex(window, 50, 10, 30, 1, libtcod.white, libtcod.LEFT, 'Available Talent Points:' + str(player.fighter.Talent_Points))

            
            libtcod.console_print_rect_ex(window, 10, 10, 40, 1, libtcod.white, libtcod.LEFT, 'Choose your Traits: Elements')
            libtcod.console_print_rect_ex(window, 10, 25, 17, 1, libtcod.white, libtcod.LEFT, 'a)Imbue Weapons')
            if 'Ele Talent 1' in player.fighter.event: #Done for Slash, do for all Dual-wield skills #a
                if 'Imbue Weapons' not in player.fighter.elements1:
                    player.fighter.elements1.append('Imbue Weapons')
                
                libtcod.console_print_rect_ex(window, 9, 25, 17, 1, libtcod.green, libtcod.LEFT, '#')
            
            
            libtcod.console_print_rect_ex(window, 24, 25, 2, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 24, 24, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 24, 26, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 25, 23, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 25, 27, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 26, 27, 55, 1, libtcod.white, libtcod.LEFT, 'd)Flaming Armor -> h)Fiery Soul -> m)Inferno') #Lower

            if 'Ele Talent 11' in player.fighter.event: #Not Done #m
                libtcod.console_print_rect_ex(window, 54, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                thing = "Inferno" #When an enemy that is burning attacks you, you are healed for a portion of that damage

                if thing not in player.fighter.elements2 and len(player.fighter.elements2) <= 2:
                    player.fighter.elements2.append(thing)
                elif thing not in player.fighter.elements2 and len(player.fighter.elements2) >= 3:
                    if len(player.fighter.elements3) <= 2 and thing not in player.fighter.elements3:
                        player.fighter.elements3.append(thing)
                    elif len(player.fighter.elements3) >= 3 and thing not in player.fighter.elements3:
                        player.fighter.elements4.append(thing)

            if 'Ele Talent 7' in player.fighter.event: #Done #d

                #Things that strike you, have a chanse of being ignited.
                rds = 'Flaming Armor'
                libtcod.console_print_rect_ex(window, 24, 26, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 25, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 26, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if rds not in player.fighter.elements1 and len(player.fighter.elements1) <= 2:
                    player.fighter.elements1.append(rds)
                elif rds not in player.fighter.elements1 and rds not in player.fighter.elements2 and len(player.fighter.elements2) <= 2:
                    player.fighter.elements2.append(rds)

                elif rds not in player.fighter.elements1 and rds not in player.fighter.elements2 and rds not in player.fighter.elements3 and len(player.fighter.elements1) <= 2:
                    player.fighter.elements3.append(rds)

            if 'Ele Talent 9' in player.fighter.event: #Not Done #h

                #Ignite Durations are increased
                Su = 'Fiery Soul'
                libtcod.console_print_rect_ex(window, 41, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if Su not in player.fighter.elements1 and len(player.fighter.elements1) <= 2:
                    player.fighter.elements1.append(Su)
                elif Su not in player.fighter.elements1 and len(player.fighter.elements1) >= 3:
                    if len(player.fighter.elements2) <= 2 and Su not in player.fighter.elements2:
                        player.fighter.elements2.append(Su)
                    elif len(player.fighter.elements3) >= 3 and Su not in player.fighter.elements3:
                        player.fighter.elements3.append(Su)

           

            

            libtcod.console_print_rect_ex(window, 46, 28, 1, 2, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 46, 29, 1, 2, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 42, 30, 20, 1, libtcod.white, libtcod.LEFT, 'i)Flamewreath')

            if 'Ele Talent 10' in player.fighter.event: #Not Done #h
                ex = 'Flamewreath'
                #Enemies have a chanse of taking lightning damage when burnt by fire
                libtcod.console_print_rect_ex(window, 41, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                

                if ex not in player.fighter.elements2 and len(player.fighter.elements2) <= 2:
                    player.fighter.elements2.append(ex)
                elif ex not in player.fighter.elements2 and len(player.fighter.elements2) >= 3:
                    if len(player.fighter.elements3) <= 2 and ex not in player.fighter.elements3:
                        player.fighter.elements3.append(ex)
                    elif len(player.fighter.elements3) >= 3 and ex not in player.fighter.elements3:
                        player.fighter.elements4.append(ex)

            

            libtcod.console_print_rect_ex(window, 31, 28, 15, 1, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 31, 29, 15, 1, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 27, 30, 15, 1, libtcod.white, libtcod.LEFT, 'e)Frostfire')

            if 'Ele Talent 8' in player.fighter.event: #Not Done #m
                #Enemies that are burning, are slower
                libtcod.console_print_rect_ex(window, 26, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                SW = 'Frostfire'

                if SW not in player.fighter.elements1 and len(player.fighter.elements1) <= 2:
                    player.fighter.elements1.append(SW)
                elif SW not in player.fighter.elements1 and len(player.fighter.elements1) >= 3:
                    if len(player.fighter.elements2) <= 2 and SW not in player.fighter.elements2:
                        player.fighter.elements2.append(SW)
                    elif len(player.fighter.elements3) >= 3 and SW not in player.fighter.elements3:
                        player.fighter.elements3.append(SW)

            

            libtcod.console_print_rect_ex(window, 26, 23, 70, 1, libtcod.white, libtcod.LEFT, "c)Energize -> g)Harness -> k)Unleash") #Upper section

            if 'Ele Talent 6' in player.fighter.event: #Not Done #k
                #Store charges upon performing critical strikes.
                #Can release charges for different levels of attacks, based on charges and weapon
                libtcod.console_print_rect_ex(window, 55, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 56, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                dw = 'Unleash'

                if dw not in player.fighter.elements2 and len(player.fighter.elements2) <= 2:
                    player.fighter.elements2.append(dw)
                elif dw not in player.fighter.elements2 and len(player.fighter.elements2) >= 3:
                    if len(player.fighter.elements3) <= 2 and dw not in player.fighter.elements3:
                        player.fighter.elements3.append(dw)
                    elif len(player.fighter.elements3) >= 3 and dw not in player.fighter.elements3:
                        player.fighter.elements4.append(dw)

            if 'Ele Talent 4' in player.fighter.event: #Not Done #g
                stam = 'Harness' #Critical strike scales with Strength and you re-gain health on Critical Strikes
                libtcod.console_print_rect_ex(window, 39, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")

                libtcod.console_print_rect_ex(window, 40, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 41, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if stam not in player.fighter.elements1 and len(player.fighter.elements1) <= 2:
                    player.fighter.elements1.append(stam)
                elif stam not in player.fighter.elements1 and len(player.fighter.elements2) <= 2:
                    if stam not in player.fighter.elements2 and len(player.fighter.elements2) <= 2:
                        player.fighter.elements2.append(stam)
                    elif stam not in player.fighter.elements3 and len(player.fighter.elements3) <= 2 and stam not in player.fighter.elements2:
                        player.fighter.elements3.append(stam)

            

            libtcod.console_print_rect_ex(window, 31, 22, 15, 1, libtcod.white, libtcod.LEFT, 'I')
            libtcod.console_print_rect_ex(window, 31, 21, 15, 1, libtcod.white, libtcod.LEFT, '^')

            libtcod.console_print_rect_ex(window, 27, 20, 20, 1, libtcod.white, libtcod.LEFT, "b)Unstable")

            if 'Ele Talent 3' in player.fighter.event: #Not Done #b
                #You gain more charges and a increased critical strike chanse
                libtcod.console_print_rect_ex(window, 31, 22, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 31, 21, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if 'Unstable' not in player.fighter.elements1 and len(player.fighter.elements1) <= 2:
                    player.fighter.elements1.append('Unstable')
                elif 'Unstable' not in player.fighter.elements1 and len(player.fighter.elements2) <= 2:
                    if 'Unstable' not in player.fighter.elements2 and len(player.fighter.elements2) <= 2:
                        player.fighter.elements2.append('Unstable')
                    elif 'Unstable' not in player.fighter.elements3 and len(player.fighter.elements3) <= 2 and 'Unstable' not in player.fighter.elements2:
                        player.fighter.elements3.append('Unstable')

            if 'Ele Talent 2' in player.fighter.event: #Not Done #c
                r = 'Energize'
                #The higher hp you are, the higher your defense is
                libtcod.console_print_rect_ex(window, 25, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 24, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if r not in player.fighter.elements1 and len(player.fighter.elements1) <= 2:
                    player.fighter.elements1.append(r)
                elif r not in player.fighter.elements1 and len(player.fighter.elements2) <= 2:
                    if r not in player.fighter.elements2 and len(player.fighter.elements2) <= 2:
                        player.fighter.elements2.append(r)
                    elif r not in player.fighter.elements3 and len(player.fighter.elements3) <= 2 and r not in player.fighter.elements2:
                        player.fighter.elements3.append(r)

            
            
            libtcod.console_print_rect_ex(window, 36, 18, 20, 1, libtcod.white, libtcod.LEFT, "f)Pure Energy")

            if 'Ele Talent 5' in player.fighter.event:
                #When elemental attacks strike you, you absorb the energies and gain a buff.
                #The more damage, the greater the buff.
                ra = 'Pure Energy'
                libtcod.console_print_rect_ex(window, 35, 18, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if ra not in player.fighter.elements2 and len(player.fighter.elements2) <= 2:
                    player.fighter.elements2.append(ra)
                elif ra not in player.fighter.elements2 and len(player.fighter.elements2) >= 3:
                    if len(player.fighter.elements3) <= 2 and ra not in player.fighter.elements3:
                        player.fighter.elements3.append(ra)
                    elif len(player.fighter.elements3) >= 3 and ra not in player.fighter.elements3:
                        player.fighter.elements4.append(ra)
            

            libtcod.console_print_rect_ex(window, 44, 19, 1, 1, libtcod.white, libtcod.LEFT, "^")

            libtcod.console_print_rect_ex(window, 44, 21, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 44, 20, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 44, 22, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_ex(0, 105, 9, libtcod.BKGND_NONE, libtcod.LEFT, "Talents taken in Elements: ")

            libtcod.console_print_ex(0, 93, 11, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.elements1))
            
            if len(player.fighter.elements2) >= 1:
                libtcod.console_print_ex(0, 93, 13, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.elements2))

           

            if len(player.fighter.elements3) >= 1:
                
                libtcod.console_print_ex(0, 93, 15, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.elements3))

            if len(player.fighter.elements4) >= 1:
                libtcod.console_print_ex(0, 93, 17, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.elements4))

            
                

        elif page == 2 and Crafting == False and random == False:
            #player.fighter.2h1
            

            #Two-hander page

            libtcod.console_print_rect_ex(window, 75, 55, 15, 1, libtcod.white, libtcod.LEFT, 'Next page: x')
            libtcod.console_print_rect_ex(window, 75, 57, 15, 1, libtcod.white, libtcod.LEFT, 'Prev page: z')
            libtcod.console_print_rect_ex(window, 25, 60, 60, 1, libtcod.white, libtcod.LEFT, 'Press ? for more info about each Talent on this page.')
            libtcod.console_print_rect_ex(window, 25, 62, 60, 1, libtcod.white, libtcod.LEFT, 'Press ENTER to Start/Return to the Game.')
            libtcod.console_print_rect_ex(window, 50, 10, 30, 1, libtcod.white, libtcod.LEFT, 'Available Talent Points:' + str(player.fighter.Talent_Points))

            
            libtcod.console_print_rect_ex(window, 10, 10, 40, 1, libtcod.white, libtcod.LEFT, 'Choose your Traits: Two-handed')
            libtcod.console_print_rect_ex(window, 10, 25, 17, 1, libtcod.white, libtcod.LEFT, 'a)Reduce Cost')
            if 'Twoh Talent 1' in player.fighter.event: #Done for Slash, do for all Dual-wield skills #a
                if 'Reduce Cost' not in player.fighter.twoh1:
                    player.fighter.twoh1.append('Reduce Cost')
                
                libtcod.console_print_rect_ex(window, 9, 25, 17, 1, libtcod.green, libtcod.LEFT, '#')
            
            
            libtcod.console_print_rect_ex(window, 24, 25, 2, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 24, 24, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 24, 26, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 25, 23, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 25, 27, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 26, 27, 55, 1, libtcod.white, libtcod.LEFT, 'd)Intimidating -> h)Expose Weakness -> m)Strike True') #Lower

            if 'Twoh Talent 11' in player.fighter.event: #Not Done #m
                libtcod.console_print_rect_ex(window, 54, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                thing = "Strike True" #You can never miss your attacks

                if thing not in player.fighter.twoh2 and len(player.fighter.twoh2) <= 2:
                    player.fighter.twoh2.append(thing)
                elif thing not in player.fighter.twoh2 and len(player.fighter.twoh2) >= 3:
                    if len(player.fighter.twoh3) <= 2 and thing not in player.fighter.twoh3:
                        player.fighter.twoh3.append(thing)
                    elif len(player.fighter.twoh3) >= 3 and thing not in player.fighter.twoh3:
                        player.fighter.twoh4.append(thing)

            if 'Twoh Talent 7' in player.fighter.event: #Done #d

                #Enemies around you hit you for less damage
                rds = 'Intimidating'
                libtcod.console_print_rect_ex(window, 24, 26, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 25, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 26, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if rds not in player.fighter.twoh1 and len(player.fighter.twoh1) <= 2:
                    player.fighter.twoh1.append(rds)
                elif rds not in player.fighter.twoh1 and rds not in player.fighter.twoh2 and len(player.fighter.twoh2) <= 2:
                    player.fighter.twoh2.append(rds)

                elif rds not in player.fighter.twoh1 and rds not in player.fighter.twoh2 and rds not in player.fighter.twoh3 and len(player.fighter.twoh1) <= 2:
                    player.fighter.twoh3.append(rds)

            if 'Twoh Talent 9' in player.fighter.event: #Not Done #h

                #you have a larger chanse for Critical Strikes
                Su = 'Expose Weakness'
                libtcod.console_print_rect_ex(window, 41, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if Su not in player.fighter.twoh1 and len(player.fighter.twoh1) <= 2:
                    player.fighter.twoh1.append(Su)
                elif Su not in player.fighter.twoh1 and len(player.fighter.twoh1) >= 3:
                    if len(player.fighter.twoh2) <= 2 and Su not in player.fighter.twoh2:
                        player.fighter.twoh2.append(Su)
                    elif len(player.fighter.twoh3) >= 3 and Su not in player.fighter.twoh3:
                        player.fighter.twoh3.append(Su)

           

            

            libtcod.console_print_rect_ex(window, 46, 28, 1, 2, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 46, 29, 1, 2, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 42, 30, 20, 1, libtcod.white, libtcod.LEFT, 'i)Outmanouver')

            if 'Twoh Talent 10' in player.fighter.event: #Not Done #h
                ex = 'Outmanouver'
                #You gain a passive chanse to dodge
                libtcod.console_print_rect_ex(window, 41, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                

                if ex not in player.fighter.twoh2 and len(player.fighter.twoh2) <= 2:
                    player.fighter.twoh2.append(ex)
                elif ex not in player.fighter.twoh2 and len(player.fighter.twoh2) >= 3:
                    if len(player.fighter.twoh3) <= 2 and ex not in player.fighter.twoh3:
                        player.fighter.twoh3.append(ex)
                    elif len(player.fighter.twoh3) >= 3 and ex not in player.fighter.twoh3:
                        player.fighter.twoh4.append(ex)

            

            libtcod.console_print_rect_ex(window, 31, 28, 15, 1, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 31, 29, 15, 1, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 27, 30, 15, 1, libtcod.white, libtcod.LEFT, 'e)Grace')

            if 'Twoh Talent 8' in player.fighter.event: #Not Done #m
                #Gain a bonus to Defense
                libtcod.console_print_rect_ex(window, 26, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                SW = 'Grace'

                if SW not in player.fighter.twoh1 and len(player.fighter.twoh1) <= 2:
                    player.fighter.twoh1.append(SW)
                elif SW not in player.fighter.twoh1 and len(player.fighter.twoh1) >= 3:
                    if len(player.fighter.twoh2) <= 2 and SW not in player.fighter.twoh2:
                        player.fighter.twoh2.append(SW)
                    elif len(player.fighter.twoh3) >= 3 and SW not in player.fighter.twoh3:
                        player.fighter.twoh3.append(SW)

            

            libtcod.console_print_rect_ex(window, 26, 23, 70, 1, libtcod.white, libtcod.LEFT, "c)Stomp -> g)Disengage -> k)Warcry") #Upper section

            if 'Twoh Talent 6' in player.fighter.event: #Not Done #k
                #Unlocks a secondary effect for DW intended effects
                libtcod.console_print_rect_ex(window, 55, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 56, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                dw = 'Warcry'

                if dw not in player.fighter.twoh2 and len(player.fighter.twoh2) <= 2:
                    player.fighter.twoh2.append(dw)
                elif dw not in player.fighter.twoh2 and len(player.fighter.twoh2) >= 3:
                    if len(player.fighter.twoh3) <= 2 and dw not in player.fighter.twoh3:
                        player.fighter.twoh3.append(dw)
                    elif len(player.fighter.twoh3) >= 3 and dw not in player.fighter.twoh3:
                        player.fighter.twoh4.append(dw)

            if 'Twoh Talent 4' in player.fighter.event: #Not Done #g
                stam = 'Disengage' #Allows you to jump short distances
                libtcod.console_print_rect_ex(window, 39, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")

                libtcod.console_print_rect_ex(window, 40, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 41, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if stam not in player.fighter.twoh1 and len(player.fighter.twoh1) <= 2:
                    player.fighter.twoh1.append(stam)
                elif stam not in player.fighter.twoh1 and len(player.fighter.twoh2) <= 2:
                    if stam not in player.fighter.twoh2 and len(player.fighter.twoh2) <= 2:
                        player.fighter.twoh2.append(stam)
                    elif stam not in player.fighter.twoh3 and len(player.fighter.twoh3) <= 2 and stam not in player.fighter.twoh2:
                        player.fighter.twoh3.append(stam)

            

            libtcod.console_print_rect_ex(window, 31, 22, 15, 1, libtcod.white, libtcod.LEFT, 'I')
            libtcod.console_print_rect_ex(window, 31, 21, 15, 1, libtcod.white, libtcod.LEFT, '^')

            libtcod.console_print_rect_ex(window, 27, 20, 20, 1, libtcod.white, libtcod.LEFT, "b)Shatter Bones")

            if 'Twoh Talent 3' in player.fighter.event: #Not Done #b
                #The lower your HP is, the more damage you do
                libtcod.console_print_rect_ex(window, 31, 22, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 31, 21, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if 'Shatter Bones' not in player.fighter.twoh1 and len(player.fighter.twoh1) <= 2:
                    player.fighter.twoh1.append('Shatter Bones')
                elif 'Shatter Bones' not in player.fighter.twoh1 and len(player.fighter.twoh2) <= 2:
                    if 'Shatter Bones' not in player.fighter.twoh2 and len(player.fighter.twoh2) <= 2:
                        player.fighter.twoh2.append('Shatter Bones')
                    elif 'Shatter Bones' not in player.fighter.twoh3 and len(player.fighter.twoh3) <= 2 and 'Shatter Bones' not in player.fighter.twoh2:
                        player.fighter.twoh3.append('Shatter Bones')

            if 'Twoh Talent 2' in player.fighter.event: #Not Done #c
                r = 'Stomp'
                #Replaces Stun with a AoE stun.
                libtcod.console_print_rect_ex(window, 25, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 24, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if r not in player.fighter.twoh1 and len(player.fighter.twoh1) <= 2:
                    player.fighter.twoh1.append(r)
                elif r not in player.fighter.twoh1 and len(player.fighter.twoh2) <= 2:
                    if r not in player.fighter.twoh2 and len(player.fighter.twoh2) <= 2:
                        player.fighter.twoh2.append(r)
                    elif r not in player.fighter.twoh3 and len(player.fighter.twoh3) <= 2 and r not in player.fighter.twoh2:
                        player.fighter.twoh3.append(r)

            
            
            libtcod.console_print_rect_ex(window, 39, 18, 20, 1, libtcod.white, libtcod.LEFT, "f)Charge")

            if 'Twoh Talent 5' in player.fighter.event:
                #You can pay with a fraction of your HP to cast spells, if you run out of Stamina
                ra = 'Charge'
                libtcod.console_print_rect_ex(window, 35, 18, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if ra not in player.fighter.twoh2 and len(player.fighter.twoh2) <= 2:
                    player.fighter.twoh2.append(ra)
                elif ra not in player.fighter.twoh2 and len(player.fighter.twoh2) >= 3:
                    if len(player.fighter.twoh3) <= 2 and ra not in player.fighter.twoh3:
                        player.fighter.twoh3.append(ra)
                    elif len(player.fighter.twoh3) >= 3 and ra not in player.fighter.twoh3:
                        player.fighter.twoh4.append(ra)
            

            libtcod.console_print_rect_ex(window, 44, 19, 1, 1, libtcod.white, libtcod.LEFT, "^")

            libtcod.console_print_rect_ex(window, 44, 21, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 44, 20, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 44, 22, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_ex(0, 105, 9, libtcod.BKGND_NONE, libtcod.LEFT, "Talents taken in 2h: ")

            libtcod.console_print_ex(0, 93, 11, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.twoh1))
            
            if len(player.fighter.twoh2) >= 1:
                libtcod.console_print_ex(0, 93, 13, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.twoh2))

           

            if len(player.fighter.twoh3) >= 1:
                
                libtcod.console_print_ex(0, 93, 15, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.twoh3))

            if len(player.fighter.twoh4) >= 1:
                libtcod.console_print_ex(0, 93, 17, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.twoh4))


            
        elif page == 3 and player.fighter.Class == 'Warrior' and Crafting == False and random == False:
            

            #Dual Wield Page

            libtcod.console_print_rect_ex(window, 75, 55, 15, 1, libtcod.white, libtcod.LEFT, 'Next page: x')
            libtcod.console_print_rect_ex(window, 75, 57, 15, 1, libtcod.white, libtcod.LEFT, 'Prev page: z')
            libtcod.console_print_rect_ex(window, 25, 60, 60, 1, libtcod.white, libtcod.LEFT, 'Press ? for more info about each Talent on this page.')
            libtcod.console_print_rect_ex(window, 25, 62, 60, 1, libtcod.white, libtcod.LEFT, 'Press ENTER to Start/Return to the Game.')
            libtcod.console_print_rect_ex(window, 50, 10, 30, 1, libtcod.white, libtcod.LEFT, 'Available Talent Points:' + str(player.fighter.Talent_Points))

            
            libtcod.console_print_rect_ex(window, 10, 10, 40, 1, libtcod.white, libtcod.LEFT, 'Choose your Traits: Dual-Wield')
            libtcod.console_print_rect_ex(window, 10, 25, 17, 1, libtcod.white, libtcod.LEFT, 'a)Reduce Cost')
            if 'Off Talent 1' in player.fighter.event: #Done for Slash, do for all Dual-wield skills #a
                if 'Reduce Cost' not in player.fighter.off1:
                    player.fighter.off1.append('Reduce Cost')
                
                libtcod.console_print_rect_ex(window, 9, 25, 17, 1, libtcod.green, libtcod.LEFT, '#')
            
            
            libtcod.console_print_rect_ex(window, 24, 25, 2, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 24, 24, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 24, 26, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 25, 23, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 25, 27, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 26, 27, 55, 1, libtcod.white, libtcod.LEFT, 'd)Aftershock -> h)Culling -> m)Frenzy') #Lower

            if 'Off Talent 11' in player.fighter.event: #Not Done #m
                libtcod.console_print_rect_ex(window, 54, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                thing = "Frenzy" #Scoring a Critical Strike allows you to strike Faster for Strength/3 turns

                if thing not in player.fighter.off2 and len(player.fighter.off2) <= 2:
                    player.fighter.off2.append(thing)
                elif thing not in player.fighter.off2 and len(player.fighter.off2) >= 3:
                    if len(player.fighter.off3) <= 2 and thing not in player.fighter.off3:
                        player.fighter.off3.append(thing)
                    elif len(player.fighter.off3) >= 3 and thing not in player.fighter.off3:
                        player.fighter.off4.append(thing)

            if 'Off Talent 7' in player.fighter.event: #not Done #d

                #If you critically strike a target, it is stunned for 1 round
                rds = 'Aftershock'
                libtcod.console_print_rect_ex(window, 24, 26, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 25, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 26, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if rds not in player.fighter.off1 and len(player.fighter.off1) <= 2:
                    player.fighter.off1.append(rds)
                elif rds not in player.fighter.off1 and rds not in player.fighter.off2 and len(player.fighter.off2) <= 2:
                    player.fighter.off2.append(rds)

                elif rds not in player.fighter.off1 and rds not in player.fighter.off2 and rds not in player.fighter.off3 and len(player.fighter.off1) <= 2:
                    player.fighter.off3.append(rds)

            if 'Off Talent 9' in player.fighter.event: #Not Done #h

                #If an enemy is on 10% HP or less, you automatically kill it - If an enemy is on 30% or less, you deal 20% more damage
                Su = 'Culling'
                libtcod.console_print_rect_ex(window, 41, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if Su not in player.fighter.off1 and len(player.fighter.off1) <= 2:
                    player.fighter.off1.append(Su)
                elif Su not in player.fighter.off1 and len(player.fighter.off1) >= 3:
                    if len(player.fighter.off2) <= 2 and Su not in player.fighter.off2:
                        player.fighter.off2.append(Su)
                    elif len(player.fighter.off3) >= 3 and Su not in player.fighter.off3:
                        player.fighter.off3.append(Su)

           

            

            libtcod.console_print_rect_ex(window, 46, 28, 1, 2, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 46, 29, 1, 2, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 42, 30, 20, 1, libtcod.white, libtcod.LEFT, 'i)Executioner')

            if 'Off Talent 10' in player.fighter.event: #Not Done #h
                ex = 'Executioner'
                #The bonus of Culling is increased to 15% and the damage bonus is increased to 40% and 30%, respectively
                libtcod.console_print_rect_ex(window, 41, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                

                if ex not in player.fighter.off2 and len(player.fighter.off2) <= 2:
                    player.fighter.off2.append(ex)
                elif ex not in player.fighter.off2 and len(player.fighter.off2) >= 3:
                    if len(player.fighter.off3) <= 2 and ex not in player.fighter.off3:
                        player.fighter.off3.append(ex)
                    elif len(player.fighter.off3) >= 3 and ex not in player.fighter.off3:
                        player.fighter.off4.append(ex)

            

            libtcod.console_print_rect_ex(window, 31, 28, 15, 1, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 31, 29, 15, 1, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 27, 30, 15, 1, libtcod.white, libtcod.LEFT, 'e)Second Wind')

            if 'Off Talent 8' in player.fighter.event: #Not Done #m
                #If an enemy is critcally struck, you regain stamina.
                libtcod.console_print_rect_ex(window, 26, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                SW = 'Second Wind'

                if SW not in player.fighter.off1 and len(player.fighter.off1) <= 2:
                    player.fighter.off1.append(SW)
                elif SW not in player.fighter.off1 and len(player.fighter.off1) >= 3:
                    if len(player.fighter.off2) <= 2 and SW not in player.fighter.off2:
                        player.fighter.off2.append(SW)
                    elif len(player.fighter.off3) >= 3 and SW not in player.fighter.off3:
                        player.fighter.off3.append(SW)

            

            libtcod.console_print_rect_ex(window, 26, 23, 70, 1, libtcod.white, libtcod.LEFT, "c)Blood Rage -> g)Stam Regen -> k)DW-Mastery") #Upper section

            if 'Off Talent 6' in player.fighter.event: #Not Done #k
                #Unlocks a secondary effect for DW intended effects
                libtcod.console_print_rect_ex(window, 55, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 56, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                dw = 'DW-Mastery'

                if dw not in player.fighter.off2 and len(player.fighter.off2) <= 2:
                    player.fighter.off2.append(dw)
                elif dw not in player.fighter.off2 and len(player.fighter.off2) >= 3:
                    if len(player.fighter.off3) <= 2 and dw not in player.fighter.off3:
                        player.fighter.off3.append(dw)
                    elif len(player.fighter.off3) >= 3 and dw not in player.fighter.off3:
                        player.fighter.off4.append(dw)

            if 'Off Talent 4' in player.fighter.event: #Done, stacks with Block talent 1 up to 9 stam/turn #g t
                stam = 'Stam regen' #Increases Stamina Regen
                libtcod.console_print_rect_ex(window, 39, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")

                libtcod.console_print_rect_ex(window, 40, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 41, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if stam not in player.fighter.off1 and len(player.fighter.off1) <= 2:
                    player.fighter.off1.append(stam)
                elif stam not in player.fighter.off1 and len(player.fighter.off2) <= 2:
                    if stam not in player.fighter.off2 and len(player.fighter.off2) <= 2:
                        player.fighter.off2.append(stam)
                    elif stam not in player.fighter.off3 and len(player.fighter.off3) <= 2 and stam not in player.fighter.off2:
                        player.fighter.off3.append(stam)

            

            libtcod.console_print_rect_ex(window, 31, 22, 15, 1, libtcod.white, libtcod.LEFT, 'I')
            libtcod.console_print_rect_ex(window, 31, 21, 15, 1, libtcod.white, libtcod.LEFT, '^')

            libtcod.console_print_rect_ex(window, 27, 20, 20, 1, libtcod.white, libtcod.LEFT, "b)Reckless Power")

            if 'Off Talent 3' in player.fighter.event: #Not Done #b
                #The lower your HP is, the more damage you do
                libtcod.console_print_rect_ex(window, 31, 22, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 31, 21, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if 'Reckless Power' not in player.fighter.off1 and len(player.fighter.off1) <= 2:
                    player.fighter.off1.append('Reckless Power')
                elif 'Reckless Power' not in player.fighter.off1 and len(player.fighter.off2) <= 2:
                    if 'Reckless Power' not in player.fighter.off2 and len(player.fighter.off2) <= 2:
                        player.fighter.off2.append('Reckless Power')
                    elif 'Reckless Power' not in player.fighter.off3 and len(player.fighter.off3) <= 2 and 'Reckless Power' not in player.fighter.off2:
                        player.fighter.off3.append('Reckless Power')

            if 'Off Talent 2' in player.fighter.event: #Done, does not apply to special effect from monster deaths etc. #c
                r = 'Blood Rage'
                #Every time you take damage, you have a chanse of gaining some Stamina
                libtcod.console_print_rect_ex(window, 25, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 24, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if r not in player.fighter.off1 and len(player.fighter.off1) <= 2:
                    player.fighter.off1.append(r)
                elif r not in player.fighter.off1 and len(player.fighter.off2) <= 2:
                    if r not in player.fighter.off2 and len(player.fighter.off2) <= 2:
                        player.fighter.off2.append(r)
                    elif r not in player.fighter.off3 and len(player.fighter.off3) <= 2 and r not in player.fighter.off2:
                        player.fighter.off3.append(r)

            
            
            libtcod.console_print_rect_ex(window, 36, 18, 20, 1, libtcod.white, libtcod.LEFT, "f)Blood Reserve")

            if 'Off Talent 5' in player.fighter.event:
                #You can pay with a fraction of your HP to cast spells, if you run out of Stamina
                ra = 'Blood Reserve'
                libtcod.console_print_rect_ex(window, 35, 18, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if ra not in player.fighter.off2 and len(player.fighter.off2) <= 2:
                    player.fighter.off2.append(ra)
                elif ra not in player.fighter.off2 and len(player.fighter.off2) >= 3:
                    if len(player.fighter.off3) <= 2 and ra not in player.fighter.off3:
                        player.fighter.off3.append(ra)
                    elif len(player.fighter.off3) >= 3 and ra not in player.fighter.off3:
                        player.fighter.off4.append(ra)
            

            libtcod.console_print_rect_ex(window, 44, 19, 1, 1, libtcod.white, libtcod.LEFT, "^")

            libtcod.console_print_rect_ex(window, 44, 21, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 44, 20, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 44, 22, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_ex(0, 105, 9, libtcod.BKGND_NONE, libtcod.LEFT, "Talents taken in Dual-Wield: ")

            libtcod.console_print_ex(0, 93, 11, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.off1))
            
            if len(player.fighter.off2) >= 1:
                libtcod.console_print_ex(0, 93, 13, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.off2))

           

            if len(player.fighter.off3) >= 1:
                
                libtcod.console_print_ex(0, 93, 15, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.off3))

            if len(player.fighter.off4) >= 1:
                libtcod.console_print_ex(0, 93, 17, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.off4))

            


        elif page == 4 and player.fighter.Class == 'Warrior' and Crafting == False and random == False:

            libtcod.console_print_rect_ex(window, 75, 55, 15, 1, libtcod.white, libtcod.LEFT, 'Next page: x')
            libtcod.console_print_rect_ex(window, 75, 57, 15, 1, libtcod.white, libtcod.LEFT, 'Prev page: z')
            libtcod.console_print_rect_ex(window, 25, 60, 60, 1, libtcod.white, libtcod.LEFT, 'Press ? for more info about each Talent on this page.')
            libtcod.console_print_rect_ex(window, 25, 62, 60, 1, libtcod.white, libtcod.LEFT, 'Press ENTER to Start/Return to the Game.')
            libtcod.console_print_rect_ex(window, 50, 10, 30, 1, libtcod.white, libtcod.LEFT, 'Available Talent Points:' + str(player.fighter.Talent_Points))

            
            libtcod.console_print_rect_ex(window, 10, 10, 40, 1, libtcod.white, libtcod.LEFT, 'Choose your Traits: Defense')
           
            libtcod.console_print_rect_ex(window, 13, 25, 17, 1, libtcod.white, libtcod.LEFT, 'a)Defender')
            if 'Block Talent 1' in player.fighter.event: #Done #a
                if 'Defender' not in player.fighter.defense1:
                    player.fighter.defense1.append('Defender')
                
                libtcod.console_print_rect_ex(window, 12, 25, 17, 1, libtcod.green, libtcod.LEFT, '#')
                
            
            
            libtcod.console_print_rect_ex(window, 24, 25, 2, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 24, 24, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 24, 26, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 25, 23, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 25, 27, 1, 1, libtcod.white, libtcod.LEFT, '-')

            libtcod.console_print_rect_ex(window, 26, 27, 62, 1, libtcod.white, libtcod.LEFT, 'd)Strong Armed -> h)Reflect Spell -> m)Shield Slam')

            if 'Block Talent 7' in player.fighter.event: #Done #d
                rds = 'Strong Armed'
                libtcod.console_print_rect_ex(window, 24, 26, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 25, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 26, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if rds not in player.fighter.defense1 and len(player.fighter.defense1) <= 2:
                    player.fighter.defense1.append(rds)
                elif rds not in player.fighter.defense1 and rds not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                    player.fighter.defense2.append(rds)

                elif rds not in player.fighter.defense1 and rds not in player.fighter.defense2 and rds not in player.fighter.defense3 and len(player.fighter.defense1) <= 2:
                    player.fighter.defense3.append(rds)

                if 'Block Talent 7 added' not in player.fighter.event:
                    player.fighter.event.append('Block Talent 7 added')
                    player.fighter.Base_Strength += 10

           

            

            libtcod.console_print_rect_ex(window, 50, 28, 1, 2, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 50, 29, 1, 2, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 47, 30, 35, 1, libtcod.white, libtcod.LEFT, 'i)Reduce Stun Cost')

            

            libtcod.console_print_rect_ex(window, 31, 28, 15, 1, libtcod.white, libtcod.LEFT, 'I')

            libtcod.console_print_rect_ex(window, 31, 29, 15, 1, libtcod.white, libtcod.LEFT, 'v')

            libtcod.console_print_rect_ex(window, 23, 30, 15, 1, libtcod.white, libtcod.LEFT, 'e)Deep Reserves')

            

            libtcod.console_print_rect_ex(window, 26, 23, 70, 1, libtcod.white, libtcod.LEFT, "c)Resistance -> g)Stone Form -> k)Undying")
            if 'Block Talent 2' in player.fighter.event: #Done #c
                r = 'Resistance'
                libtcod.console_print_rect_ex(window, 25, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 23, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 24, 24, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if r not in player.fighter.defense1 and len(player.fighter.defense1) <= 2:
                    player.fighter.defense1.append(r)
                elif r not in player.fighter.defense1 and r not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                    player.fighter.defense2.append(r)

                elif r not in player.fighter.defense1 and r not in player.fighter.defense2 and r not in player.fighter.defense3 and len(player.fighter.defense1) <= 2:
                    player.fighter.defense3.append(r)

            if 'Block Talent 8' in player.fighter.event: #Done #e
                dee = 'Deep Reserves'
                libtcod.console_print_rect_ex(window, 22, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if dee not in player.fighter.defense1 and len(player.fighter.defense1) <= 2:
                    player.fighter.defense1.append(dee)
                elif dee not in player.fighter.defense1 and dee not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                    player.fighter.defense2.append(dee)

                elif dee not in player.fighter.defense1 and dee not in player.fighter.defense2 and dee not in player.fighter.defense3 and len(player.fighter.defense3) <= 2:
                    player.fighter.defense3.append(dee)

            
            if 'Block Talent 9' in player.fighter.event: #Not implemented due to spells not properly implemented #h
                dop = 'Reflect Spell'
                
                libtcod.console_print_rect_ex(window, 44, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                
                if dop not in player.fighter.defense1 and len(player.fighter.defense1) <= 2:
                    player.fighter.defense1.append(dop)
                elif dop not in player.fighter.defense1 and dop not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                    player.fighter.defense2.append(dop)

                elif dop not in player.fighter.defense1 and dop not in player.fighter.defense2 and dop not in player.fighter.defense3 and len(player.fighter.defense3) <= 2:
                    player.fighter.defense3.append(dop)

            if 'Block Talent 11' in player.fighter.event: #Not implemented due to Spells not properly impleneted #m

                libtcod.console_print_rect_ex(window, 63, 27, 20, 1, libtcod.white, libtcod.LEFT, "#")
                mir = 'Shield Slam'

                if mir not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                    player.fighter.defense2.append(mir)
                elif mir not in player.fighter.defense2 and len(player.fighter.defense2) >= 3:
                    if len(player.fighter.defense3) <= 2 and mir not in player.fighter.defense3:
                        player.fighter.defense3.append(mir)
                    elif len(player.fighter.defense3) >= 3 and mir not in player.fighter.defense3:
                        player.fighter.defense4.append(mir)
                

                

            if 'Block Talent 10' in player.fighter.event: #Done #
                

                libtcod.console_print_rect_ex(window, 47, 30, 20, 1, libtcod.white, libtcod.LEFT, "#")
                red = 'Reduce Stun Cost'

                if red not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                    player.fighter.defense2.append(red)
                elif red not in player.fighter.defense2 and len(player.fighter.defense2) >= 3:
                    if len(player.fighter.defense3) <= 2 and red not in player.fighter.defense3:
                        player.fighter.defense3.append(red)
                    elif len(player.fighter.defense3) >= 3 and red not in player.fighter.defense3:
                        player.fighter.defense4.append(red)

            

               

            if 'Block Talent 4' in player.fighter.event: #Done
                s = 'Stone Form'
                libtcod.console_print_rect_ex(window, 39, 23, 20, 1, libtcod.white, libtcod.LEFT, "##")
                if s not in player.fighter.defense1 and len(player.fighter.defense1) <= 2:
                    player.fighter.defense1.append(s)
                elif s not in player.fighter.defense1 and len(player.fighter.defense1) >= 3:
                    if s not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                        player.fighter.defense2.append(s)
                    elif s not in player.fighter.defense2 and s not in player.fighter.defense3:
                        player.fighter.defense3.append(s)

            if 'Block Talent 6' in player.fighter.event: #Done #k
                libtcod.console_print_rect_ex(window, 51, 23, 20, 1, libtcod.white, libtcod.LEFT, "##")
                u = 'Undying'

                if u not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                    player.fighter.defense2.append(u)
                elif u not in player.fighter.defense2 and len(player.fighter.defense2) >= 3:
                    if len(player.fighter.defense3) <= 2 and u not in player.fighter.defense3:
                        player.fighter.defense3.append(u)
                    elif len(player.fighter.defense3) >= 3 and u not in player.fighter.defense3:
                        player.fighter.defense4.append(u)
                    
                

           

            libtcod.console_print_rect_ex(window, 31, 22, 15, 1, libtcod.white, libtcod.LEFT, 'I')
            libtcod.console_print_rect_ex(window, 31, 21, 15, 1, libtcod.white, libtcod.LEFT, '^')

            libtcod.console_print_rect_ex(window, 27, 20, 20, 1, libtcod.white, libtcod.LEFT, "b)Absorb Element")
            if 'Block Talent 3' in player.fighter.event: #Not Implemented yet due to lack of proper elemental damage #b
                libtcod.console_print_rect_ex(window, 31, 22, 20, 1, libtcod.white, libtcod.LEFT, "#")
                libtcod.console_print_rect_ex(window, 31, 21, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if 'Absorb Element' not in player.fighter.defense1 and len(player.fighter.defense1) <= 2:
                    player.fighter.defense1.append('Absorb Element')
                elif 'Absorb Element' not in player.fighter.defense1 and len(player.fighter.defense2) <= 2:
                    if 'Absorb Element' not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                        player.fighter.defense2.append('Absorb Element')
                    elif 'Absorb Element' not in player.fighter.defense3 and len(player.fighter.defense3) <= 2 and 'Absorb Element' not in player.fighter.defense2:
                        
                        player.fighter.defense3.append('Absorb Element')


            
                

            
            
            libtcod.console_print_rect_ex(window, 42, 18, 20, 1, libtcod.white, libtcod.LEFT, "f)Troll's Blood")

            if 'Block Talent 5' in player.fighter.event: #Done #f
                libtcod.console_print_rect_ex(window, 41, 18, 20, 1, libtcod.white, libtcod.LEFT, "#")
                if "Troll's Blood" not in player.fighter.defense2 and len(player.fighter.defense2) <= 2:
                    player.fighter.defense2.append("Troll's Blood")
                elif "Troll's Blood" not in player.fighter.defense2 and len(player.fighter.defense2) >= 3:
                    player.fighter.defense3.append("Troll's Blood")
                elif "Troll's Blood" not in player.fighter.defense3 and len(player.fighter.defense3) >= 3:
                    player.fighter.defense4.append("Troll's Blood")
                if 'Trolls Blood Talent' not in player.fighter.event:
                    player.fighter.event.append('Trolls Blood Talent')
                    player.fighter.Life_regen += int(round(2 + player.fighter.Base_Endurance/8))
                    
                
            

            libtcod.console_print_rect_ex(window, 46, 19, 1, 1, libtcod.white, libtcod.LEFT, "^")

            libtcod.console_print_rect_ex(window, 46, 21, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 46, 20, 1, 1, libtcod.white, libtcod.LEFT, "I")

            libtcod.console_print_rect_ex(window, 46, 22, 1, 1, libtcod.white, libtcod.LEFT, "I")

            

            libtcod.console_print_ex(0, 105, 9, libtcod.BKGND_NONE, libtcod.LEFT, "Talents taken in Defense: ")
            if mouse.rbutton_pressed: #if RMB is pressed, info is displayed about the skill, assuming co-ordinates are right
                libtcod.console_print_rect_ex(window, 26, 27, 62, 1, libtcod.white, libtcod.LEFT, 'd)Strong Armed -> h)Reflect Spell -> m)Shield Slam')
                
                #h)Reflect Spell 43 = x, 27 = y
                #d)Strong Armed 25 = x, 27 = y
                #h)Reflect Spell 44 = x, 27 = y
                #m)Unstoppable 64 = x, 27 = y
                #f)Counter attack 42 = x, 18 = y
                #Describe what the different skills do, re-implement them? (or find way to find out the info about what they did)
                #Undying x = 51, y = 23
                #Stone form x = 39 y = 23
                #Reduce Stun Cost x = 47, y = 30
                #Deep Reserves x = 22, y = 30
                #Absorb Element x = 27, y = 20

                if x >= 62 and x <= 76 and y >= 26 and y <= 28:
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "Shield Slam")
                    libtcod.console_print_ex(0, 92, 42, libtcod.BKGND_NONE, libtcod.LEFT, "While you are blocking, you can use a new skill")
                    libtcod.console_print_ex(0, 92, 44, libtcod.BKGND_NONE, libtcod.LEFT, "called Shield Slam.  ") #Placeholder number

                    libtcod.console_print_ex(0, 92, 46, libtcod.BKGND_NONE, libtcod.LEFT, "Shield Slam's damage Scale on the weight and") #Placeholder number
                    libtcod.console_print_ex(0, 92, 48, libtcod.BKGND_NONE, libtcod.LEFT, "the block value of the shield.") #Placeholder number

                    
                    

                if x >= 25 and x <= 41 and y >= 26 and y <= 28:
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "Strong Armed")
                    libtcod.console_print_ex(0, 92, 42, libtcod.BKGND_NONE, libtcod.LEFT, "Increases your block value and increases")
                    libtcod.console_print_ex(0, 92, 44, libtcod.BKGND_NONE, libtcod.LEFT, "your strength by 10") #Placeholder number
                    

                if x >= 12 and x <= 20 and y >= 24 and y <= 26:
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "Defender")
                    libtcod.console_print_ex(0, 92, 42, libtcod.BKGND_NONE, libtcod.LEFT, "Increases your block duration by 2 and increases")
                    libtcod.console_print_ex(0, 92, 44, libtcod.BKGND_NONE, libtcod.LEFT, "your passive stamina regen by 2.")

                if x >= 26 and x <= 40 and y >= 19 and y <= 21: #IMPLEMENT CONTROL FOR TOGGLING LOL
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "Absorb Element")
                    libtcod.console_print_ex(0, 92, 42, libtcod.BKGND_NONE, libtcod.LEFT, "Toggle Ability")
                    libtcod.console_print_ex(0, 92, 44, libtcod.BKGND_NONE, libtcod.LEFT, "Absorbs incoming elemental damage, based on")
                    libtcod.console_print_ex(0, 92, 46, libtcod.BKGND_NONE, libtcod.LEFT, "the type, you gain a buff:")
                    libtcod.console_print_ex(0, 92, 48, libtcod.BKGND_NONE, libtcod.LEFT, "Fire: Your attacks/spells cause burn")
                    libtcod.console_print_ex(0, 92, 50, libtcod.BKGND_NONE, libtcod.LEFT, "Ice: Your attacks slow enemies")
                    libtcod.console_print_ex(0, 92, 52, libtcod.BKGND_NONE, libtcod.LEFT, "Spirit: Gives you lifesteal")
                    libtcod.console_print_ex(0, 92, 54, libtcod.BKGND_NONE, libtcod.LEFT, "Lightning: Gives you Additional Energy")
                
                if x >= 24 and x <= 37 and y >= 22 and y <= 24:
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "Resistance")
                    libtcod.console_print_ex(0, 92, 42, libtcod.BKGND_NONE, libtcod.LEFT, "Increases your resistance to elements by 15 percent")
                if x >= 21 and x <= 35 and y >= 29 and y <= 31:
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "Deep Reserves")
                    libtcod.console_print_ex(0, 92, 42, libtcod.BKGND_NONE, libtcod.LEFT, "Increase Maximum Stamina by 30")
                if x >= 46 and x <= 63 and y >= 29 and y <= 31:
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "Reduce Stun Cost")
                    libtcod.console_print_ex(0, 92, 42, libtcod.BKGND_NONE, libtcod.LEFT, "Reduces cost of Stun by 10") 
                if x >= 40 and x <= 55 and y >= 22 and y <= 24:
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "Stone Form")
                    libtcod.console_print_ex(0, 92, 42, libtcod.BKGND_NONE, libtcod.LEFT, "Gives you a new skill, called SF (Stone Form)")
                    libtcod.console_print_ex(0, 92, 44, libtcod.BKGND_NONE, libtcod.LEFT, "Costs 60 stamina")
                    libtcod.console_print_ex(0, 92, 46, libtcod.BKGND_NONE, libtcod.LEFT, "Heals you for 30 percent of your max hp")
                    libtcod.console_print_ex(0, 92, 47, libtcod.BKGND_NONE, libtcod.LEFT, "+ a third of your Endurance")
                    
                if x >= 56 and x <= 66 and y >= 22 and y <= 24:
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "UNDYING")
                    libtcod.console_print_ex(0, 92, 42, libtcod.BKGND_NONE, libtcod.LEFT, "The lower your hp is, the less damage you take")
                    libtcod.console_print_ex(0, 92, 44, libtcod.BKGND_NONE, libtcod.LEFT, "The damage reduction caps at 25 percent") #Already Done
                    libtcod.console_print_ex(0, 92, 46, libtcod.BKGND_NONE, libtcod.LEFT, "If you are under 40 percent hp, you gain half of") #Needs to be fixed
                    libtcod.console_print_ex(0, 92, 46, libtcod.BKGND_NONE, libtcod.LEFT, "your lvl in percent of lifesteal")
                    
                    
                if x >= 42 and x <= 59 and y >= 17 and y <= 19:
                    libtcod.console_print_ex(0, 92, 40, libtcod.BKGND_NONE, libtcod.LEFT, "Troll's Blood")
                    libtcod.console_print_ex(0, 92, 41, libtcod.BKGND_NONE, libtcod.LEFT, "Increases your passive hp regen by 2 plus")
                    libtcod.console_print_ex(0, 92, 43, libtcod.BKGND_NONE, libtcod.LEFT, "an eight of your Endurance")
                    
                    

            libtcod.console_print_ex(0, 93, 11, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.defense1))
            
            if len(player.fighter.defense2) >= 1:
                libtcod.console_print_ex(0, 93, 13, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.defense2))

           

            if len(player.fighter.defense3) >= 1:
                
                libtcod.console_print_ex(0, 93, 15, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.defense3))

            if len(player.fighter.defense4) >= 1:
                libtcod.console_print_ex(0, 93, 17, libtcod.BKGND_NONE, libtcod.LEFT, str(player.fighter.defense4))

        if cooking == True:
            libtcod.console_blit(window, 0, 0, 65, 100, 0, 0, 0, 1.0, 1.0)
            img = libtcod.image_load('black_background.png')
            libtcod.image_blit_2x(img, window, 0, 0, sx=0, sy=0, w=-1, h=-1)
            pass

        if Crafting == True:
            

            

            

            libtcod.console_blit(window, 0, 0, 65, 100, 0, 0, 0, 1.0, 1.0)

            img = libtcod.image_load('black_background.png')

            libtcod.image_blit_2x(img, window, 0, 0, sx=0, sy=0, w=-1, h=-1)

            libtcod.console_blit(window3, 0, -30, 65, 50, 0, 0, 0, 1.0, 1.0)

            img = libtcod.image_load('black_background.png')

            libtcod.image_blit_2x(img, window3, 0, 0, sx=0, sy=0, w=-1, h=-1)

            libtcod.console_blit(window2, 0, -31, 65, 50, 0, 0, 0, 1.0, 1.0)

            img = libtcod.image_load('black_background.png')

            libtcod.image_blit_2x(img, window2, 0, 0, sx=0, sy=0, w=-1, h=-1)

            
            
            img = libtcod.image_load('black_background.png')

            libtcod.image_blit_2x(img, 0, 65, 4, sx=0, sy=0, w=-1, h=-1)

            
            for (line, color) in craft_msgs:
                libtcod.console_set_default_foreground(window3, color)
                libtcod.console_print_ex(window3, 7, 0, libtcod.BKGND_NONE, libtcod.LEFT, line)
                
                


            if name == False:
                before_name = 'Name'
            elif name == True:
                before_name = 'Name (Writing On)'
                try:
                    name_thing = name_thing
                except:
                    name_thing = ''

            try:
                libtcod.console_print_ex(window2, 5, 1, libtcod.BKGND_NONE, libtcod.LEFT, before_name + ': ' + name_thing)
            except:
                name_thing = ''
                libtcod.console_print_ex(window2, 5, 1, libtcod.BKGND_NONE, libtcod.LEFT, before_name + ': ' + name_thing)

            


            if armor != None:
                if armor == 'Boots':
                    if commited_slot1 == 'None':

                        armor1 = 0
                        min_fire_res1 = 0
                        max_fire_res1 = 0
                        old_weight1 = 0
                        

                    if 'Mithril Ore' in commited_slot1:
                        
                        armor1 = 3
      
                        min_fire_res1 = 3
                        max_fire_res1 = 7
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        armor1 = 2

                        old_weight1 = 2

                if armor == 'Legs':
                    if commited_slot1 == 'None':

                        armor1 = 0
                        min_fire_res1 = 0
                        max_fire_res1 = 0
                        old_weight1 = 0
                        

                    if 'Mithril Ore' in commited_slot1:
                        
                        armor1 = 3
      
                        min_fire_res1 = 3
                        max_fire_res1 = 7
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        armor1 = 2

                        old_weight1 = 2

                if armor == 'Bracers':
                    if commited_slot1 == 'None':

                        armor1 = 0
                        min_fire_res1 = 0
                        max_fire_res1 = 0
                        old_weight1 = 0
                        

                    if 'Mithril Ore' in commited_slot1:
                        
                        armor1 = 3
      
                        min_fire_res1 = 3
                        max_fire_res1 = 7
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        armor1 = 2

                        old_weight1 = 2

                if armor == 'Gloves':
                    if commited_slot1 == 'None':

                        armor1 = 0
                        min_fire_res1 = 0
                        max_fire_res1 = 0
                        old_weight1 = 0
                        

                    if 'Mithril Ore' in commited_slot1:
                        
                        armor1 = 3
      
                        min_fire_res1 = 3
                        max_fire_res1 = 7
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        armor1 = 2

                        old_weight1 = 2
                if armor == 'Belt':

                    if commited_slot1 == 'None':

                        armor1 = 0
                        min_fire_res1 = 0
                        max_fire_res1 = 0
                        old_weight1 = 0
                        

                    if 'Mithril Ore' in commited_slot1:
                        
                        armor1 = 3
      
                        min_fire_res1 = 3
                        max_fire_res1 = 7
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        armor1 = 2

                        old_weight1 = 2

                if armor == 'Chest':
                    if commited_slot1 == 'None':

                        armor1 = 0
                        min_fire_res1 = 0
                        max_fire_res1 = 0
                        old_weight1 = 0
                        

                    if 'Mithril Ore' in commited_slot1:
                        
                        armor1 = 5
      
                        min_fire_res1 = 6
                        max_fire_res1 = 10
               
                        old_weight1 = 30

                    if 'Iron Ore' in commited_slot1:

                        armor1 = 3

                        old_weight1 = 10

                if armor == 'Shoulders':
                    if commited_slot1 == 'None':

                        armor1 = 0
                        min_fire_res1 = 0
                        max_fire_res1 = 0
                        old_weight1 = 0
                        

                    if 'Mithril Ore' in commited_slot1:
                        
                        armor1 = 2
      
                        min_fire_res1 = 2
                        max_fire_res1 = 5
               
                        old_weight1 = 3

                    if 'Iron Ore' in commited_slot1:

                        armor1 = 1

                        old_weight1 = 3
                if armor == 'Helm':
                    if commited_slot1 == 'None':

                        armor1 = 0
                        min_fire_res1 = 0
                        max_fire_res1 = 0
                        old_weight1 = 0

                    if commited_slot2 == 'None':
                        armor2 = 0
                        min_fire_res2 = 0
                        max_fire_res2 = 0
                        old_weight2 = 0

                    if commited_slot3 == 'None':
                        armor3 = 0
                        min_fire_res3 = 0
                        max_fire_res3 = 0
                        old_weight3 = 0
                        

                    if 'Mithril Ore' in commited_slot1:
                        
                        armor1 = 3
      
                        min_fire_res1 = 3
                        max_fire_res1 = 7
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        armor1 = 2

                        old_weight1 = 2

                    if 'Mithril Ore' in commited_slot2:
                        
                        armor2 = 3
      
                        min_fire_res2 = 3
                        max_fire_res2 = 7
               
                        old_weight2 = 4

                    if 'Iron Ore' in commited_slot2:

                        armor2 = 2

                        old_weight2 = 2

                    if 'Mithril Ore' in commited_slot3:
                        
                        armor3 = 3
      
                        min_fire_res3 = 3
                        max_fire_res3 = 7
               
                        old_weight3 = 4

                    if 'Iron Ore' in commited_slot3:

                        armor3 = 2

                        old_weight3 = 2

            
                    
            if weapon != None:
                if weapon == '2h-Sword':
                    item_type = 'Sword'
                    Energy = 1500
                    Weapon_type = 'Bladed'
                    holding = 'Both'
                    if commited_slot1 == 'None':

                        handle_damage = 0

                        min_crit1 = None
      
                        max_crit1 = None

                        scaling1 = None
                        scaling2 = None
               
                        old_weight1 = None
                        

                    if 'Leather Band' in commited_slot1:
                        
                        min_crit1 = 4
      
                        max_crit1 = 7

                        scaling1 = 1
                        scaling2 = 4
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        min_crit1 = 5

                        max_crit1 = 10

                        old_weight1 = 5

                        handle_damage = 4

                        
                            

                    if commited_slot2 == 'None':
                        old_min_damage1 = None
                        old_min_damage2 = None
                        old_max_damage1 = None
                        old_max_damage2 = None
                        
                        min_crit2 = None
                        
                        
                        max_crit2 = None
                        
                        
                        scaling3 = None
                        scaling4 = None
                        
                        old_weight2 = None

                    
                   
                    if 'Iron Ore' in commited_slot2:
                        old_min_damage1 = 1
                        old_min_damage2 = 3
                        old_max_damage1 = 4
                        old_max_damage2 = 6
                        
                        min_crit2 = 7
                        
                        
                        max_crit2 = 12
                        
                        
                        scaling3 = 2
                        scaling4 = 3
                        
                        old_weight2 = 10

                    if commited_slot3 == 'None':
                        old_min_damage3 = None
                        old_min_damage4 = None
                        old_max_damage3 = None
                        old_max_damage4 = None
                        
                        min_crit3 = None
                        
                        
                        max_crit3 = None
                        
                        
                        scaling7 = None
                        
                        old_weight3 = None

                    if 'Iron Ore' in commited_slot3:
                        old_min_damage3 = 1
                        old_min_damage4 = 3
                        old_max_damage3 = 4
                        old_max_damage4 = 6
                        
                        min_crit3 = 7
                        
                        
                        max_crit3 = 12
                        
                        
                        scaling7 = 2
                        scaling4 = 3
                        
                        
                        old_weight3 = 10

                

                    
                        
                elif weapon == '1h-Mace':
                    item_type = 'Mace'
                    Energy = 1000
                    Weapon_type = 'Blunt'
                    holding = 'Left Hand'
                    if commited_slot1 == 'None':

                        handle_damage = 0

                        min_crit1 = None
      
                        max_crit1 = None

                        scaling1 = None
                        scaling2 = None
               
                        old_weight1 = None
                        

                    if 'Leather Band' in commited_slot1:
                        
                        min_crit1 = 4
      
                        max_crit1 = 7

                        scaling1 = 1
                        scaling2 = 4
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        min_crit1 = 5

                        max_crit1 = 10

                        old_weight1 = 5

                        handle_damage = 4

                        
                            

                    if commited_slot2 == 'None':
                        old_min_damage1 = None
                        old_min_damage2 = None
                        old_max_damage1 = None
                        old_max_damage2 = None
                        
                        min_crit2 = None
                        
                        
                        max_crit2 = None
                        
                        
                        scaling3 = None
                        scaling4 = None
                        
                        old_weight2 = None

                    
                   
                    if 'Iron Ore' in commited_slot2:
                        old_min_damage1 = 1
                        old_min_damage2 = 3
                        old_max_damage1 = 4
                        old_max_damage2 = 6
                        
                        min_crit2 = 7
                        
                        
                        max_crit2 = 12
                        
                        
                        scaling3 = 2
                        scaling4 = 3
                        
                        old_weight2 = 10

                    if commited_slot3 == 'None':
                        old_min_damage3 = None
                        old_min_damage4 = None
                        old_max_damage3 = None
                        old_max_damage4 = None
                        
                        min_crit3 = None
                        
                        
                        max_crit3 = None
                        
                        
                        scaling7 = None
                        
                        old_weight3 = None

                    if 'Iron Ore' in commited_slot3:
                        old_min_damage3 = 1
                        old_min_damage4 = 3
                        old_max_damage3 = 4
                        old_max_damage4 = 6
                        
                        min_crit3 = 7
                        
                        
                        max_crit3 = 12
                        
                        
                        scaling7 = 2
                        scaling4 = 3
                        
                        
                        old_weight3 = 10
                elif weapon == '2h-mace':
                    item_type = 'Mace'
                    Energy = 1300
                    Weapon_type = 'Blunt'
                    holding = 'Both'
                    if commited_slot1 == 'None':

                        handle_damage = 0

                        min_crit1 = None
      
                        max_crit1 = None

                        scaling1 = None
                        scaling2 = None
               
                        old_weight1 = None
                        

                    if 'Leather Band' in commited_slot1:
                        
                        min_crit1 = 4
      
                        max_crit1 = 7

                        scaling1 = 1
                        scaling2 = 4
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        min_crit1 = 5

                        max_crit1 = 10

                        old_weight1 = 5

                        handle_damage = 4

                        
                            

                    if commited_slot2 == 'None':
                        old_min_damage1 = None
                        old_min_damage2 = None
                        old_max_damage1 = None
                        old_max_damage2 = None
                        
                        min_crit2 = None
                        
                        
                        max_crit2 = None
                        
                        
                        scaling3 = None
                        scaling4 = None
                        
                        old_weight2 = None

                    
                   
                    if 'Iron Ore' in commited_slot2:
                        old_min_damage1 = 1
                        old_min_damage2 = 3
                        old_max_damage1 = 4
                        old_max_damage2 = 6
                        
                        min_crit2 = 7
                        
                        
                        max_crit2 = 12
                        
                        
                        scaling3 = 2
                        scaling4 = 3
                        
                        old_weight2 = 10

                    if commited_slot3 == 'None':
                        old_min_damage3 = None
                        old_min_damage4 = None
                        old_max_damage3 = None
                        old_max_damage4 = None
                        
                        min_crit3 = None
                        
                        
                        max_crit3 = None
                        
                        
                        scaling7 = None
                        
                        old_weight3 = None

                    if 'Iron Ore' in commited_slot3:
                        old_min_damage3 = 1
                        old_min_damage4 = 3
                        old_max_damage3 = 4
                        old_max_damage4 = 6
                        
                        min_crit3 = 7
                        
                        
                        max_crit3 = 12
                        
                        
                        scaling7 = 2
                        scaling4 = 3
                        
                        
                        old_weight3 = 10
                elif weapon == '1h-Axe':
                    item_type = 'Axe'
                    Energy = 900
                    Weapon_type = 'Piercing'
                    holding = 'Left Hand'
                    if commited_slot1 == 'None':

                        handle_damage = 0

                        min_crit1 = None
      
                        max_crit1 = None

                        scaling1 = None
                        scaling2 = None
               
                        old_weight1 = None
                        

                    if 'Leather Band' in commited_slot1:
                        
                        min_crit1 = 4
      
                        max_crit1 = 7

                        scaling1 = 1
                        scaling2 = 4
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        min_crit1 = 5

                        max_crit1 = 10

                        old_weight1 = 5

                        handle_damage = 4

                        
                            

                    if commited_slot2 == 'None':
                        old_min_damage1 = None
                        old_min_damage2 = None
                        old_max_damage1 = None
                        old_max_damage2 = None
                        
                        min_crit2 = None
                        
                        
                        max_crit2 = None
                        
                        
                        scaling3 = None
                        scaling4 = None
                        
                        old_weight2 = None

                    
                   
                    if 'Iron Ore' in commited_slot2:
                        old_min_damage1 = 1
                        old_min_damage2 = 3
                        old_max_damage1 = 4
                        old_max_damage2 = 6
                        
                        min_crit2 = 7
                        
                        
                        max_crit2 = 12
                        
                        
                        scaling3 = 2
                        scaling4 = 3
                        
                        old_weight2 = 10

                    if commited_slot3 == 'None':
                        old_min_damage3 = None
                        old_min_damage4 = None
                        old_max_damage3 = None
                        old_max_damage4 = None
                        
                        min_crit3 = None
                        
                        
                        max_crit3 = None
                        
                        
                        scaling7 = None
                        
                        old_weight3 = None

                    if 'Iron Ore' in commited_slot3:
                        old_min_damage3 = 1
                        old_min_damage4 = 3
                        old_max_damage3 = 4
                        old_max_damage4 = 6
                        
                        min_crit3 = 7
                        
                        
                        max_crit3 = 12
                        
                        
                        scaling7 = 2
                        scaling4 = 3
                        
                        
                        old_weight3 = 10
                elif weapon == '2h-Axe':
                    item_type = 'Axe'
                    Energy = 1500
                    Weapon_type = 'Bladed'
                    holding = 'Both'
                    if commited_slot1 == 'None':

                        handle_damage = 0

                        min_crit1 = None
      
                        max_crit1 = None

                        scaling1 = None
                        scaling2 = None
               
                        old_weight1 = None
                        

                    if 'Leather Band' in commited_slot1:
                        
                        min_crit1 = 4
      
                        max_crit1 = 7

                        scaling1 = 1
                        scaling2 = 4
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        min_crit1 = 5

                        max_crit1 = 10

                        old_weight1 = 5

                        handle_damage = 4

                        
                            

                    if commited_slot2 == 'None':
                        old_min_damage1 = None
                        old_min_damage2 = None
                        old_max_damage1 = None
                        old_max_damage2 = None
                        
                        min_crit2 = None
                        
                        
                        max_crit2 = None
                        
                        
                        scaling3 = None
                        scaling4 = None
                        
                        old_weight2 = None

                    
                   
                    if 'Iron Ore' in commited_slot2:
                        old_min_damage1 = 1
                        old_min_damage2 = 3
                        old_max_damage1 = 4
                        old_max_damage2 = 6
                        
                        min_crit2 = 7
                        
                        
                        max_crit2 = 12
                        
                        
                        scaling3 = 2
                        scaling4 = 3
                        
                        old_weight2 = 10

                    if commited_slot3 == 'None':
                        old_min_damage3 = None
                        old_min_damage4 = None
                        old_max_damage3 = None
                        old_max_damage4 = None
                        
                        min_crit3 = None
                        
                        
                        max_crit3 = None
                        
                        
                        scaling7 = None
                        
                        old_weight3 = None

                    if 'Iron Ore' in commited_slot3:
                        old_min_damage3 = 1
                        old_min_damage4 = 3
                        old_max_damage3 = 4
                        old_max_damage4 = 6
                        
                        min_crit3 = 7
                        
                        
                        max_crit3 = 12
                        
                        
                        scaling7 = 2
                        scaling4 = 3
                        
                        
                        old_weight3 = 10
                elif weapon == '1h-Spear':
                    item_type = 'Spear'
                    Energy = 900
                    Weapon_type = 'Piercing'
                    holding = 'Left Hand'
                    if commited_slot1 == 'None':

                        handle_damage = 0

                        min_crit1 = None
      
                        max_crit1 = None

                        scaling1 = None
                        scaling2 = None
               
                        old_weight1 = None
                        

                    if 'Leather Band' in commited_slot1:
                        
                        min_crit1 = 4
      
                        max_crit1 = 7

                        scaling1 = 1
                        scaling2 = 4
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        min_crit1 = 5

                        max_crit1 = 10

                        old_weight1 = 5

                        handle_damage = 4

                        
                            

                    if commited_slot2 == 'None':
                        old_min_damage1 = None
                        old_min_damage2 = None
                        old_max_damage1 = None
                        old_max_damage2 = None
                        
                        min_crit2 = None
                        
                        
                        max_crit2 = None
                        
                        
                        scaling3 = None
                        scaling4 = None
                        
                        old_weight2 = None

                    
                   
                    if 'Iron Ore' in commited_slot2:
                        old_min_damage1 = 1
                        old_min_damage2 = 3
                        old_max_damage1 = 4
                        old_max_damage2 = 6
                        
                        min_crit2 = 7
                        
                        
                        max_crit2 = 12
                        
                        
                        scaling3 = 2
                        scaling4 = 3
                        
                        old_weight2 = 10
                    if commited_slot3 == 'None':
                        old_min_damage3 = None
                        old_min_damage4 = None
                        old_max_damage3 = None
                        old_max_damage4 = None
                        
                        min_crit3 = None
                        
                        
                        max_crit3 = None
                        
                        
                        scaling7 = None
                        
                        old_weight3 = None

                    if 'Iron Ore' in commited_slot3:
                        old_min_damage3 = 1
                        old_min_damage4 = 3
                        old_max_damage3 = 4
                        old_max_damage4 = 6
                        
                        min_crit3 = 7
                        
                        
                        max_crit3 = 12
                        
                        
                        scaling7 = 2
                        scaling4 = 3
                        
                        
                        old_weight3 = 10
                elif weapon == '2h-Spear':
                    item_type = 'Spear'
                    Energy = 1500
                    Weapon_type = 'Piercing'
                    holding = 'Both'
                    if commited_slot1 == 'None':

                        handle_damage = 0

                        min_crit1 = None
      
                        max_crit1 = None

                        scaling1 = None
                        scaling2 = None
               
                        old_weight1 = None
                        

                    if 'Leather Band' in commited_slot1:
                        
                        min_crit1 = 4
      
                        max_crit1 = 7

                        scaling1 = 1
                        scaling2 = 4
               
                        old_weight1 = 4

                    if 'Iron Ore' in commited_slot1:

                        min_crit1 = 5

                        max_crit1 = 10

                        old_weight1 = 5

                        handle_damage = 4

                        
                            

                    if commited_slot2 == 'None':
                        old_min_damage1 = None
                        old_min_damage2 = None
                        old_max_damage1 = None
                        old_max_damage2 = None
                        
                        min_crit2 = None
                        
                        
                        max_crit2 = None
                        
                        
                        scaling3 = None
                        scaling4 = None
                        
                        old_weight2 = None

                    
                   
                    if 'Iron Ore' in commited_slot2:
                        old_min_damage1 = 1
                        old_min_damage2 = 3
                        old_max_damage1 = 4
                        old_max_damage2 = 6
                        
                        min_crit2 = 7
                        
                        
                        max_crit2 = 12
                        
                        
                        scaling3 = 2
                        scaling4 = 3
                        
                        old_weight2 = 10

                    if commited_slot3 == 'None':
                        old_min_damage3 = None
                        old_min_damage4 = None
                        old_max_damage3 = None
                        old_max_damage4 = None
                        
                        min_crit3 = None
                        
                        
                        max_crit3 = None
                        
                        
                        scaling7 = None
                        
                        old_weight3 = None

                    if 'Iron Ore' in commited_slot3:
                        old_min_damage3 = 1
                        old_min_damage4 = 3
                        old_max_damage3 = 4
                        old_max_damage4 = 6
                        
                        min_crit3 = 7
                        
                        
                        max_crit3 = 12
                        
                        
                        scaling7 = 2
                        scaling4 = 3
                        
                        
                        old_weight3 = 10

                elif weapon == 'Dagger':
                    item_type = 'Dagger'
                    Energy = 750
                    Weapon_type = 'Bladed'
                    holding = 'Left Hand'
                    if commited_slot1 == 'None':

                        handle_damage = 0

                        min_crit1 = None
      
                        max_crit1 = None

                        scaling1 = None
                        scaling2 = None
               
                        old_weight1 = None
                        

                    if 'Leather Band' in commited_slot1:
                        
                        min_crit1 = 4
      
                        max_crit1 = 10

                        scaling1 = 1
                        scaling2 = 4
               
                        old_weight1 = 2

                    if 'Iron Ore' in commited_slot1:

                        min_crit1 = 2

                        max_crit1 = 5

                        old_weight1 = 5

                        handle_damage = 2

                        
                            

                    if commited_slot2 == 'None':
                        old_min_damage1 = None
                        old_min_damage2 = None
                        old_max_damage1 = None
                        old_max_damage2 = None
                        
                        min_crit2 = None
                        
                        
                        max_crit2 = None
                        
                        
                        scaling3 = None
                        scaling4 = None
                        
                        old_weight2 = None

                    
                   
                    if 'Iron Ore' in commited_slot2:
                        old_min_damage1 = 1
                        old_min_damage2 = 3
                        old_max_damage1 = 4
                        old_max_damage2 = 6
                        
                        min_crit2 = 7
                        
                        
                        max_crit2 = 12
                        
                        
                        scaling3 = 2
                        scaling4 = 3
                        
                        old_weight2 = 10
                    if commited_slot3 == 'None':
                        old_min_damage3 = None
                        old_min_damage4 = None
                        old_max_damage3 = None
                        old_max_damage4 = None
                        
                        min_crit3 = None
                        
                        
                        max_crit3 = None
                        
                        
                        scaling7 = None
                        
                        old_weight3 = None

                    if 'Iron Ore' in commited_slot3:
                        old_min_damage3 = 1
                        old_min_damage4 = 3
                        old_max_damage3 = 4
                        old_max_damage4 = 6
                        
                        min_crit3 = 7
                        
                        
                        max_crit3 = 12
                        
                        
                        scaling7 = 2
                        scaling4 = 3
                        
                        
                        old_weight3 = 10

                

                elif weapon == 'One-handed gun':
                    pass

                elif weapon == 'Two-handed Rifle':
                    pass

                elif weapon == 'Bow':
                    pass

                
                

                if weapon=='1h-Sword':
                    item_type = 'Sword'
                    Weapon_type = 'Bladed'
                    holding = 'Left Hand'

                    if commited_slot1 == 'None':

                        handle_damage = 0

                        min_crit1 = None
      
                        max_crit1 = None

                        scaling1 = None
                        scaling2 = None
               
                        old_weight1 = None
                        

                    if 'Leather Band' in commited_slot1:
                        
                        min_crit1 = 2
      
                        max_crit1 = 4

                        scaling1 = 1
                        scaling2 = 4
               
                        old_weight1 = 5

                    if 'Iron Ore' in commited_slot1:

                        min_crit1 = 0

                        max_crit1 = 2

                        old_weight1 = 15

                        handle_damage = 1

                        
                            

                    if commited_slot2 == 'None':
                        old_min_damage1 = None
                        old_min_damage2 = None
                        old_max_damage1 = None
                        old_max_damage2 = None
                        
                        min_crit2 = None
                        
                        
                        max_crit2 = None
                        
                        
                        scaling3 = None
                        scaling4 = None
                        
                        old_weight2 = None

                    
                   
                    if 'Iron Ore' in commited_slot2:
                        old_min_damage1 = 3
                        old_min_damage2 = 5
                        old_max_damage1 = 7
                        old_max_damage2 = 9
                        
                        min_crit2 = 5
                        
                        
                        max_crit2 = 10
                        
                        
                        scaling3 = 2
                        scaling4 = 3
                        
                        old_weight2 = 15

                    if commited_slot3 == 'None':
                        old_min_damage3 = None
                        old_min_damage4 = None
                        old_max_damage3 = None
                        old_max_damage4 = None
                        
                        min_crit3 = None
                        
                        
                        max_crit3 = None
                        
                        
                        scaling7 = None
                        
                        old_weight3 = None

                    if 'Iron Ore' in commited_slot3:
                        old_min_damage3 = 1
                        old_min_damage4 = 3
                        old_max_damage3 = 4
                        old_max_damage4 = 6
                        
                        min_crit3 = 7
                        
                        
                        max_crit3 = 12
                        
                        
                        scaling7 = 2
                        scaling4 = 3
                        
                        
                        old_weight3 = 10


            try:
                if scaling1 == None:
                    scaling1 = 0
                    scaling2 = 0
            
                if scaling3 == None:
                    scaling3 = 0
                    scaling4 = 0
            
                if scaling5 == None:
                    scaling5 = 0
            
                if scaling7 == None:
                    scaling7 = 0
            except:
                scaling1 = 0
                scaling2 = 0
                scaling3 = 0
                scaling4 = 0
                scaling5 = 0
                scaling7 = 0
                
                


            try:
                if old_weight1 == None:
                    old_weight1 = 0
                if old_weight2 == None:
                    old_weight2 = 0
                if old_weight3 == None:
                    old_weight3 = 0
            except:
                old_weight1 = 0
                old_weight2 = 0
                old_weight3 = 0
               
            

            weight = old_weight1 + old_weight2 + old_weight3

            

            try:
                if old_min_damage1 == None:
                    old_min_damage1 = 0

                if handle_damage == None:
                    handle_damage = 0

                if old_min_damage3 == None:
                    old_min_damage3 = 0

                if old_min_damage2 == None:
                    old_min_damage2 = 0

                if old_min_damage4 == None:
                    old_min_damage4 = 0

                if old_max_damage1 == None:
                    old_max_damage1 = 0

                if old_max_damage2 == None:
                    old_max_damage2 = 0

                if old_max_damage3 == None:
                    old_max_damage3 = 0

                if old_max_damage4 == None:
                    old_max_damage4 = 0
            except:
                old_min_damage1 = 0
                handle_damage = 0
                old_min_damage3 = 0
                old_min_damage2 = 0
                old_min_damage4 = 0
                old_max_damage1 = 0
                old_max_damage2 = 0
                old_max_damage3 = 0
                old_max_damage4 = 0
             
            min_damage1 = old_min_damage1 + handle_damage + old_min_damage3
        
          
            min_damage2 = old_min_damage2 + handle_damage + old_min_damage4
        

           
            max_damage1 = old_max_damage1 + handle_damage + old_max_damage3
        
        
       
            max_damage2 = old_max_damage2 + handle_damage + old_max_damage4

            

            try:
                if min_crit3 == None:
                    min_crit3 = 0
                if min_crit4 == None:
                    min_crit4 = 0
                if max_crit1 == None:
                    max_crit1 = 0

                if max_crit2 == None:
                    max_crit2 = 0

                if min_crit1 == None:
                    min_crit1 = 0

                if min_crit2 == None:
                    min_crit2 = 0

                if max_crit3 == None:
                    max_crit3 = 0
                if max_crit4 == None:
                    max_crit4 = 0
            except:
                max_crit1 = 0
                max_crit2 = 0
                min_crit1 = 0
                min_crit2 = 0
                min_crit3 = 0
                min_crit4 = 0
                max_crit3 = 0
                max_crit4 = 0

            max_to_crit1 = max_crit1 + max_crit2 + max_crit4 + max_crit3

            min_to_crit1 = min_crit1 + min_crit2 + min_crit3 + min_crit4

            

            

            try:
                if other == None:
                    other = []
                if factor_1 == None:
                    factor_1 = ''
                if factor_2 == None:
                    factor_2 = ''
                if factor_3 == None:
                    factor_3 = ''
                    
                
            except:
                
                other = []
                factor_1 = ''
                factor_2 = ''
                factor_3 = ''

            
            try:
                armor_value = armor1 + armor2 + armor3
            except:
                armor_value = 0

            other = factor_1 + factor_2 + factor_3

            try:
                fire_res1 = min_fire_res1 + min_fire_res2 + min_fire_res3 + min_fire_res4
            except:
                min_fire_res1 = 0
                min_fire_res2 = 0
                min_fire_res3 = 0
                min_fire_res4 = 0
                fire_res1 = 0
            try:
                fire_res2 = max_fire_res1 + max_fire_res2 + max_fire_res3 + max_fire_res4
            except:
                max_fire_res1 = 0
                max_fire_res2 = 0
                max_fire_res3 = 0
                max_fire_res4 = 0
                fire_res2 = 0
            try:
                cold_res1 = max_cold_res1 + max_cold_res2 + max_cold_res3 + max_cold_res4
            except:
                max_cold_res1 = 0
                max_cold_res2 = 0
                max_cold_res3 = 0
                max_cold_res4 = 0
                cold_res1 = 0
            try:
                cold_res2 = min_cold_res1 + min_cold_res2 + min_cold_res3 + min_cold_res4
            except:
                
                min_cold_res1 = 0
                min_cold_res2 = 0
                min_cold_res3 = 0
                min_cold_res4 = 0
                cold_res2 = 0

            try:
                spirit_res1 = min_spirit_res1 + min_spirit_res2 + min_spirit_res3 + min_spirit_res4
            except:
                min_spirit_res1 = 0
                min_spirit_res2 = 0
                min_spirit_res3 = 0
                min_spirit_res4 = 0
                spirit_res1 = 0
            try:
                spirit_res2 = max_spirit_res1 + max_spirit_res2 + max_spirit_res3 + max_spirit_res4
            except:
                max_spirit_res1 = 0
                max_spirit_res2 = 0
                max_spirit_res3 = 0
                max_spirit_res4 = 0
                spirit_res2 = 0

            scaling3 = scaling3 + scaling7
            scaling4 = scaling4 
            scaling1 = scaling1 + scaling5
            scaling2 = scaling2

            

            if armor != None:
                libtcod.console_print_ex(window2, 5, 3, libtcod.BKGND_NONE, libtcod.LEFT, 'Armor: ' + str(armor_value))

                libtcod.console_print_ex(window2, 5, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'Fire Resistance/Cold Resistance: (' + str(fire_res1) + ') - (' + str(fire_res2) + ')/(' + str(cold_res1)
                                         + ') - (' + str(cold_res2) + ')')

                libtcod.console_print_ex(window2, 5, 7, libtcod.BKGND_NONE, libtcod.LEFT, 'Spirit Resistance: (' + str(spirit_res1) + ') - (' + str(spirit_res2) + ')')

                libtcod.console_print_ex(window2, 5, 9, libtcod.BKGND_NONE, libtcod.LEFT, 'Other: ' + other)

            
      
   
            elif weapon != None:
                
                try:
                   
                    libtcod.console_print_ex(window2, 5, 3, libtcod.BKGND_NONE, libtcod.LEFT, 'Damage: ' + ' (' + str(min_damage1) + ' - ' + str(min_damage2) + ') - (' + str(max_damage1) +
                                     ' - ' + str(max_damage2) + ')')
                except:
                    libtcod.console_print_ex(window2, 5, 3, libtcod.BKGND_NONE, libtcod.LEFT, 'Damage: (-)')
                

                
                libtcod.console_print_ex(window2, 5, 5, libtcod.BKGND_NONE, libtcod.LEFT, 'Scaling of Strength/Agility: ' + str(scaling1) + '/' + str(scaling2) + '(Agi), ' + str(scaling3)+ '/' +
                                         str(scaling4) + '(Str)')

                
                
                    
            
                
                libtcod.console_print_ex(window2, 5, 7, libtcod.BKGND_NONE, libtcod.LEFT, 'Crit: ' + str(min_to_crit1) + ' - ' + str(max_to_crit1) + '%')
                
                

                
                try:
                    libtcod.console_print_ex(window2, 5, 9, libtcod.BKGND_NONE, libtcod.LEFT, 'Weapon Type/Energy Cost: ' + Weapon_type + ', Energy: ' + str(Energy))
                except:
                    libtcod.console_print_ex(window2, 5, 9, libtcod.BKGND_NONE, libtcod.LEFT, 'Weapon Type/Energy Cost: ' + Weapon_type + ', Energy: (-)')
                

                
                
            
            libtcod.console_print_ex(window2, 5, 11, libtcod.BKGND_NONE, libtcod.LEFT, 'Weight: ' + str(weight))

            
            

            libtcod.console_print_ex(0, 95, 8, libtcod.BKGND_NONE, libtcod.LEFT, 'Current Selected Slot is : ' + str(current_slot))

            libtcod.console_print_ex(0, 95, 10, libtcod.BKGND_NONE, libtcod.LEFT, 'Current Selected Material is : ' + str(current_material))

            amounts = []
            for i in range(0, len(Dungeon.materials)):
                for item in Dungeon.materials:  
                    amounts.append(item.item.quantity)
            

            #current_stuff is a variable name for whatever slot you have currently "targeted". This is where you select what place you wish to put into stuff in

            if len(Dungeon.materials) > 0:
                for i in range(len(Dungeon.materials)):
                    if i == 0:
                        libtcod.console_print_ex(0, 85, 12+i, libtcod.BKGND_NONE, libtcod.LEFT, 'You have : ' + str(Dungeon.materials[i].item.quantity) + ' ' + Dungeon.materials[i].name + 's')
                        i1 = i
                        number1 = i
                        
                    else:
                        libtcod.console_print_ex(0, 85, 12+i, libtcod.BKGND_NONE, libtcod.LEFT, '           ' + str(Dungeon.materials[i].item.quantity) + ' ' + Dungeon.materials[i].name + 's')
                        
                        i2 = i
                        number2 = i

        
        
            libtcod.console_print_ex(window, 12, 9, libtcod.white, libtcod.LEFT, 'Press R to commit Current Material to Current Slot')
            libtcod.console_print_ex(window, 12, 11, libtcod.white, libtcod.LEFT, 'Press c to Craft the Item')
            if slot1 != None:
                libtcod.console_print_ex(window, 13, 14, libtcod.BKGND_NONE, libtcod.LEFT, slot1 + ':' + commited_slot1)
            if slot2 != None:
                libtcod.console_print_ex(window, 13, 16, libtcod.BKGND_NONE, libtcod.LEFT, slot2 + ':' + commited_slot2)
            if slot3 != None:
                libtcod.console_print_ex(window, 13, 18, libtcod.BKGND_NONE, libtcod.LEFT, slot3 + ':' + commited_slot3)
            if slot4 != None:
                
                libtcod.console_print_ex(window, 13, 24, libtcod.BKGND_NONE, libtcod.LEFT, slot4 + ':' + commited_slot4)

            

            


            if mouse.rbutton_pressed:

                

                try:
                    if len(craft_msgs) == 1:
                        del craft_msgs[0]
                except:
                    pass
                    
                

                
                
                try:
                    if x >= 13 and x <= (20 + len(slot1)) and y == 14:
                        count = 0
                        for i in Dungeon.materials:
                            if i.name in commited_slot1:
                                Dungeon.materials[count].item.quantity += slot1_cost
                            count += 1

                        commited_slot1 = 'None'
                        

                    
                        
                except:
                    pass

                try:
                    if x >= 13 and x <= (20 + len(slot2)) and y == 16:

                        count = 0
                        for i in Dungeon.materials:
                            if i.name in commited_slot2:
                                Dungeon.materials[count].item.quantity += slot2_cost
                            count += 1

                        
                        commited_slot2 = 'None'
                except:
                    pass

                try:
                    if x >= 13 and x <= (20 + len(slot3)) and y == 18:
                        count = 0
                        for i in Dungeon.materials:
                            if i.name in commited_slot3:
                                Dungeon.materials[count].item.quantity += slot3_cost
                            count += 1

                        
                        commited_slot3 = 'None'
                except:
                    pass

                try:
                    if x >= 13 and x <= (20 + len(slot4)) and y == 24:
                        commited_slot4 = 'None'
                except:
                    pass

##            if key.vk == libtcod.KEY_ESCAPE:
##                choice = 'Done'
##                sys.exit()

            

            
                
            

            if mouse.lbutton_pressed:
                
                

                if len(craft_msgs) == 1:
                    del craft_msgs[0]
                
                if x >= 12 and x <= (14 + len(name_thing)) and y == 41:
                    if name == False:
                        name = True
                    elif name == True:
                        name = False
                try:
                    if x >= 13 and x <= (20 + len(slot1)) and y == 14:
                        current_slot = slot1
                        
                        craft_message("Current Slot/Material: " + slot1 + '/ ' + current_material + '.', libtcod.green)
                except:
                    pass
                
                try:
                    if x >= 13 and x <= (20 + len(slot2)) and y == 16:
                        current_slot = slot2
                        craft_message("Current Slot/Material: " + slot2 + '/ ' + current_material + '.', libtcod.green)
                except:
                    pass

                try:
                    if x >= 13 and x <= (20 + len(slot3)) and y == 18:
                        current_slot = slot3
                        craft_message("Current Slot/Material: " + slot3 + '/ ' + current_material + '.', libtcod.green)
                except:
                    pass

                try:
                    if x >= 13 and x <= (20 + len(slot4)) and y == 24:
                        current_slot = slot4
                        craft_message("Current Slot/Material: " + slot4 + '/ ' + current_material + '.', libtcod.green)
                except:
                    pass
                
                
                try:
                    if x >= 99 and x <= (99 + len(Dungeon.materials[y-12].name)) and y >= 12:
                        current_material = Dungeon.materials[y-12].name
                        craft_message("Current Slot/Material: " + str(current_slot) + '/ ' + str(current_material) + '.', libtcod.green)
                        
                except:
                    craft_message("That's not a valid material!", libtcod.red)

            
            
            
            
        
        

        #print all the options

        if Crafting == True:
            x = SCREEN_WIDTH/2 - 30
            y = SCREEN_HEIGHT/2 - 15
            libtcod.console_blit(window, 0, 0, 80, 50, 0, 0, 0, 1.0, 1.0)
            libtcod.console_blit(window2, -5, -40, 100, 100, 0, 0, 0, 1.0, 1.0)

        #blit the contents of "window" to the root console
        if Crafting == False:
            x = SCREEN_WIDTH/2 - 30
            y = SCREEN_HEIGHT/2 - 15
            libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)

        #present the root console to the player and wait for a key-press
        libtcod.console_flush()
        key = libtcod.Key()

        

        (x, y) = (mouse.cx, mouse.cy)



        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS | libtcod.EVENT_MOUSE, key, mouse)


        #render the background first
        

        
            

        if key.vk == libtcod.KEY_ENTER and skills == True:

            Dungeon.original = []

            for i in Dungeon.skill_numbers:
                Dungeon.original.append(i)
                
            
            
            
            

            
            if Dungeon.skill_buffer == 0:

                
                

                
                
                try:
                    if game_state == 'playing':
                        
                        
                        
                        choice = 'Done'
                        libtcod.console_clear(window)
                        libtcod.console_clear(0)
                        
                        
                        
                        
                        

                        
                        
                except:
                    
                    new_game()
                    play_game()
                    
                    choice = 'Done'
                    
            
       
        
        if key.vk == libtcod.KEY_ENTER:
            try:
                if game_state == 'playing':
                    choice = 'Done'
                    libtcod.console_clear(window)
                    libtcod.console_clear(0)
            except:
                new_game()
                play_game()
                choice = 'Done'
                    
        if key.vk == libtcod.KEY_ENTER and page <= 4 and random == False and skills == False and alchemy == False:
            if Crafting == True:
                if name == False:
                    if game_state == 'playing':
                        message('Crafting cancelled.', libtcod.green)
                        try:
                            
                            count = 0
                            for i in Dungeon.materials:
                                if i.name in commited_slot1:
                                    Dungeon.materials[count].item.quantity += slot1_cost
                                count += 1

                            commited_slot1 = 'None'
                                

                            
                                
                        except:
                            pass

                        try:
                            

                            count = 0
                            for i in Dungeon.materials:
                                if i.name in commited_slot2:
                                    Dungeon.materials[count].item.quantity += slot2_cost
                                count += 1

                            
                            commited_slot2 = 'None'
                        except:
                            pass

                        try:
                            
                            count = 0
                            for i in Dungeon.materials:
                                if i.name in commited_slot3:
                                    Dungeon.materials[count].item.quantity += slot3_cost
                                count += 1

                            
                            commited_slot3 = 'None'
                        except:
                            pass
                        choice = 'Done'
                        libtcod.console_clear(window)
                        libtcod.console_clear(0)
                elif name == True:
                    name = False

            

                    

                
            if Crafting == False and skills == False:
                try:
                    if game_state == 'playing':
                        choice = 'Done'
                except:
##  ['Acrobatics (Str + Agi)', 'Alchemy (Int + Spi)', 'Bluffing (Int + Lu)', 'Climbing (Str + End)', 'Disguise (Int + Lu)',  'Cooking (Lu)', 'Foraging (Int)',
##  'Lockpicking (Agi + Lu)', 'Stealth (Agi)', 'Sleight of Hand (Agi + Lu)', 'Perception (Int)',
##  'Diplomacy (Int + Spi)', 'Intimidate (Str + End)',
##  'Poisons (Agi)', 'Writing (Int)', 'Swimming (Str + Agi)', 'Tracking (Lu)', 'Runes (Int)', 'Conditioning (End)',
##  'Recovery (End + Spi)', 'Healing Arts (Int)', 'Gambling (Int)', 'Piety (Spi)', 'Packing (Int)', 'Knowledge- Dragons (Int)',
##  'Salvage (Lu)', 'Spellweaving (Int)', 'Siphon (Spi)', 'Quick Feet (Agi)', 'Warcries (End)', 'Throwing (Agi)', 'Expel Corruption (Spi)', 'Sense Demons (Spi)', 
##  'Shady Dealings (Lu)', 'Knowledge- Arcane (Int)', 'Knowledge- Demons (Int)',  'Knowledge- Dungeons (Int)', 'Knowledge- Nature (Int)', 'Knowledge- Tribes (Int)']

                    try:
                        if player.fighter.Class == 'Warlock':
                            Dungeon.skills.remove('Lockpicking (Agi + Lu)')
                            
                            Dungeon.skills.remove('Sleight of Hand (Agi + Lu)')
                            Dungeon.skills.remove('Knowledge- Nature (Int)')
                            Dungeon.skills.remove('Quick Feet (Agi)')
                            Dungeon.skills.remove('Poisons (Agi)')
                            Dungeon.skills.remove('Conditioning (End)')
                            Dungeon.skills.remove('Recovery (End + Spi)')
                            Dungeon.skills.remove('Healing Arts (Int)')
                            Dungeon.skills.remove('Piety (Spi)')
                            Dungeon.skills.remove('Packing (Int)')
                            Dungeon.skills.remove('Knowledge- Dragons (Int)')
                            Dungeon.skills.remove('Salvage (Lu)')
                            Dungeon.skills.remove('Warcries (End)')
                            Dungeon.skills.remove('Shady Dealings (Lu)')
                            Dungeon.skills.remove('Knowledge- Dungeons (Int)')
                            Dungeon.skills.remove('Knowledge- Tribes (Int)')
                            Dungeon.skills.remove('Tracking (Lu)')
                            

                        if player.fighter.Class == 'Warrior':
                            Dungeon.skills.remove('Alchemy (Int + Spi)')
                            Dungeon.skills.remove('Lockpicking (Agi + Lu)')
                            Dungeon.skills.remove('Stealth (Agi)')
                            Dungeon.skills.remove('Sleight of Hand (Agi + Lu)')
                            Dungeon.skills.remove('Expel Corruption (Spi)')
                            Dungeon.skills.remove('Sense Demons (Spi)')
                            Dungeon.skills.remove('Shady Dealings (Lu)')
                            Dungeon.skills.remove('Knowledge- Demons (Int)')
                            Dungeon.skills.remove('Siphon (Spi)')
                            Dungeon.skills.remove('Knowledge- Nature (Int)')
                            Dungeon.skills.remove('Spellweaving (Int)')
                            Dungeon.skills.remove('Writing (Int)')
                            Dungeon.skills.remove('Quick Feet (Agi)')
                            Dungeon.skills.remove('Runes (Int)')
                            Dungeon.skills.remove('Poisons (Agi)')
                            Dungeon.skills.remove('Knowledge- Arcane (Int)')
                            
                        
                        shitstorm()
                        power_menu(skills=True, first_time=True, level_up=True)
                    except:
                        pass
                    
                    

            


        else:
            key_char = chr(key.c) #3 23 55 23


            if alchemy == True:
                potion = ord(key_char) - 97
                current = 0
                try:
                    
                    thing = str(Dungeon.original_recipies[potion])
                    
                    

                    effects = ['Strength', 'Agility', 'Armor', 'Speed', 'Healing', 'Gas', 'Intellect']
                    strength = ['Minor', 'Lesser', 'Medium', 'Large', 'Major', 'Great']
                    names = ['Potion', 'Draught', 'Vial', 'Greanade']
                    

                    for i in strength:
                        if i in thing:
                            strength = i
                            break
                    for i in effects:
                        if i in thing:
                            effect = i
                            break
                    for i in names:
                        if i in thing:
                            name = i
                            break

                    number = len(strength) + len(effect) + len(name) + 4
                    thing2 = thing[number:]
                    
                    costs = []
                    count = 0
                    materials = []
                    #Keep alphabetical order of materials so they can be appended and sorted there after
                    

##                    list_of_recipies = ['Lesser Strength Potion: Bloodleaf x 3, Dry Lichen x 4', 'Lesser Agility Potion: Shade Lichen x 3, Water x 4',
##                        'Lesser Armor Potion: Dry Lichen x 3, Shade Lichen x3', 'Lesser Speed Potion: Bloodleaf x 8']

                    listofstuff = ['Dark Root', 'Pale Root', 'Ember Root', 'Mud Root', 'Sand Root', 'Cursed Root',
                                  'Shadow Leaf', 'Grey Leaf', 'Firespirit Leaf', 'Slipstream Leaf', 'Old Oak Leaf', 'Oblivion Leaf',
                                  'Tough Bark', 'Frozen Bark', 'Seared Bark', 'Thin Bark', 'Resillient Bark', 'Demonic Bark',
                                  'Black Grass', 'Snow Grass', 'Charred Fire Grass', 'Fresh Lake Grass', 'Tough Grass', 'Void Grass',
                                  'Shade Thistle', 'Winter Thistle', 'Fire Thistle', 'Special Thistle', 'Earth Thistle', 'Corrupted Thistle', 'Great Bloodroot', 'Water']
                    for i in listofstuff:
                        if i in thing2:
                            materials.append(i)
                            

                    
                    
                    

                    for i in thing2:
                        try:
                            thingy_magic = str(int(thing2[count-1])) + str(int(thing2[count]))
                            costs.append(int(thingy_magic))
                        except:
                            try:
                                if thing2[count-1] == ' ':
                                    
                                    thingy_magic = str(int(thing2[count]))
                                    costs.append(int(thingy_magic))
                            except:
                                pass

                        count += 1

                    

                    craft_potion(strength, effect, name, costs, materials)
                    

                except:
                    pass
                    
                
                if key.vk == libtcod.KEY_ENTER:
                    
                    libtcod.console_clear(window)
                    libtcod.console_clear(0)
                    break

            if random == True:

                if key.vk == libtcod.KEY_ENTER and glory == False:
                    libtcod.console_clear(window)
                    libtcod.console_clear(0)
                    if skills == True and Dungeon.skill_buffer == 0:
                        break
                    elif skills == False:
                        
                        break
                

##                def __init__(self, defense_bonus=0, weight=0, crit=0, to_crit=0, block_bonus=0, weapon_min=0, weapon_max=0, weapon_agi=0, weapon_str=0, fire=0, ice=0, lightning=0, spirit=0,
##                 ammo=0, ammo_cost=0, fire_range=0, Conceal_Bonus=0, armor_pen=0, worth=0, quantity=0, amount=1, rarity='', fire_mode='',
##                 name='', readable='no', weapon_type='', slot=None, is_equipped=False, use_function=None, eat_function=None, read_function=None ):
                 
                if len(player.fighter.trinket2) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.trinket2[0].name))) and y == 35:
                        temp_thing2(player.fighter.trinket2)

                        temp_thing()
                if len(player.fighter.ring1) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.ring1[0].name))) and y == 38:
                        temp_thing2(player.fighter.ring1)

                        temp_thing()
                if len(player.fighter.ring2) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.ring2[0].name))) and y == 41:
                        temp_thing2(player.fighter.ring2)

                        temp_thing()

                if len(player.fighter.Both) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.Both[0].name))) and y == 49:
                        temp_thing2(player.fighter.Both)

                        temp_thing()

                if len(player.fighter.Left) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.Left[0].name))) and y == 43:
                        temp_thing2(player.fighter.Left)

                        temp_thing()

                if len(player.fighter.Right) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.Right[0].name))) and y == 46:
                        temp_thing2(player.fighter.Right)

                        temp_thing()
                    
                if len(player.fighter.trinket1) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.trinket1[0].name))) and y == 32:
                        temp_thing2(player.fighter.trinket1)

                        temp_thing()
                if len(player.fighter.boots) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.boots[0].name))) and y == 29:
                        temp_thing2(player.fighter.boots)

                        temp_thing()

                if len(player.fighter.legs) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.legs[0].name))) and y == 26:
                        temp_thing2(player.fighter.legs)

                        temp_thing()

                if len(player.fighter.gloves) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.gloves[0].name))) and y == 23:
                        temp_thing2(player.fighter.gloves)

                        temp_thing()

                if len(player.fighter.bracers) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.bracers[0].name))) and y == 20:
                        temp_thing2(player.fighter.bracers)

                        temp_thing()

                if len(player.fighter.belt) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.belt[0].name))) and y == 17:
                        temp_thing2(player.fighter.belt)

                        temp_thing()

                if len(player.fighter.shoulders) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.shoulders[0].name))) and y == 11:
                        temp_thing2(player.fighter.shoulders)

                        temp_thing()
                if len(player.fighter.chest) > 0:
                    if x>= 65 and x <= (74 + (len(player.fighter.chest[0].name))) and y == 14:
                        temp_thing2(player.fighter.chest)

                        temp_thing()

                
                if len(player.fighter.neck) > 0: #Come back4
                    if x >= 65 and x <= (74 + (len(player.fighter.neck[0].name))) and y == 8:
                        temp_thing2(player.fighter.neck)

                        temp_thing()
                        
                        
                if len(player.fighter.head) > 0:
                    if x >= 65 and x <= (74 + (len(player.fighter.head[0].name))) and y == 5: #Come back
                        temp_thing2(player.fighter.head)

                        temp_thing()

                if x>= 65 and x <= 74 and y == 41 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Right Ring')


                    

                if x>= 65 and x <= 74 and y == 38 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Left Ring')

                if x>= 65 and x <= 74 and y == 35 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Right Trinket')

                if x>= 65 and x <= 74 and y == 32 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Left Trinket')

                if x>= 65 and x <= 74 and y == 29 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Boots')

                if x>= 65 and x <= 74 and y == 26 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Legs')

                if x>= 65 and x <= 74 and y == 23 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Gloves')

                if x>= 65 and x <= 74 and y == 20 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Bracers')

                if x>= 65 and x <= 74 and y == 17 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Belt')

                if x>= 65 and x <= 74 and y == 14 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Chest')

                if x>= 65 and x <= 74 and y == 11 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Shoulders')

                if x>= 65 and x <= 74 and y == 8 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Neck')

                if x>= 65 and x <= 74 and y == 5 and mouse.lbutton_pressed:
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Head')

            if random == True and glory == True:
                if mouse.lbutton_pressed:
                    print ('This is X and Y: ' + str(x) + ' ' + str(y))
                    if x >= 3 and x <= 55 and y >= 23 and y <= 56:
                        
                        if glory == True:
                            glory = False

                    
                            

            elif random == True and glory == False:

                
                

                if mouse.lbutton_pressed:
                    
                    
                    

                    if x >= 41 and x <= 44 and y == 58 and page < max_page:
                        print('This is x for x >= 38 and x <=44' + str(x))
                        
                        if glory2 == False:
                            glory3 = True
                        

                    elif x >= 37 and x <= 40 and y == 58 and page <= max_page and page > 1:
                        print('This is x for x >= 37 and x <=40' + str(x))
                        if glory3 == False:
                            glory2 = True
                    

                    
                    
                    if x >= 3 and x <= 55 and y >= 23 and y <= 56:
                        
                        if glory == False:
                            glory = True

            if mouse.lbutton_pressed and alchemy == True and x >= 35 and x <= 38 and y == 7:
                
                if len(strength_list) > 1 and index_count == 0:
                    if len(strength_list) == 6:
                        power_menu(alchemy=True, strength = 'Great', index_count = 5)
                        break
                    elif len(strength_list) == 5:
                        power_menu(alchemy=True, strength = 'Major', index_count = 4)
                        break
                    elif len(strength_list) == 4:
                        power_menu(alchemy=True, strength = 'Large', index_count = 3)
                    
                        break
                    elif len(strength_list) == 3:
                        power_menu(alchemy=True, strength = 'Medium', index_count = 2)
                        break
                    elif len(strength_list) == 2:
                        power_menu(alchemy=True, strength = 'Lesser', index_count = 1)
                    
                        break
                        
                        
                        
##                if len(strength_list) > 1:
##                    index_count = 0
##
##                if len(strength_list) > 1 and index_count == 0:
##                    power_menu(alchemy=True, strength = special_strength, index_count = special_index)
##                    
##                    break
                
                if len(strength_list) > 1 and index_count == 1:
                    
                    power_menu(alchemy=True, strength = 'Minor', index_count = 0)
                    
                    break
                if len(strength_list) >= 3 and index_count == 2:
                    power_menu(alchemy=True, strength = 'Lesser', index_count = 1)
                    
                    break

                if len(strength_list) >= 4 and index_count == 3:
                    power_menu(alchemy=True, strength = 'Medium', index_count = 2)
                    
                    break
                if len(strength_list) >= 5 and index_count == 4:
                    power_menu(alchemy=True, strength = 'Large', index_count = 3)
                    
                    break
                if len(strength_list) >= 6 and index_count == 5:
                    power_menu(alchemy=True, strength = 'Major', index_count = 4)
                    
                    break

            if mouse.lbutton_pressed and alchemy == True and x >= 41 and x <= 44 and y == 7:
                
                if len(strength_list) > 1 and index_count == 0:
                    
                    power_menu(alchemy=True, strength = 'Lesser', index_count = 1)
                    
                    break
                elif len(strength_list) >= 3 and index_count == 1:
                    
                    power_menu(alchemy=True, strength = 'Medium', index_count = 2)
                    break
                elif len(strength_list) >= 4 and index_count == 2:
                    
                    power_menu(alchemy=True, strength = 'Large', index_count = 3)
                    break
                elif len(strength_list) >= 5 and index_count == 3:
                    
                    power_menu(alchemy=True, strength = 'Major', index_count = 4)
                    break
                elif len(strength_list) >= 6 and index_count == 4:
                    
                    power_menu(alchemy=True, strength = 'Great', index_count = 5)
                    break
                elif len(strength_list) >= 6 and index_count == 5:
                    power_menu(alchemy=True, strength = 'Minor', index_count = 0)
                    break
                    

            if mouse.lbutton_pressed and skills == True:
                if adding == False:
                    adding = True
                else:
                    adding = False



            

            if skills == True and adding == False:
                thing = ord(key_char) - 97

                try:
                    if Dungeon.skill_numbers[thing] > 1 and first_time == True:
                        
                        Dungeon.skill_numbers[thing] -= 1
                        Dungeon.skill_buffer += 1

                    elif first_time == False:


                            
                            
                            
                            if Dungeon.skill_numbers[thing] > Dungeon.original[thing]:
                                Dungeon.skill_numbers[thing] -= 1
                                Dungeon.skill_buffer += 1


                            elif Dungeon.skill_buffer == 0 and level_up == False:
                                
                                
                                skill_tree(thing)
                                break

                except:

                    
                    
                    pass
            if skills == True and adding == True:
                thing = ord(key_char) - 97

                try:
                    if Dungeon.skill_numbers[thing] < 35 and first_time == True:
                        Dungeon.skill_numbers[thing] += 1
                        Dungeon.skill_buffer -= 1
                    elif Dungeon.skill_numbers[thing] < 100 and first_time == False:
                        if Dungeon.skill_buffer > 0:
                            Dungeon.skill_numbers[thing] += 1
                            Dungeon.skill_buffer -= 1

                        elif Dungeon.skill_buffer == 0 and level_up == False:
                            

                            skill_tree(thing)

                            

                except:
                    pass

            if random == True and glory == False:
                if key_char == 'a':

                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Head')
                    

##                    chosen_thing(chosen_item)

                    if len(player.fighter.head) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.head) > 0:
                        temp_thing2(player.fighter.head)

                        temp_thing()
                    
                if key_char == 'A':                  
                    if(len(player.fighter.head) > 0):
                        
                        player.fighter.head[0].equip('Head',True, True)
                        temp_thing2(None, None)
                if key_char == 'B':
                    if(len(player.fighter.neck) > 0):
                        
                        player.fighter.neck[0].equip('Neck',True, True)
                        temp_thing2(None, None)
                if key_char == 'C':
                    if(len(player.fighter.shoulders) > 0):
                        
                        player.fighter.head[0].equip('Shoulders',True, True)
                        temp_thing2(None, None)
                if key_char == 'D':
                    if(len(player.fighter.chest) > 0):
                        
                        player.fighter.chest[0].equip('Chest',True, True)
                        temp_thing2(None, None)

                if key_char == 'b':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Neck')

                    if len(player.fighter.neck) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.neck) > 0:
                        temp_thing2(player.fighter.neck)
                        temp_thing()

                if key_char == 'c':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Shoulders')

##                    chosen_thing(chosen_item)
                    if len(player.fighter.shoulders) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.shoulders) > 0:
                        temp_thing2(player.fighter.shoulders)

                        temp_thing()

                if key_char == 'd':

                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Chest')

##                    chosen_thing(chosen_item)

                    if len(player.fighter.chest) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.chest) > 0:
                        temp_thing2(player.fighter.chest)

                        temp_thing()

                if key_char == 'e':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Belt')

##                    chosen_thing(chosen_item)

                    if len(player.fighter.belt) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.belt) > 0:
                        temp_thing2(player.fighter.belt)

                        temp_thing()
                if key_char == 'E':
                    if(len(player.fighter.belt) > 0):
                        
                        player.fighter.belt[0].equip('Belt',True, True)
                        temp_thing2(None, None)

                if key_char == 'f':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Bracers')

##                    chosen_thing(chosen_item)

                    if len(player.fighter.bracers) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.bracers) > 0:
                        temp_thing2(player.fighter.bracers)

                        temp_thing()

                if key_char == 'F':
                    if(len(player.fighter.bracers) > 0):
                        
                        player.fighter.bracers[0].equip('Bracers',True, True)
                        temp_thing2(None, None)
                if key_char == 'g':

                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Gloves')

##                    chosen_thing(chosen_item)
                    if len(player.fighter.gloves) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.gloves) > 0:
                        temp_thing2(player.fighter.gloves)

                        temp_thing()
                if key_char == 'G':
                    if(len(player.fighter.gloves) > 0):
                        
                        player.fighter.gloves[0].equip('Gloves',True, True)
                        temp_thing2(None, None)

                if key_char == 'h':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Legs')

##                    chosen_thing(chosen_item)

                    if len(player.fighter.legs) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.legs) > 0:
                        temp_thing2(player.fighter.legs)

                        temp_thing()
                if key_char == 'H':
                    if(len(player.fighter.legs) > 0):
                        
                        player.fighter.legs[0].equip('Legs',True, True)
                        temp_thing2(None, None)

                if key_char == 'i':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Boots')

##                    chosen_thing(chosen_item)

                    if len(player.fighter.boots) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.boots) > 0:
                        temp_thing2(player.fighter.boots)

                        temp_thing()
                if key_char == 'I':
                    if(len(player.fighter.boots) > 0):
                        
                        player.fighter.boots[0].equip('Boots',True, True)
                        temp_thing2(None, None)


                if key_char == 'j':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Left Trinket')

##                    chosen_thing(chosen_item)

                    if len(player.fighter.trinket1) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.trinket1) > 0:
                        temp_thing2(player.fighter.trinket1)

                        temp_thing()
                if key_char == 'J':
                    if(len(player.fighter.trinket1) > 0):
                        
                        player.fighter.trinket1[0].equip('Left Trinket',True, True)
                        temp_thing2(None, None)

                if key_char == 'k':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Right Trinket')

##                    chosen_thing(chosen_item)

                    if len(player.fighter.trinket2) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.trinket2) > 0:
                        temp_thing2(player.fighter.trinket2)

                        temp_thing()
                if key_char == 'K':
                    if(len(player.fighter.trinket2) > 0):
                        
                        player.fighter.trinket2[0].equip('Right Trinket',True, True)
                        temp_thing2(None, None)

                if key_char == 'l':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Right Ring')

##                    chosen_thing(chosen_item)

                    if len(player.fighter.ring1) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.ring1) > 0:
                        temp_thing2(player.fighter.ring1)

                        temp_thing()
                if key_char == 'L':
                    if(len(player.fighter.ring1) > 0):
                        
                        player.fighter.ring1[0].equip('Right Ring',True, True)
                        temp_thing2(None, None)

                if key_char == 'm':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Left Ring')

##                    chosen_thing(chosen_item)

                    if len(player.fighter.ring2) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.ring2) > 0:
                        temp_thing2(player.fighter.ring2)

                        temp_thing()
                    blyat2 = "Left Ring"
                if key_char == 'M':
                    if(len(player.fighter.ring2) > 0):
                        
                        player.fighter.ring2[0].equip('Left Ring',True, True)
                        temp_thing2(None, None)

                if key_char == 'n':

                    #Chooses wrong item
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Left Hand')

##                    chosen_thing(chosen_item)

                    

                    if len(player.fighter.Left) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.Left) > 0:
                        temp_thing2(player.fighter.Left)

                        temp_thing()
                    blyat2 = "Left Hand"
                if key_char == 'N':
                    if(len(player.fighter.Left) > 0):
                        
                        player.fighter.Left[0].equip('Left Hand',True, True)
                        temp_thing2(None, None)

                if key_char == 'o':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Right Hand')

                    if len(player.fighter.Right) == 0:
                        temp_thing2(None, None)
                    if len(player.fighter.Right) > 0:
                        temp_thing2(player.fighter.Right)

                        temp_thing()

                if key_char == 'O':
                    if(len(player.fighter.Right) > 0):
                        
                        player.fighter.Right[0].equip('Right Hand',True, True)
                        temp_thing2(None, None)    
                if key_char == 'p':
                    chosen_item = inventory_menu('What do you wish to equip/dequip?', search_slot = 'Both')
                    if len(player.fighter.Both) == 0:
                        temp_thing2(None, None)

                    if len(player.fighter.Both) > 0:
                        temp_thing2(player.fighter.Both)
                        temp_thing()
                if key_char == 'P':
                    if(len(player.fighter.Both) > 0):
                        
                        player.fighter.Both[0].equip('Both',True, True)
                        temp_thing2(None, None)
                    
                    
                    
                    
                    
                    
            

            if random == True and glory == True:
                if key.vk == libtcod.KEY_ENTER:
                    
                    string = ''
                    thing = (len(Dungeon.journal) % 53)
                    remainder = 53 - thing
                    
                    
                    
                    for i in range(remainder):
                        string += ' '
                    Dungeon.journal = Dungeon.journal + string

                    
                if key.vk == libtcod.KEY_BACKSPACE:
                    if glory == True:
                        Dungeon.journal = Dungeon.journal[:-1]
                    
                    
                    
                    
                if key.vk == libtcod.KEY_SPACE:
                    
                    
                    if glory == True:
                        Dungeon.journal += ' '
                    
                if key_char == 'a':
                    if glory == True:
                        Dungeon.journal += 'a'
                    
                if key_char == 'A':
                    if glory == True:Dungeon.journal += 'A'
                if key_char == 'b':
                    if glory == True:Dungeon.journal += 'b'
                if key_char == 'B':
                    if glory == True:Dungeon.journal += 'B'
                if key_char == 'c':
                    if glory == True:Dungeon.journal += 'c'
                if key_char == 'C':
                    if glory == True:Dungeon.journal += 'C'
                if key_char == 'd':
                    if glory == True:Dungeon.journal += 'd'
                if key_char == 'D':
                    if glory == True:Dungeon.journal += 'D'
                if key_char == 'e':
                    if glory == True:Dungeon.journal += 'e'
                if key_char == 'E':
                    if glory == True:Dungeon.journal += 'E'
                if key_char == 'f':
                    if glory == True:Dungeon.journal += 'f'
                if key_char == 'F':
                    if glory == True:Dungeon.journal += 'F'
                if key_char == 'g':
                    if glory == True:Dungeon.journal += 'g'
                if key_char == 'G':
                    if glory == True:Dungeon.journal += 'G'
                if key_char == 'h':
                    if glory == True:Dungeon.journal += 'h'
                if key_char == 'H':
                    if glory == True:Dungeon.journal += 'H'
                if key_char == 'i':
                    if glory == True:Dungeon.journal += 'i'
                if key_char == 'I':
                    if glory == True:Dungeon.journal += 'I'
                if key_char == 'j':
                    if glory == True:Dungeon.journal += 'j'
                if key_char == 'J':
                    if glory == True:Dungeon.journal += 'J'
                if key_char == 'k':
                    if glory == True:Dungeon.journal += 'k'
                if key_char == 'K':
                    if glory == True:Dungeon.journal += 'K'
                if key_char == 'l':
                    if glory == True:Dungeon.journal += 'l'
                if key_char == 'L':
                    if glory == True:Dungeon.journal += 'L'
                if key_char == 'm':
                    if glory == True:Dungeon.journal += 'm'
                if key_char == 'M':
                    if glory == True:Dungeon.journal += 'M'
                if key_char == 'n':
                    if glory == True:Dungeon.journal += 'n'
                if key_char == 'N':
                    if glory == True:Dungeon.journal += 'N'
                if key_char == 'o':
                    if glory == True:Dungeon.journal += 'o'
                if key_char == 'O':
                    if glory == True:Dungeon.journal += 'O'
                if key_char == 'p':
                    if glory == True:Dungeon.journal += 'p'
                if key_char == 'P':
                    if glory == True:Dungeon.journal += 'P'
                if key_char == 'q':
                    if glory == True:Dungeon.journal += 'q'
                if key_char == 'Q':
                    if glory == True:Dungeon.journal += 'Q'
                if key_char == 'r':
                    if glory == True:Dungeon.journal += 'r'
                if key_char == 'R':
                    if glory == True:Dungeon.journal += 'R'
                if key_char == 's':
                    if glory == True:Dungeon.journal += 's'
                if key_char == 'S':
                    if glory == True:Dungeon.journal += 'S'
                if key_char == 't':
                    if glory == True:Dungeon.journal += 't'
                if key_char == 'T':
                    if glory == True:Dungeon.journal += 'T'
                if key_char == 'u':
                    if glory == True:Dungeon.journal += 'u'
                if key_char == 'U':
                    if glory == True:Dungeon.journal += 'U'
                if key_char == 'v':
                    if glory == True:Dungeon.journal += 'v'
                if key_char == 'V':
                    if glory == True:Dungeon.journal += 'V'
                if key_char == 'w':
                    if glory == True:Dungeon.journal += 'w'
                if key_char == 'W':
                    if glory == True:Dungeon.journal += 'W'
                if key_char == 'y':
                    if glory == True:Dungeon.journal += 'y'
                if key_char == 'Y':
                    if glory == True:Dungeon.journal += 'Y'
                if key_char == 'x':
                    if glory == True:Dungeon.journal += 'x'
                if key_char == 'X':
                    if glory == True:Dungeon.journal += 'X'
                if key_char == 'z':
                    if glory == True:Dungeon.journal += 'z'
                if key_char == 'Z':
                    if glory == True:Dungeon.journal += 'Z'
                if key_char == '1':
                    if glory == True:Dungeon.journal += '1'

                    
                if key_char == '(':
                    if glory == True:Dungeon.journal += '('
                if key_char == ')':
                    if glory == True:Dungeon.journal += ')'
                if key_char == '2':
                    if glory == True:Dungeon.journal += '2'
                if key_char == '3':
                    if glory == True:Dungeon.journal += '3'
                    
                if key_char == '4':
                    if glory == True:Dungeon.journal += '4'
                if key_char == '5':
                    if glory == True:Dungeon.journal += '5'
                if key_char == '6':
                    if glory == True:Dungeon.journal += '6'
                if key_char == '7':
                    if glory == True:Dungeon.journal += '7'
                if key_char == '8':
                    if glory == True:Dungeon.journal += '8'
                if key_char == '9':
                    if glory == True:Dungeon.journal += '9'
                if key_char == '0':
                    if glory == True:Dungeon.journal += '0'
                if key_char == '=':
                    if glory == True:Dungeon.journal += '='
                if key_char == "'":
                    if glory == True:Dungeon.journal += "'"
                if key_char == '+':
                    if glory == True:Dungeon.journal += "+"
                if key_char == '-':
                    if glory == True:Dungeon.journal += '-'
                if key_char == '.':
                    if glory == True:Dungeon.journal += '.'
                if key_char == ',':
                    if glory == True:Dungeon.journal += ','
                if key_char == '?':
                    if glory == True:Dungeon.journal += '?'
                if key_char == '!':
                    if glory == True:Dungeon.journal += '!'
                if key_char == ';':
                    if glory == True:Dungeon.journal += ';'
                if key_char == ':':
                    if glory == True:Dungeon.journal += ':'
                if key_char == '/':
                    if glory == True:Dungeon.journal += '/'
                if key_char == '<':
                    if glory == True:Dungeon.journal += '<'
                if key_char == '>':
                    if glory == True:Dungeon.journal += '>'
                if key_char == '"':
                    if glory == True:Dungeon.journal += '"'
                    
            if Crafting == True:
                

                factor = 0

                if key_char == 'c' and Crafting == True and len(name_thing) == 0 and name == False:
                    craft_message('Crafted items must have names!', libtcod.red)

                if key_char == 'c' and Crafting == True and len(name_thing) > 0 and name == False:

                    
                    

                    crit = libtcod.random_get_int(0, min_to_crit1, max_to_crit1)

                    minimum = libtcod.random_get_int(0, min_damage1, min_damage2)
                    maximum = libtcod.random_get_int(0, max_damage1, max_damage2)

                    #name_thing

                    Strength = 0
                    Agility = 0

                    

                    try:
                        Strength = scaling3/scaling4
                        Agility = scaling1/scaling2
                    except:
                        try:
                            Strength = scaling3/scaling4
                        except:
                            try:
                                Agility = scaling1/scaling2
                            except:
                                pass

                    

                    item_component = Item(to_crit=(crit + (player.fighter.Base_Agility)),defense_bonus=0, weapon_min=minimum, weapon_max=maximum, weapon_agi=int(round(Agility)),
                                          weapon_str=int(round(Strength)), weapon_type= item_type, name=name_thing, slot=holding, use_function=None, eat_function=None)
                    obj = Object(player.x, player.y, '/', name_thing, libtcod.sky, slot=holding, weight=weight, weapon_type=Weapon_type, item=item_component)

                    objects.append(obj)
                    obj.send_to_back()
                    obj.always_visible = False

                    message('You successfully crafted ' + name_thing + '!', libtcod.green)
                    libtcod.console_clear(window)
                    libtcod.console_clear(0)

                    break

                    
                    
                
              
                    
            
                
                

                if key_char == 'R' and Crafting == True and current_slot != 'None' and name == False and current_material != 'None':
                    if current_slot == slot1:
                        if current_material == Dungeon.materials[0].name and slot1_cost <= Dungeon.materials[0].item.quantity and commited_slot1 == 'None':
                            commited_slot1 = str(slot1_cost) + ' ' + current_material
                            Dungeon.materials[0].item.quantity -= slot1_cost

                        elif current_material != Dungeon.materials[0].name and slot1_cost <= Dungeon.materials[i2].item.quantity and commited_slot1 == 'None':
                            if commited_slot1 != str(slot1_cost) + ' ' + current_material:
                                for i in range(len(Dungeon.materials)):
                                    try:
                                        if current_material == Dungeon.materials[i].name:
                                            Dungeon.materials[i].item.quantity -= slot1_cost
                                            break
                                    except:
                                        pass
                            commited_slot1 = str(slot1_cost) + ' ' + current_material

                        elif current_material == Dungeon.materials[0].name and commited_slot1 != 'None':
                            craft_message("You already put materials in that slot.", libtcod.red)

                            


                        elif current_material == Dungeon.materials[0].name and slot1_cost > number1:
                            craft_message("You don't have enough materials!", libtcod.red)
                            

                        elif current_material != Dungeon.materials[0].name and slot1_cost > number2:
                            craft_message("You don't have enough materials!", libtcod.red)

                    

                    if current_slot == slot2:
                        
                        if current_material == Dungeon.materials[0].name and slot2_cost <= Dungeon.materials[0].item.quantity and commited_slot2 == 'None':
                            commited_slot2 = str(slot2_cost) + ' ' + current_material
                            Dungeon.materials[0].item.quantity -= slot2_cost

                        elif current_material != Dungeon.materials[0].name and slot2_cost <= Dungeon.materials[i2].item.quantity and commited_slot2 == 'None':
                            if commited_slot2 != str(slot2_cost) + ' ' + current_material:
                                for i in range(len(Dungeon.materials)):
                                    try:
                                        if current_material == Dungeon.materials[i].name:
                                            Dungeon.materials[i].item.quantity -= slot2_cost
                                            break
                                    except:
                                        pass
                            commited_slot2 = str(slot2_cost) + ' ' + current_material

                        elif current_material == Dungeon.materials[0] and commited_slot2 != 'None':
                            
                            craft_message("You already put materials in that slot.", libtcod.red)

                        

                        elif current_material == Dungeon.materials[0] and slot2_cost > number1:
                            craft_message("You don't have enough materials!", libtcod.red)
                            

                        elif current_material != Dungeon.materials[0] and slot2_cost > number2:
                            craft_message("You don't have enough materials!", libtcod.red)

                    if current_slot == slot3:
                        if current_material == Dungeon.materials[0].name and slot3_cost <= Dungeon.materials[0].item.quantity and commited_slot3 == 'None':
                            commited_slot3 = str(slot3_cost) + ' ' + current_material
                            Dungeon.materials[0].item.quantity -= slot3_cost

                        elif current_material != Dungeon.materials[0].name and slot3_cost <= Dungeon.materials[i2].item.quantity and commited_slot3 == 'None':
                            if commited_slot3 != str(slot3_cost) + ' ' + current_material:
                                for i in range(len(Dungeon.materials)):
                                    try:
                                        if current_material == Dungeon.materials[i].name:
                                            Dungeon.materials[i].item.quantity -= slot3_cost
                                            break
                                    except:
                                        pass
                            commited_slot3 = str(slot3_cost) + ' ' + current_material

                        elif current_material == Dungeon.materials[0] and commited_slot3 != 'None':
                            craft_message("You already put materials in that slot.", libtcod.red)

                        

                        elif current_material == Dungeon.materials[0] and slot3_cost > number1:
                            craft_message("You don't have enough materials!", libtcod.red)
                            

                        elif current_material != Dungeon.materials[0] and slot3_cost > number2:
                            craft_message("You don't have enough materials!", libtcod.red)

                    if current_slot == slot4:
                        if commited_slot4 == 'None' and current_material != 'None':
                            
                            commited_slot4 = '1 ' + current_material

                            

                        elif commited_slot4 != 'None':
                            #Commit so that there is a counter so it can place string values correctly
                            if current_material in commited_slot4:
                                if len(amounts) > 0:
                                    
                                    if current_material == Dungeon.materials[0]:
                                        if int(commited_slot4[0]) == 1 and 2 <= number1:
                                            commited_slot4 = ('2' + commited_slot4[1:])
                                        elif int(commited_slot4[0]) == 2 and 3 <= number1:
                                            commited_slot4 = ('3' + commited_slot4[1:])

                                        elif int(commited_slot4[0]) == 3 and 4 <= number1:
                                            commited_slot4 = ('4' + commited_slot4[1:])

                                        elif int(commited_slot4[0]) == 4 and 5 <= number1:
                                            commited_slot4 = ('5' + commited_slot4[1:])
                                        
                                    else:
                                        if int(commited_slot4[0]) == 1 and 2 <= number2:
                                            commited_slot4 = ('2' + commited_slot4[1:])
                                        elif int(commited_slot4[0]) == 2 and 3 <= number2:
                                            commited_slot4 = ('3' + commited_slot4[1:])

                                        elif int(commited_slot4[0]) == 3 and 4 <= number2:
                                            commited_slot4 = ('4' + commited_slot4[1:])

                                        elif int(commited_slot4[0]) == 4 and 5 <= number2:
                                            commited_slot4 = ('5' + commited_slot4[1:])
                                    
                                            
                                                
                                
                if key.vk == libtcod.KEY_BACKSPACE and Crafting == True:
                    message('Derp')
                if key.vk == libtcod.KEY_BACKSPACE and len(name_thing) >= 1 and name == True and Crafting == True:
                    name_thing = name_thing[:-1]


                

                if Crafting == True:
                    

                    
                            
                        
                    
                    if len(name_thing) <= 31 and name == True and Crafting == True:
                        if key_char == 'a':
                            name_thing += 'a'
                            



                        elif key_char == 'A':
                            name_thing += 'A'

                        elif key_char == 'b':
                            name_thing += 'b'

                        elif key_char == 'B':
                            name_thing += 'B'

                        elif key_char == 'C':
                            name_thing += 'C'

                        elif key_char == 'c':
                            name_thing += 'c'

                        elif key_char == 'D':
                            name_thing += 'D'

                        elif key_char == 'd':
                            name_thing += 'd'

                        elif key_char == 'E':
                            name_thing += 'E'

                        elif key_char == 'e':
                            name_thing += 'e'

                        elif key_char == 'F':
                            name_thing += 'F'

                        elif key_char == 'f':
                            name_thing += 'f'

                        elif key_char == 'G':
                            name_thing += 'G'

                        elif key_char == 'g':
                            name_thing += 'g'

                        elif key_char == 'H':
                            name_thing += 'H'

                        elif key_char == 'h':
                            name_thing += 'h'

                        elif key_char == 'I':
                            name_thing += 'I'

                        elif key_char == 'i':
                            name_thing += 'i'

                        elif key_char == 'J':
                            name_thing += 'J'

                        elif key_char == 'j':
                            name_thing += 'j'

                        elif key_char == 'K':
                            name_thing += 'K'

                        elif key_char == 'k':
                            name_thing += 'k'

                        elif key_char == 'L':
                            name_thing += 'L'

                        elif key_char == 'l':
                            name_thing += 'l'

                        elif key_char == 'M':
                            name_thing += 'M'

                        elif key_char == 'm':
                            name_thing += 'm'

                        elif key_char == 'N':
                            name_thing += 'N'

                        elif key_char == 'n':
                            name_thing += 'n'

                        elif key_char == 'O':
                            name_thing += 'O'

                        elif key_char == 'o':
                            name_thing += 'o'

                        elif key_char == 'P':
                            name_thing += 'P'

                        elif key_char == 'p':
                            name_thing += 'p'

                        elif key_char == 'Q':
                            name_thing += 'Q'

                        elif key_char == 'q':
                            name_thing += 'q'

                        elif key_char == 'R':
                            name_thing += 'R'

                        elif key_char == 'r':
                            name_thing += 'r'

                        elif key_char == 'S':
                            name_thing += 'S'

                        elif key_char == 's':
                            name_thing += 's'

                        elif key_char == 'T':
                            name_thing += 'T'

                        elif key_char == 't':
                            name_thing += 't'

                        elif key_char == 'U':
                            name_thing += 'U'

                        elif key_char == 'u':
                            name_thing += 'u'

                        elif key_char == 'V':
                            name_thing += 'V'

                        elif key_char == 'v':
                            name_thing += 'v'

                        elif key_char == 'W':
                            name_thing += 'W'

                        elif key_char == 'w':
                            name_thing += 'w'

                        elif key_char == 'X':
                            name_thing += 'X'

                        elif key_char == 'x':
                            name_thing += 'x'

                        elif key_char == 'Y':
                            name_thing += 'Y'

                        elif key_char == 'y':
                            name_thing += 'y'

                        elif key_char == 'Z':
                            name_thing += 'Z'

                        elif key_char == 'z':
                            name_thing += 'z'



                        elif key_char == "'":
                            name_thing += "'"

                        elif key_char == '-':
                            name_thing += '-'

                        elif key.vk == libtcod.KEY_SPACE:
                            name_thing += ' '


            if Crafting == False and random == False:
                        
                    

                if key_char == '?':
                    if page == 0:
                        with open('derp.rtf') as f:
                            line = list(islice(f, 357, 387))
                        inspectus_menu('Which talent do you wish to know more about?', line, 68, 0)

                        

                        

                    if page == 1:
                        with open('derp.rtf') as f:
                            line = list(islice(f, 570, 601))
                        inspectus_menu('Which talent do you wish to know more about?', line, 68, 1)

                    if page == 2:
                        with open('derp.rtf') as f:
                            line = list(islice(f, 787, 820))
                        inspectus_menu('Which talent do you wish to know more about?', line, 68, 2)

                
                
                    
                    
                    
                    
                
                if key_char == 'x' and page < 4:
                    libtcod.console_clear(window)
                    libtcod.console_clear(0)
                    page += 1
                if key_char == 'z' and page <= 4:
                    if page == 1:
                        libtcod.console_clear(window)
                        libtcod.console_clear(0)
                        page = 0
                    elif page >= 2:
                        libtcod.console_clear(window)
                        libtcod.console_clear(0)
                        page -= 1

                
                if key_char == 'a' and page == 4:
                    if 'Block Talent 1' not in player.fighter.event:
                        
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 1')

                if key_char == 'b' and page == 4 and 'Block Talent 2' in player.fighter.event:
                    if 'Block Talent 3' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 3')

                if key_char == 'c' and page == 4 and 'Block Talent 1' in player.fighter.event:
                    if 'Block Talent 2' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 2')

                if key_char == 'g' and page == 4 and 'Block Talent 1' in player.fighter.event and 'Block Talent 2' in player.fighter.event:
                    if 'Block Talent 4' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 4')
                if key_char == 'k' and page == 4 and 'Block Talent 1' in player.fighter.event and 'Block Talent 2' in player.fighter.event and 'Block Talent 4' in player.fighter.event:
                    if 'Block Talent 6' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 6')
                if key_char == 'f' and page == 4 and 'Block Talent 2' in player.fighter.event and 'Block Talent 4' in player.fighter.event:
                    if 'Block Talent 5' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 5')

                if key_char == 'd' and page == 4 and 'Block Talent 1' in player.fighter.event:
                    if 'Block Talent 7' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 7')
                if key_char == 'e' and page == 4 and 'Block Talent 1' in player.fighter.event and 'Block Talent 7' in player.fighter.event:
                    if 'Block Talent 8' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 8')
                if key_char == 'h' and page == 4 and 'Block Talent 1' in player.fighter.event and 'Block Talent 7' in player.fighter.event:
                    if 'Block Talent 9' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 9')

                if key_char == 'm' and page == 4 and 'Block Talent 1' in player.fighter.event and 'Block Talent 9' in player.fighter.event:
                    if 'Block Talent 11' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 11')

                if key_char == 'i' and page == 4 and 'Block Talent 1' in player.fighter.event and 'Block Talent 9' in player.fighter.event:
                    if 'Block Talent 10' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Block Talent 10')


                # ABOVE IS FOR DEFENSE TALENTS

                if key_char == 'a' and page == 3:
                    if 'Off Talent 1' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 1')
                if key_char == 'b' and page == 3 and 'Off Talent 2' in player.fighter.event:
                    if 'Off Talent 3' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 3')

                if key_char == 'c' and page == 3 and 'Off Talent 1' in player.fighter.event:
                    if 'Off Talent 2' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 2')

                if key_char == 'g' and page == 3 and 'Off Talent 1' in player.fighter.event and 'Off Talent 2' in player.fighter.event:
                    if 'Off Talent 4' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 4')
                if key_char == 'k' and page == 3 and 'Off Talent 1' in player.fighter.event and 'Off Talent 2' in player.fighter.event and 'Off Talent 4' in player.fighter.event:
                    if 'Off Talent 6' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 6')
                if key_char == 'f' and page == 3 and 'Off Talent 2' in player.fighter.event and 'Off Talent 4' in player.fighter.event:
                    if 'Off Talent 5' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 5')

                if key_char == 'd' and page == 3 and 'Off Talent 1' in player.fighter.event:
                    if 'Off Talent 7' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 7')
                if key_char == 'e' and page == 3 and 'Off Talent 1' in player.fighter.event and 'Off Talent 7' in player.fighter.event:
                    if 'Off Talent 8' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 8')
                if key_char == 'h' and page == 3 and 'Off Talent 1' in player.fighter.event and 'Off Talent 7' in player.fighter.event:
                    if 'Off Talent 9' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 9')

                if key_char == 'm' and page == 3 and 'Off Talent 1' in player.fighter.event and 'Off Talent 9' in player.fighter.event:
                    if 'Off Talent 11' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 11')

                if key_char == 'i' and page == 3 and 'Off Talent 1' in player.fighter.event and 'Off Talent 9' in player.fighter.event:
                    if 'Off Talent 10' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Off Talent 10')

                #Above is for Dual Wield

                if key_char == 'a' and page == 2:
                    if 'Twoh Talent 1' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 1')
                if key_char == 'b' and page == 2 and 'Twoh Talent 2' in player.fighter.event:
                    if 'Twoh Talent 3' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 3')

                if key_char == 'c' and page == 2 and 'Twoh Talent 1' in player.fighter.event:
                    if 'Twoh Talent 2' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 2')

                if key_char == 'g' and page == 2 and 'Twoh Talent 1' in player.fighter.event and 'Twoh Talent 2' in player.fighter.event:
                    if 'Twoh Talent 4' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 4')
                if key_char == 'k' and page == 2 and 'Twoh Talent 1' in player.fighter.event and 'Twoh Talent 2' in player.fighter.event and 'Twoh Talent 4' in player.fighter.event:
                    if 'Twoh Talent 6' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 6')
                if key_char == 'f' and page == 2 and 'Twoh Talent 2' in player.fighter.event and 'Twoh Talent 4' in player.fighter.event:
                    if 'Twoh Talent 5' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 5')

                if key_char == 'd' and page == 2 and 'Twoh Talent 1' in player.fighter.event:
                    if 'Twoh Talent 7' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 7')
                if key_char == 'e' and page == 2 and 'Twoh Talent 1' in player.fighter.event and 'Twoh Talent 7' in player.fighter.event:
                    if 'Twoh Talent 8' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 8')
                if key_char == 'h' and page == 2 and 'Twoh Talent 1' in player.fighter.event and 'Twoh Talent 7' in player.fighter.event:
                    if 'Twoh Talent 9' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 9')

                if key_char == 'm' and page == 2 and 'Twoh Talent 1' in player.fighter.event and 'Twoh Talent 9' in player.fighter.event:
                    if 'Twoh Talent 11' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 11')

                if key_char == 'i' and page == 2 and 'Twoh Talent 1' in player.fighter.event and 'Twoh Talent 9' in player.fighter.event:
                    if 'Twoh Talent 10' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Twoh Talent 10')

                #Above is for two-handed

                if key_char == 'a' and page == 1:
                    if 'Ele Talent 1' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 1')
                if key_char == 'b' and page == 1 and 'Ele Talent 2' in player.fighter.event:
                    if 'Ele Talent 3' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 3')

                if key_char == 'c' and page == 1 and 'Ele Talent 1' in player.fighter.event:
                    if 'Ele Talent 2' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 2')

                if key_char == 'g' and page == 1 and 'Ele Talent 1' in player.fighter.event and 'Ele Talent 2' in player.fighter.event:
                    if 'Ele Talent 4' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 4')
                if key_char == 'k' and page == 1 and 'Ele Talent 1' in player.fighter.event and 'Ele Talent 2' in player.fighter.event and 'Ele Talent 4' in player.fighter.event:
                    if 'Ele Talent 6' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 6')
                if key_char == 'f' and page == 1 and 'Ele Talent 2' in player.fighter.event and 'Ele Talent 4' in player.fighter.event:
                    if 'Ele Talent 5' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 5')

                if key_char == 'd' and page == 1 and 'Ele Talent 1' in player.fighter.event:
                    if 'Ele Talent 7' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 7')
                if key_char == 'e' and page == 1 and 'Ele Talent 1' in player.fighter.event and 'Ele Talent 7' in player.fighter.event:
                    if 'Ele Talent 8' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 8')
                if key_char == 'h' and page == 1 and 'Ele Talent 1' in player.fighter.event and 'Ele Talent 7' in player.fighter.event:
                    if 'Ele Talent 9' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 9')

                if key_char == 'm' and page == 1 and 'Ele Talent 1' in player.fighter.event and 'Ele Talent 9' in player.fighter.event:
                    if 'Ele Talent 11' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 11')

                if key_char == 'i' and page == 1 and 'Ele Talent 1' in player.fighter.event and 'Ele Talent 9' in player.fighter.event:
                    if 'Ele Talent 10' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Ele Talent 10')

                #Above is for Elements


                if key_char == 'a' and page == 0:
                    if 'Unarmed Talent 1' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 1')
                if key_char == 'b' and page == 0 and 'Unarmed Talent 2' in player.fighter.event:
                    if 'Unarmed Talent 3' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 3')

                if key_char == 'c' and page == 0 and 'Unarmed Talent 1' in player.fighter.event:
                    if 'Unarmed Talent 2' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 2')

                if key_char == 'g' and page == 0 and 'Unarmed Talent 1' in player.fighter.event and 'Unarmed Talent 2' in player.fighter.event:
                    if 'Unarmed Talent 4' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 4')
                if key_char == 'k' and page == 0 and 'Unarmed Talent 1' in player.fighter.event and 'Unarmed Talent 2' in player.fighter.event and 'Unarmed Talent 4' in player.fighter.event:
                    if 'Unarmed Talent 6' not in player.fighter.event:

                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 6')
                if key_char == 'f' and page == 0 and 'Unarmed Talent 2' in player.fighter.event and 'Unarmed Talent 4' in player.fighter.event:
                    if 'Unarmed Talent 5' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 5')

                if key_char == 'd' and page == 0 and 'Unarmed Talent 1' in player.fighter.event:
                    if 'Unarmed Talent 7' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 7')
                if key_char == 'e' and page == 0 and 'Unarmed Talent 1' in player.fighter.event and 'Unarmed Talent 7' in player.fighter.event:
                    if 'Unarmed Talent 8' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 8')
                if key_char == 'h' and page == 0 and 'Unarmed Talent 1' in player.fighter.event and 'Unarmed Talent 7' in player.fighter.event:
                    if 'Unarmed Talent 9' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 9')

                if key_char == 'm' and page == 0 and 'Unarmed Talent 1' in player.fighter.event and 'Unarmed Talent 9' in player.fighter.event:
                    if 'Unarmed Talent 11' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 11')

                if key_char == 'i' and page == 0 and 'Unarmed Talent 1' in player.fighter.event and 'Unarmed Talent 9' in player.fighter.event:
                    if 'Unarmed Talent 10' not in player.fighter.event:
                        if player.fighter.Talent_Points >= 1:
                            player.fighter.Talent_Points -= 1
                            player.fighter.event.append('Unarmed Talent 10')

            #Above is for Unarmed

            #Reflect Spell = 9
            #Mirror Shield = 11
            #Reduce Stun Cost = 10


def buff_list():
    thing = ''
    if len(player.fighter.Buffs) > 0:
        
        listofdoom = []
        try:
            listofdoom.append(player.fighter.Buffs[0])
        except:
            return thing
        try:
            listofdoom.append(player.fighter.Buffs[1])
        except:
            pass
        try:
            listofdoom.append(player.fighter.Buffs[2])
        except:
            pass

        count = 0
        for i in listofdoom:
            thing += str(i.effect) + ' '
            thing += i.name
            thing += ' ' + '(' + str(i.duration) + ')'

            if len(player.fighter.Buffs) > 1 and count < len(listofdoom-1):
                thing += ', ' 

            count += 1
           
        
 
    return thing

def buff_second_row():
    thing = ''
    if len(player.fighter.Debuffs) > 3:
        listofdoom = []
        try:
            listofdoom.append(player.fighter.Debuffs[3])
        except:
            return thing
        try:
            listofdoom.append(player.fighter.Debuffs[4])
        except:
            pass
        try:
            listofdoom.append(player.fighter.Debuffs[5])
        except:
            pass


    return thing
    
def debuff_list():
    
    thing = ''
    if len(player.fighter.Debuffs) > 0:
        
        listofdoom = []
        try:
            listofdoom.append(player.fighter.Debuffs[0])
        except:
            return thing
        try:
            listofdoom.append(player.fighter.Debuffs[1])
        except:
            pass
        try:
            listofdoom.append(player.fighter.Debuffs[2])
        except:
            pass
           
        for i in listofdoom:
            if i.name != 'Soul Burn':
                thing += (i.name + ' (' + str(i.turns) + ') ')
                
                
            else:
                thing += (i.name + ' (-) ')
 
    return thing

def debuff_second_row():
    thing = ''
    if len(player.fighter.Debuffs) > 3:
        listofdoom = []
        try:
            listofdoom.append(player.fighter.Debuffs[3])
        except:
            return thing
        try:
            listofdoom.append(player.fighter.Debuffs[4])
        except:
            pass
        try:
            listofdoom.append(player.fighter.Debuffs[5])
        except:
            pass
        
        for i in listofdoom:
            if i.name != 'Soul Burn':
                thing += (i.name + ' (' + str(i.turns) + ') ')
                
            else:
                thing += (i.name + ' (-) ')

    return thing
        

def damage_test(Left=None, Right=None, Both=None, comparing=False):
    global inventorylist, objects, player
    #Implement so that it can account for DW status by reduction of terms of Right hand Wep (Since RH is considered OH)
    procs = {"Earth Splitter": "Spawns lava patches in randomized small AoE that hurts ALL targets. Deals Hellfire Damage to Player."} 
    if(Right != None and Left == None):
        try:
            on_Hit = Right.proc_chanse
            if(on_Hit > 0):
                proc = procs.get(Right.name)
                #Find way to present the Proc info and Rest of the stats
                #to_crit=0, weapon_agi=0, weapon_str=0, 
                #Conceal_Bonus=0, armor_pen=0, weight=0
                #The above are the relevant things to put, in addition to the proc chanse and proc effect
                #Just return them in a format, read them and sort them out in the selection part
                #Update Message interface in actual Inv system as well to reflect inability to equip a item
                #Have weapon type returned as well
        except:
            on_Hit = "None"
            proc = "None"
        listOfStuff = []
        listOfStuff.append("Right Hand:")
        if(comparing == True):
            
            listOfStuff.append((Right.weapon_min + Right.weapon_str + Right.weapon_agi))
            listOfStuff.append((Right.weapon_max + Right.weapon_str + Right.weapon_agi))

            try:
                listOfStuff.append(Right.fire)
            except:
                listOfStuff.append(0)
            try:
                listOfStuff.append(Right.ice)
            except:
                listOfStuff.append(0)

            try:
                listOfStuff.append(Right.lightning)
            except:
                listOfStuff.append(0)

            try:
                listOfStuff.append(Right.spirit)
            except:
                listOfStuff.append(0)
            return listOfStuff
            
        minimum2 = Right[0].weapon_min + Right[0].weapon_str + Right[0].weapon_agi
        print "This is the values for wep min, wep str and wep agi : " + str(Right[0].weapon_min) + "/" + str(Right[0].weapon_str) + "/" + str(Right[0].weapon_agi)
        listOfStuff.append(minimum2)

        maximum2 = Right[0].weapon_max + Right[0].weapon_str + Right[0].weapon_agi
        listOfStuff.append(maximum2)

        try:
            listOfStuff.append(player.fighter.Right[0].fire)
        except:
            listOfStuff.append(0)
        
        try:
            listOfStuff.append(player.fighter.Right[0].ice)
        except:
            listOfStuff.append(0)

        try:
            listOfStuff.append(player.fighter.Right[0].lightning)
        except:
            listOfStuff.append(0)

        try:
            listOfStuff.append(player.fighter.Right[0].spirit)
        except:
            listOfStuff.append(0)

        return listOfStuff
    
    if(Left != None and Right == None):
        
        listOfStuff = []
        listOfStuff.append("Left Hand:")

        if(comparing == True):
            
            listOfStuff.append((Left.weapon_min + Left.weapon_str + Left.weapon_agi))
            listOfStuff.append((Left.weapon_max + Left.weapon_str + Left.weapon_agi))

            try:
                listOfStuff.append(Left.fire)
            except:
                listOfStuff.append(0)
            try:
                listOfStuff.append(Left.ice)
            except:
                listOfStuff.append(0)

            try:
                listOfStuff.append(Left.lightning)
            except:
                listOfStuff.append(0)

            try:
                listOfStuff.append(Left.spirit)
            except:
                listOfStuff.append(0)
            return listOfStuff
        minimum2 = Left[0].weapon_min + Left[0].weapon_str + Left[0].weapon_agi
        listOfStuff.append(minimum2)

        maximum2 = Left[0].weapon_max + Left[0].weapon_str + Left[0].weapon_agi
        listOfStuff.append(maximum2)

        try:
            listOfStuff.append(player.fighter.Left[0].fire)
        except:
            listOfStuff.append(0)
        
        try:
            listOfStuff.append(player.fighter.Left[0].ice)
        except:
            listOfStuff.append(0)

        try:
            listOfStuff.append(player.fighter.Left[0].lightning)
        except:
            listOfStuff.append(0)

        try:
            listOfStuff.append(player.fighter.Left[0].spirit)
        except:
            listOfStuff.append(0)

        return listOfStuff
    
    elif Both != None:

        listOfStuff = []
        listOfStuff.append("Both Hands:")
        if(comparing == True):
            
            listOfStuff.append((Both.weapon_min + Both.weapon_str + Both.weapon_agi))
            listOfStuff.append((Both.weapon_max + Both.weapon_str + Both.weapon_agi))

            try:
                listOfStuff.append(Both.fire)
            except:
                listOfStuff.append(0)
            try:
                listOfStuff.append(Both.ice)
            except:
                listOfStuff.append(0)

            try:
                listOfStuff.append(Both.lightning)
            except:
                listOfStuff.append(0)

            try:
                listOfStuff.append(Both.spirit)
            except:
                listOfStuff.append(0)
            return listOfStuff
        minimum2 = Both[0].weapon_min + Both[0].weapon_str + Both[0].weapon_agi
        listOfStuff.append(minimum2)

        maximum2 = Both[0].weapon_max + Both[0].weapon_str + Both[0].weapon_agi
        listOfStuff.append(maximum2)

        try:
            listOfStuff.append(Both[0].fire)
        except:
            listOfStuff.append(0)
        
        try:
            listOfStuff.append(Both[0].ice)
        except:
            listOfStuff.append(0)

        try:
            listOfStuff.append(Both[0].lightning)
        except:
            listOfStuff.append(0)

        try:
            listOfStuff.append(Both[0].spirit)
        except:
            listOfStuff.append(0)

        return listOfStuff
            
            
        
        

    if len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:

        minimum2 = player.fighter.Left[0].weapon_min + player.fighter.Left[0].weapon_str + player.fighter.Left[0].weapon_agi
        maximum2 = player.fighter.Left[0].weapon_max + player.fighter.Left[0].weapon_str + player.fighter.Left[0].weapon_agi
        
         
        try:
            minimum2 += (player.fighter.Left[0].fire + player.fighter.Left[0].ice + player.fighter.Left[0].lightning + player.fighter.Left[0].spirit)
        except:
            pass
            
        try:
            maximum2 += (player.fighter.Left[0].fire + player.fighter.Left[0].ice + player.fighter.Left[0].lightning + player.fighter.Left[0].spirit)
        except:
            pass

        thing = 'Left Hand: ' + str(minimum2) + ' to ' + str(maximum2)

        if len(player.fighter.Right) > 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None:
            minimum = player.fighter.Right[0].weapon_min + player.fighter.Right[0].weapon_str + player.fighter.Right[0].weapon_agi
            maximum = player.fighter.Right[0].weapon_max + player.fighter.Right[0].weapon_str + player.fighter.Right[0].weapon_agi
            
             
            try:
                minimum += (player.fighter.Right[0].fire + player.fighter.Right[0].ice + player.fighter.Right[0].lightning + player.fighter.Right[0].spirit)
            except:
                pass
                
            try:
                maximum += (player.fighter.Right[0].fire + player.fighter.Right[0].ice + player.fighter.Right[0].lightning + player.fighter.Right[0].spirit)
            except:
                pass

            thing += '/ Right Hand: ' + str(int(round(minimum/2))) + ' to ' + str(int(round(maximum/2)))

        return thing

    elif len(player.fighter.Left) == 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') != None:

        thing = 'Unarmed: ' + str(player.fighter.Base_Strength/5)

        return thing

    elif len(player.fighter.Right) == 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') != None:

        thing = 'Unarmed: ' + str(player.fighter.Base_Strength/5)

        return thing
        
    
    elif len(player.fighter.Right) > 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None:
        minimum = player.fighter.Right[0].weapon_min + player.fighter.Right[0].weapon_str + player.fighter.Right[0].weapon_agi
        maximum = player.fighter.Right[0].weapon_max + player.fighter.Right[0].weapon_str + player.fighter.Right[0].weapon_agi
        
         
        try:
            minimum += (player.fighter.Right[0].fire + player.fighter.Right[0].ice + player.fighter.Right[0].lightning + player.fighter.Right[0].spirit)
        except:
            pass
            
        try:
            maximum += (player.fighter.Right[0].fire + player.fighter.Right[0].ice + player.fighter.Right[0].lightning + player.fighter.Right[0].spirit)
        except:
            pass

        thing = 'Right Hand: ' + str(minimum) + ' to ' + str(maximum)

        

        if len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:

            minimum2 = player.fighter.Left[0].weapon_min + player.fighter.Left[0].weapon_str + player.fighter.Left[0].weapon_agi
            maximum2 = player.fighter.Left[0].weapon_max + player.fighter.Left[0].weapon_str + player.fighter.Left[0].weapon_agi
            
             
            try:
                minimum2 += (player.fighter.Left[0].fire + player.fighter.Left[0].ice + player.fighter.Left[0].lightning + player.fighter.Left[0].spirit)
            except:
                pass
                
            try:
                maximum2 += (player.fighter.Left[0].fire + player.fighter.Left[0].ice + player.fighter.Left[0].lightning + player.fighter.Left[0].spirit)
            except:
                pass

            thing += '/ Left Hand: ' + str(int(round(minimum2/2))) + ' to ' + str(int(round(maximum2/2)))
        
        return thing
    elif len(player.fighter.Both) > 0:
        minimum = player.fighter.Both[0].weapon_min + player.fighter.Both[0].weapon_str + player.fighter.Both[0].weapon_agi
        maximum = player.fighter.Both[0].weapon_max + player.fighter.Both[0].weapon_str + player.fighter.Both[0].weapon_agi
        
         
        try:
            minimum += (player.fighter.Both[0].fire + player.fighter.Both[0].ice + player.fighter.Both[0].lightning + player.fighter.Both[0].spirit)
        except:
            pass
            
        try:
            maximum += (player.fighter.Both[0].fire + player.fighter.Both[0].ice + player.fighter.Both[0].lightning + player.fighter.Both[0].spirit)
        except:
            pass

        thing = 'Both Hands: ' + str(minimum) + ' to ' + str(maximum)

        return thing
    elif len(player.fighter.Right) == 0 and len(player.fighter.Left) == 0:
        thing = 'Unarmed: ' + str(player.fighter.Base_Strength/5)

        return thing

    thing = 'Shields cause no damage.'

    return thing
        
                
def crit_test():
    left = None
    right = None
    if len(player.fighter.Left) == 0 and len(player.fighter.Right) == 0:
        thing = 'Chanse to crit with Unarmed: 5%'
        return thing
    elif len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:
        left = player.fighter.Left[0].to_crit
        if len(player.fighter.Right) > 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None:
            right = player.fighter.Right[0].to_crit

        if right != None:
            thing = 'Crit for ' + player.fighter.Left[0].name + ': ' + str(left) + '%/ ' + player.fighter.Right[0].name + ':' + str(right) + '%'
        else:
            thing = 'Crit for ' + player.fighter.Left[0].name + ': ' + str(left) + '%'

        return thing

    elif len(player.fighter.Right) > 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None:
        right = player.fighter.Right[0].to_crit
        if len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None:
            left = player.fighter.Left[0].to_crit

        if left != None:
            thing = 'Crit for ' + player.fighter.Right[0].name + ': ' + str(right) + '%/ ' + player.fighter.Left[0].name + ':' + str(left) + '%'
        else:
            thing = 'Crit for ' + player.fighter.Right[0].name + ': ' + str(right) + '%'

        return thing

    else:
        if len(player.fighter.Right) > 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') != None:
            if len(player.fighter.Left) == 0:
                thing = 'Chanse to crit with Unarmed: 5%'
                return thing
            elif len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') != None:
                thing = 'You cannot crit with Dual-shields.'
                return thing
        elif len(player.fighter.Left) > 0 and get_equipped_in_left_slot(player.fighter.Left, 'Shield') != None:
            if len(player.fighter.Right) == 0:
                thing = 'Chanse to crit with Unarmed: 5%'
                return thing
            elif len(player.fighter.Right) > 0 and get_equipped_in_left_slot(player.fighter.Right, 'Shield') != None:
                thing = 'You cannot crit with Dual-shields.'
                return thing
        
    
##    get_equipped_in_left_slot(player.fighter.Right, 'Shield') == None or get_equipped_in_left_slot(player.fighter.Left, 'Shield') == None
    
                
  
def poop_test():

    global mouse, hit_name
    #return a string with the names of all objects under the mouse

    (x, y) = (mouse.cx, mouse.cy)

    names = [obj.name for obj in objects
             if obj.x == x and obj.y == y and obj.item == None and libtcod.map_is_in_fov(fov_map, obj.x, obj.y)]
    
    try:
        dodge = [obj.fighter.evade for obj in objects
                 if obj.x == x and obj.y == y and obj.item == None and libtcod.map_is_in_fov(fov_map, obj.x, obj.y)]
    except:
        pass

    try:
        hit_name = names[0]
    except:
        if len(hit_name) >= 1:
            pass
        else:
            hit_name = ''

    hit_chanse = 100 - 25 + (player.fighter.Base_Agility)
  
    try:
        hit_chanse -= dodge[0]
    except:
        pass

    if len(hit_name) == 0:
        stuff = 'Your base chanse to hit is: ' + str(hit_chanse) + '%'

    else:
        stuff = 'Your chanse to hit ' + hit_name + ':' + str(hit_chanse) + '%'

    return stuff

    

    #print the header, with auto-wrap


    
def inspectus_menu(header, options, width, page, key1=None, key1_x=0, key1_y=0, key1_color=None, key2=None, key2_x=0, key2_y=0, key3=None, key3_x=0, key3_y=0, key4=None,
                   key4_x=0, key4_y=0, option1=None, option2=None, option3=None, option4=None, option1_text='', option2_text='', option3_text='', option4_text='',
                   option1_difficulty=0, option2_difficulty=0, option3_difficulty=0, option4_difficulty=0, fee1=0, fee2=0, fee3=0, fee4=0, currency1='', currency2='', currency3='',
                   currency4=''):

    img = libtcod.image_load('black_background.png')

    libtcod.image_blit_2x(img, 0, 0, 0, sx=0, sy=0, w=-1, h=-1)

    libtcod.image_blit_2x(img, 0, 50, 0, sx=0, sy=0, w=-1, h=-1)

    

    #calculate total height for the header (after auto-wrap) and one line per option
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0
    height = len(options) + header_height

    #create an off-screen console that represents the menu's window
    window = libtcod.console_new(110, 90)


    #print the header, with auto-wrap

    factor = 0
        

    libtcod.console_print_rect_ex(window, 35, 15, width, height, libtcod.black, libtcod.LEFT, header)

    #print all the options
    y = 20
    for option_text in options:
        text = option_text
        libtcod.console_print_ex(window, 20, y, libtcod.BKGND_NONE, libtcod.LEFT, text)
        y += 1


    if key1 != None:
        libtcod.console_set_default_foreground(window, key1_color)
        libtcod.console_print_ex(window, key1_x, key1_y, libtcod.BKGND_NONE, libtcod.LEFT, key1)
        libtcod.console_set_default_foreground(window, libtcod.white)

    if key2 != None:
        libtcod.console_print_ex(window, key2_x, key2_y, libtcod.BKGND_NONE, libtcod.LEFT, key2)

    if key3 != None:
        libtcod.console_print_ex(window, key3_x, key3_y, libtcod.BKGND_NONE, libtcod.LEFT, key3)

    if key4 != None:
        libtcod.console_print_ex(window, key4_x, key4_y, libtcod.BKGND_NONE, libtcod.LEFT, key4)

    for i in range(0,5):
        check = None
        if i == 1:
            check = option1
            if fee1 == 0:
                check2 = option1_text
            else:
                if currency1 == 'Gold':
                    check2 = '(' + str(fee1) + ' ' + str(currency1) + ', Have: ' +str(player.fighter.gold) + ')'
            difficulty = option1_difficulty
        elif i == 2:
            check = option2
            if fee2 == 0:
                check2 = option2_text
            else:
                if currency2 == 'Gold':
                    check2 = '(' + str(fee2) + ' ' + str(currency2) + ', Have: ' +str(player.fighter.gold) + ')'
            difficulty = option2_difficulty
        elif i == 3:
            check = option3
            if fee3 == 0:
                check2 = option3_text
            else:
                if currency3 == 'Gold':
                    check2 = '(' + str(fee3) + ' ' + str(currency3) + ', Have: ' +str(player.fighter.gold) + ')'
            difficulty = option3_difficulty
        elif i == 4:
            check = option4
            if fee4 == 0:
                check2 = option4_text
            else:
                if currency4 == 'Gold':
                    check2 = '(' + str(fee4) + ' ' + str(currency4) + ', Have: ' +str(player.fighter.gold) + ')'
            difficulty = option4_difficulty
        if check != None:

            requirement = difficulty
            
            
            if 'Brawn' in check:
                color = libtcod.red
                
                difficulty = difficulty - player.fighter.Base_Strength
                

            elif 'Diplomacy (Skill):' in check:
                color = libtcod.light_cyan
                difficulty = difficulty - Dungeon.skill_numbers[5]
            elif 'Pay the Fee' in check:
                color = libtcod.light_green
                difficulty = None
                
            else:
                color = libtcod.white

            
            if difficulty != None:
                if difficulty <= 0:
                    difficulty = 100

                else:
                    difficulty = 100 - (difficulty*20)
                    if difficulty <= 0:
                        difficulty = 'Min Req: ' + str(requirement - 4)

            
            
            

            libtcod.console_set_default_foreground(window, color)
                
            if type(difficulty) == int:
                libtcod.console_print_ex(window, 20, 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, '(Reqs ' + str(requirement) + ', ' + str(difficulty) + '%' + ')' + check)
            else:
                if difficulty != None:
                    libtcod.console_set_default_foreground(window, libtcod.grey)
                    libtcod.console_print_ex(window, 20, 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, '(' + str(difficulty) + ') ' + check)
                else:
                    
                    libtcod.console_print_ex(window, 20, 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check)
            libtcod.console_set_default_foreground(window, libtcod.white)
            
            if len(check2) > 41:
                factor += 1
                libtcod.console_print_ex(window, 20+len(check) + 3 + len(str(difficulty)), 20 + len(options) + i - 1, libtcod.BKGND_NONE, libtcod.LEFT, check2[:41])
                libtcod.console_print_ex(window, 20, 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check2[41:])
            else:
                if i == 1:
                    if fee1 == 0:
                        account = len(('(Reqs ' + str(requirement) + ', ' + str(difficulty) + '%' + ')'))
                        libtcod.console_print_ex(window, 20 + len(check) + account, 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check2)
                    else:
                        libtcod.console_print_ex(window, 20+len(check) + 1, 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check2)
                elif i == 2:
                    if fee2 == 0:
                        libtcod.console_print_ex(window, 20+len(check) + 3 + len(str(difficulty)), 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check2)
                    else:
                        libtcod.console_print_ex(window, 20+len(check) + 1, 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check2)
                elif i == 3:
                    if fee3 == 0:
                        libtcod.console_print_ex(window, 20+len(check) + 3 + len(str(difficulty)), 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check2)
                    else:
                        libtcod.console_print_ex(window, 20+len(check) + 1, 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check2)
                elif i == 4:
                    if fee4 == 0:
                        libtcod.console_print_ex(window, 20+len(check) + 3 + len(str(difficulty)), 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check2)
                    else:
                        libtcod.console_print_ex(window, 20+len(check) + 1, 20 + len(options) + i - 1 + factor, libtcod.BKGND_NONE, libtcod.LEFT, check2)



    #blit the contents of "window" to the root console
    x = SCREEN_WIDTH/2 - 30
    y = SCREEN_HEIGHT/2 - 15
    libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)

    #present the root console to the player and wait for a key-press
    libtcod.console_flush()
    key = libtcod.Key()

    mouse = libtcod.Mouse()
    factor = None
    while factor == None:
        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS | libtcod.EVENT_MOUSE, key, mouse)
        key_char = chr(key.c)

        if page == 0:
            if key_char == 'a':
                with open('derp.rtf') as f:
                    line = list(islice(f, 389, 413))
                inspect_menu('Sneak', line, 80)
                
                factor = 1

            if key_char == 'b':
                with open('derp.rtf') as f:
                    line = list(islice(f, 435, 449))
                inspect_menu('Code of the Thief', line, 80)
                
                factor = 1

            if key_char == 'c':
                with open('derp.rtf') as f:
                    line = list(islice(f, 414, 435))
                inspect_menu('Dirty Tricks', line, 80)
                
                factor = 1

            if key_char == 'd':
                with open('derp.rtf') as f:
                    line = list(islice(f, 450, 466))
                inspect_menu('Gouge', line, 80)
                
                factor = 1

            if key_char == 'e':
                with open('derp.rtf') as f:
                    line = list(islice(f, 467, 487))
                inspect_menu('Venoms', line, 80)
                
                factor = 1
            if key_char == 'h':
                with open('derp.rtf') as f:
                    line = list(islice(f, 488, 502))
                inspect_menu('Perfect Strike', line, 80)
                
                factor = 1

            if key_char == 'i':
                with open('derp.rtf') as f:
                    line = list(islice(f, 502, 516))
                inspect_menu('Slice Nerve', line, 80)
                
                factor = 1

            if key_char == 'g':
                with open('derp.rtf') as f:
                    line = list(islice(f, 517, 526))
                inspect_menu('Dancing Shadow', line, 80)
                
                factor = 1
            if key_char == 'f':
                with open('derp.rtf') as f:
                    line = list(islice(f, 526, 541))
                inspect_menu('Lord/Queen of Shadows', line, 80)
                
                factor = 1
            if key_char == 'k':
                with open('derp.rtf') as f:
                    line = list(islice(f, 542, 559))
                inspect_menu('Living Darkness', line, 80)
                
                factor = 1

            if key_char == 'm':
                with open('derp.rtf') as f:
                    line = list(islice(f, 560, 568))
                inspect_menu('Coup De Grace', line, 80)
                
                factor = 1
        elif page == 1:

            if key_char == 'a':
                with open('derp.rtf') as f:
                    line = list(islice(f, 608, 631))
                inspect_menu('Taste for Blood', line, 80)
                
                factor = 1

            if key_char == 'b':
                with open('derp.rtf') as f:
                    line = list(islice(f, 648, 657))
                inspect_menu('Battle Rage', line, 80)
                
                factor = 1

            if key_char == 'c':
                with open('derp.rtf') as f:
                    line = list(islice(f, 632, 648))
                inspect_menu('Cull the Weak', line, 80)
                
                factor = 1

            if key_char == 'd':
                with open('derp.rtf') as f:
                    line = list(islice(f, 657, 666))
                inspect_menu('Frenzy', line, 80)
                
                factor = 1

            if key_char == 'e':
                with open('derp.rtf') as f:
                    line = list(islice(f, 666, 685))
                inspect_menu('Blood Craze', line, 80)
                
                factor = 1
            if key_char == 'h':
                with open('derp.rtf') as f:
                    line = list(islice(f, 730, 744))
                inspect_menu('Sadism', line, 80)
                
                factor = 1

            if key_char == 'i':
                with open('derp.rtf') as f:
                    line = list(islice(f, 744, 765))
                inspect_menu('Massochism', line, 80)
                
                factor = 1

            if key_char == 'g':
                with open('derp.rtf') as f:
                    line = list(islice(f, 685, 700))
                inspect_menu('Break Bones', line, 80)
                
                factor = 1
            if key_char == 'f':
                with open('derp.rtf') as f:
                    line = list(islice(f, 701, 712))
                inspect_menu('Break Spirit', line, 80)
                
                factor = 1
            if key_char == 'k':
                with open('derp.rtf') as f:
                    line = list(islice(f, 713, 730))
                inspect_menu('Drums of War', line, 80)
                
                factor = 1

            if key_char == 'm':
                with open('derp.rtf') as f:
                    line = list(islice(f, 766, 785))
                inspect_menu('Death and Glory', line, 80)
                
                factor = 1
        elif page == 2:

            if key_char == 'a':
                with open('derp.rtf') as f:
                    line = list(islice(f, 787, 820))
                inspect_menu('Untapped Power', line, 80)
                
                factor = 1

            if key_char == 'b':
                with open('derp.rtf') as f:
                    line = list(islice(f, 435, 449))
                inspect_menu('Battle Rage', line, 80)
                
                factor = 1

            if key_char == 'c':
                with open('derp.rtf') as f:
                    line = list(islice(f, 414, 435))
                inspect_menu('Cull the Weak', line, 80)
                
                factor = 1

            if key_char == 'd':
                with open('derp.rtf') as f:
                    line = list(islice(f, 450, 466))
                inspect_menu('Frenzy', line, 80)
                
                factor = 1

            if key_char == 'e':
                with open('derp.rtf') as f:
                    line = list(islice(f, 467, 487))
                inspect_menu('Blood Craze', line, 80)
                
                factor = 1
            if key_char == 'h':
                with open('derp.rtf') as f:
                    line = list(islice(f, 488, 502))
                inspect_menu('Sadism', line, 80)
                
                factor = 1

            if key_char == 'i':
                with open('derp.rtf') as f:
                    line = list(islice(f, 502, 516))
                inspect_menu('Massochism', line, 80)
                
                factor = 1

            if key_char == 'g':
                with open('derp.rtf') as f:
                    line = list(islice(f, 517, 526))
                inspect_menu('Break Bones', line, 80)
                
                factor = 1
            if key_char == 'f':
                with open('derp.rtf') as f:
                    line = list(islice(f, 526, 541))
                inspect_menu('Break Spirit', line, 80)
                
                factor = 1
            if key_char == 'k':
                with open('derp.rtf') as f:
                    line = list(islice(f, 542, 559))
                inspect_menu('Drums of War', line, 80)
                
                factor = 1

            if key_char == 'm':
                with open('derp.rtf') as f:
                    line = list(islice(f, 560, 568))
                inspect_menu('Death and Glory', line, 80)
                
                factor = 1

        elif page == 3:
            if key_char == 'y':
                factor = 1
                with open('derp.rtf') as f:
                    line = list(islice(f, 928, 941))
                inspectus_menu('Yes, i will help you.', line, 68, 4)
            if key_char == 'n':
                factor = 1
                message("Dying Man: East.. Far.. East.. The Ruins..", libtcod.red)
                message("The Dying Man passes out.", libtcod.red)
                player.fighter.event.append('Garret Passed Out')

        elif page == 4:
            if key_char == 'a':
                factor = 1
                with open('derp.rtf') as f:
                    line = list(islice(f, 941, 953))
                string = player.fighter.Name
                inspectus_menu('My name is ' + string, line, 68, 5)
            if key_char == 'b':
                factor = 1
                with open('derp.rtf') as f:
                    line = list(islice(f, 941, 953))

                factor = libtcod.random_get_int(0, 0, 5)
                if player.fighter.Gender == 'Male':
                    if factor == 0:
                        random = 'Sven'
                    elif factor == 1:
                        random = 'Alhir'
                    elif factor == 2:
                        random = 'Dalred'
                    elif factor == 3:
                        random = 'Richard'
                    elif factor == 4:
                        random = 'Sigfreud'
                    elif factor == 5:
                        random = 'Halmund'
                elif player.fighter.Gender == 'Female':
                    if factor == 0:
                        random = 'Justinia'
                    elif factor == 1:
                        random = 'Elize'
                    elif factor == 2:
                        random = 'Victoria'
                    elif factor == 3:
                        random = 'Juliett'
                    elif factor == 4:
                        random = 'Holga'
                    elif factor == 5:
                        random = 'Anette'
                inspectus_menu('My name is ' + random, line, 68, 5)
            if key_char == 'c':
                factor = 1
                with open('derp.rtf') as f:
                    line = list(islice(f, 941, 953))
                inspectus_menu('...', line, 68, 5)

        elif page == 5:
            if key_char == 'a':
                factor = 1
                with open('derp.rtf') as f:
                    line = list(islice(f, 953, 971))
                inspectus_menu('..Are you alright..?', line, 68, 6)
            if key_char == 'b':
                factor = 1
                with open('derp.rtf') as f:
                    line = list(islice(f, 953, 971))
                inspectus_menu('Look, we HAVE to go!', line, 68, 6)
            if key_char == 'c':
                factor = 1
                with open('derp.rtf') as f:
                    line = list(islice(f, 953, 971))
                inspectus_menu('At least you are alive!', line, 68, 6)
        elif page == 6:
            if key_char == 'a':
                factor = 1
                with open('derp.rtf') as f:
                    lines = list(islice(f, 971, 976))
                inspect_menu('What.. "things"?', lines, 60)
                message('The man prepares a spell.')
                message('???: If you wish to live to see another day..', libtcod.red)
                message('???: Head east. Look for the ruins.', libtcod.red)
                message('The man teleports out.')

                player.fighter.event.append('Saved Garret')
            if key_char == 'b':
                factor = 1
                with open('derp.rtf') as f:
                    lines = list(islice(f, 971, 976))
                inspect_menu('WE HAVE TO GO!', lines, 60)
                message('The man prepares a spell.')
                message('???: If you wish to live to see another day..', libtcod.red)
                message('???: Head east. Look for the ruins.', libtcod.red)
                message('The man teleports out.')
                
                player.fighter.event.append('Saved Garret')
            if key_char == 'c':
                factor = 1
                with open('derp.rtf') as f:
                    lines = list(islice(f, 971, 976))
                inspect_menu('Tragic, but it happens.', lines, 60)
                message('The man prepares a spell.')
                message('???: If you wish to live to see another day..', libtcod.red)
                message('???: Head east. Look for the ruins.', libtcod.red)
                message('The man teleports out.')

                player.fighter.event.append('Saved Garret')

            

            for i in objects:
                if i.name == 'Dying Man':
                    objects.remove(i)
                    message('You gain 500 xp!', libtcod.green)
                    player.fighter.xp += 500
                    break

        elif page == 7:
            if key_char == 'a':

                if time_roll(thing = (player.fighter.Base_Strength - 15), factor=20):
                    message('Success')
                else:
                    message('Failure')
                break
                
            
        elif page == 20:
            if key_char == 'z':
                factor = 1

def time_roll(thing, factor):
    if (thing*factor) <= -100:
        return False
    if thing >= 0:
        return True
    
    if (thing*factor) > -100 and (thing*factor) < 0:
        roll_1 = thing*factor
        
        time_roll = libtcod.random_get_int(0, -1, -100)
        
        if time_roll >= roll_1:
            return True
        else:
            return False
            
    


def load_painted_map():

    global map, objects, stairs_out
    

    FILE = open("Arena Map.txt", 'r')

    map = cPickle.load(FILE)
    objects = cPickle.load(FILE)

    FILE.close()

    for i in objects:
        if i.x == 10 and i.y == 10 and i.name == 'player':
            objects.remove(i)

    player.x = 10
    player.y = 10

    

    
    Dungeon.Terrain_type = 'Pits of Despair'

    fighter_component = Monster(hp=30, defense=3, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=50, level=1,
                                    min_dam=5, max_dam=10, minimum_hit=60,race='Beast', death_function=monster_death)
    ai_component = BasicMonster()

    monster = Object(37, 15, 'g', 'Hirachi', libtcod.yellow,
                     blocks=True, fighter=fighter_component, ai=ai_component)

    objects.append(monster)

    stairs_out = Object(59, 39, '<', 'stairs', libtcod.white, always_visible=True)
    objects.append(stairs_out)
    stairs_out.send_to_back()

    item_component = Item(defense_bonus=0, slot='Not Equipable', use_function=None, eat_function=None)
    item = Object(9, 39, ']', "'Garret's Journal 1/2", libtcod.yellow,slot='Not Equipable', weight=1, weapon_type='', item=item_component)

    objects.append(item)

##    stairs_in.x = 0
##    stairs_in.y = 0


def special_move(target_x=None, target_y=None, special_x=None, special_y=None):
    
    if special_x == None:
        x = player.x
    else:
        x = special_x
    if special_y == None:
        y = player.y
    else:
        y = special_y
    dx = target_x - x
    dy = target_y - y
    distance = math.sqrt((dx ** 2) + (dy ** 2))
    distance = int(distance)
    return distance

def shitstorm():
    count = 0
    for i in Dungeon.skills:
        try:
            Dungeon.skill_numbers[count] = 0
            ['Acrobatics (Str + Agi)', 'Alchemy (Int + Spi)', 'Bluffing (Int + Lu)', 'Climbing (Str + End)', 'Disguise (Int + Lu)',  'Cooking (Lu)', 'Gathering (Int)',
                      'Lockpicking (Agi + Lu)', 'Stealth (Agi)', 'Sleight of Hand (Agi + Lu)', 'Perception (Int)',
                      'Diplomacy (Int + Spi)', 'Intimidate (Str + End)',
                      'Poisons (Agi)', 'Writing (Int)', 'Swimming (Str + Agi)', 'Tracking (Lu)', 'Runes (Int)', 'Conditioning (End)',
                      'Recovery (End + Spi)', 'Healing Arts (Int)', 'Gambling (Int)', 'Piety (Spi)', 'Packing (Int)', 'Knowledge- Dragons (Int)',
                      'Salvage (Lu)', 'Spellweaving (Int)', 'Siphon (Spi)', 'Quick Feet (Agi)', 'Warcries (End)', 'Throwing (Agi)', 'Expel Corruption (Spi)', 'Sense Demons (Spi)', 
                      'Shady Dealings (Lu)', 'Knowledge- Arcane (Int)', 'Knowledge- Demons (Int)',  'Knowledge- Dungeons (Int)', 'Knowledge- Nature (Int)', 'Knowledge- Tribes (Int)']
        except:
            
                
            if '(Str + End)' in i:
                Dungeon.skill_numbers.append(player.fighter.Strength/2 + player.fighter.Endurance/2)
            elif '(Str + Agi)' in i:
                Dungeon.skill_numbers.append(player.fighter.Strength/2 + player.fighter.Agility/2)
            elif '(Str)' in i:
                Dungeon.skill_numbers.append(player.fighter.Strength)
            elif '(Agi + Lu)' in i:
                Dungeon.skill_numbers.append(player.fighter.Agility/2 + player.fighter.Luck/2)
            elif '(Agi)' in i:
                Dungeon.skill_numbers.append(player.fighter.Agility)

            elif '(End + Spi)' in i:
                Dungeon.skill_numbers.append(player.fighter.Endurance/2 + player.fighter.Spirit/2)
            elif '(End)' in i:
                Dungeon.skill_numbers.append(player.fighter.Endurance)

            elif '(Int + Lu)' in i:
                Dungeon.skill_numbers.append(player.fighter.Intellect/2 + player.fighter.Luck/2)

            elif '(Int + Spi)' in i:
                Dungeon.skill_numbers.append(player.fighter.Intellect/2 + player.fighter.Spirit/2)

            elif '(Int)' in i:
                Dungeon.skill_numbers.append(player.fighter.Intellect)

            elif '(Spi)' in i:
                Dungeon.skill_numbers.append(player.fighter.Spirit)

            elif '(Lu)' in i:
                Dungeon.skill_numbers.append(player.fighter.Luck)
                

                
        count += 1

    letter_index = ord('a')
    count = 0
    for i in Dungeon.skills:
        
        Dungeon.skills[count] = chr(letter_index) + ')' + i
        letter_index += 1
        count += 1
            



def new_game():
    global player, game_msgs, game_state, dungeon_level, inventorylist, shop_msgs, craft_msgs, equip_msgs, game_msgs2, combat_msgs, combat_log, combat_keywords

    

    Message.x = 0
    Message.y = 0
    Message.color = libtcod.white
    Message.string = ''
    Debuff.source = ''
    Debuff.other_color = libtcod.white

    Debuff.healing = 0

    #create object representing the player

    player.level = 1
    Quest.Range = 0
    Debuff.color = libtcod.white
    Dungeon.currencies = {}
    Debuff.Dispelable = False
    Debuff.reduction1 = 0
    Debuff.reduction2 = 0
    Debuff.reduction3 = 0
    Debuff.reduction4 = 0
    Debuff.Stat1 = None
    Debuff.Stat2 = None
    Debuff.Stat3 = None
    Debuff.Stat4 = None
    Debuff.dispel_list = []
    Dungeon.move = {}
    Dungeon.debuffs = []
    Quest.completed = []
    Quest.rewards = []
    Quest.error = []
    Buff.buffs = []

    Dungeon.dungeon_level = 1
    Dungeon.reputations = {}
    Dungeon.original_recipies=[]
    Dungeon.Spread = []
    Dungeon.count = 1
    Dungeon.Cooking = []
    Dungeon.stuff = []
    Dungeon.temp3 = []
    Dungeon.Special = []
    Dungeon.explored = []

    Dungeon.Terrain_list = []
    Dungeon.Terrain_list2 = []
    Dungeon.Dungeon_spawn = []
    Dungeon.Rivers = libtcod.random_get_int(0, 0, 5)
    Dungeon.mountain_density = []
    Dungeon.mountain_size = []
    Dungeon.forest_density = []
    Dungeon.pot_list = []
    Dungeon.copy = []
    Debuff.debuffs = []
    Debuff.amounts = {}
    Debuff.reduction = 0
    Debuff.turns = 0
    Debuff.tick = 0
    Dungeon.Terrain_type = 'Random'
    Dungeon.helm_info = ''
    Dungeon.temp = ''

    Dungeon.Shop = []
    
    Dungeon.poop = 0
    Dungeon.age = ''
    Dungeon.materials = []
    Dungeon.recipies = []
    Dungeon.journal = ''
    
    

    Quest.Quest_name = []
    Quest.Quest_Main = []
    Quest.Quest_Second = []

    Energy.energy = 0

    Sound.E = 0
    Sound.W = 0
    Sound.N = 0
    Sound.S = 0

    Weather.wind_strength = 0
    Weather.wind_direction = None
    Weather.rain_strength = 0
    Weather.thunder_strength = 0
    Weather.snow_strength = 0
    Weather.temprature = 0

    
    


    #generate map (at this point it's not drawn to the screen)
    Dungeon.dungeon_level = 1
    if player.fighter.Sub_race == 'Child of the Order':
        load_painted_map()
##        try:
##            west_gate()
##        except Exception as e:
##            print(str(e))
            
        

    else:
        make_map()
        Dungeon.Terrain_type = 'Random'

    if player.fighter.Sub_race != 'Child of the Order':
        #save_map()
        pass
    initialize_fov()

    game_state = 'playing'
    inventorylist = [[]]


    #create the list of game messages and their colors, starts empty
    game_msgs = []

    combat_msgs = [] 
    combat_log = [] #Due to how Combat Messages work, we have to create a log that we can scale back to look at, through interactions
    combat_keywords = []

    game_msgs2 = []
    craft_msgs = []
    equip_msgs = []

    shop_msgs = []

    Dungeon.craft_list = []
    Dungeon.craft_names = []

    #a warm welcoming message!

    #initial equipment: a dagger

    

    mountain_density = libtcod.random_get_int(0, 120, 160)
    forest_density = libtcod.random_get_int(0, 500, 800)
    if forest_density % 2 > 0:
        forest_density += 1
    if mountain_density % 2 > 0:
        mountain_density += 1
        
    for i in range(forest_density):
        x = libtcod.random_get_int(0, 1, 93)
        y = libtcod.random_get_int(0, 1, 42)
        
        Dungeon.forest_density.append(x)
        Dungeon.forest_density.append(y)

    for i in range(forest_density*39): #60 length, 39 tiles with 2 co-ordinates each
        x = libtcod.random_get_int(0, -2, 2)
        y = libtcod.random_get_int(0, -2, 2)

        Dungeon.Spread.append(x)
        Dungeon.Spread.append(y)
        
    for i in range(mountain_density):
        x = libtcod.random_get_int(0, 1, 93)
        y = libtcod.random_get_int(0, 1, 42)
        Dungeon.mountain_density.append(x)
        Dungeon.mountain_density.append(y)
        size = libtcod.random_get_int(0, 1, 4)
        if size == 1:
            size = libtcod.random_get_int(0, 1, 9)
            Dungeon.mountain_size.append('Small part'+str(size))
        elif size == 2:
            size = libtcod.random_get_int(0, 1, 9)
            Dungeon.mountain_size.append('Medium part'+str(size))

        elif size == 3:
            size = libtcod.random_get_int(0, 1, 9)
            Dungeon.mountain_size.append('Large part'+str(size))

        elif size == 4:
            size = libtcod.random_get_int(0, 1, 9)
            Dungeon.mountain_size.append('Major part'+str(size))
            
            
        
        
    
    



    item_component = Item(defense_bonus=0, weapon_min=3, weapon_max=5, weapon_agi=int(round(player.fighter.Base_Agility/4)), worth=10,
                          weapon_str=int(round(player.fighter.Base_Strength/5)), proc_chanse=20, hit_effect=Earth_Splitter,
                          weapon_type='Axe', name='Earth Splitter', rarity='Artifact', slot='Right Hand', use_function=None, eat_function=None)
    obj = Object(0, 0, '/', 'Earth Splitter', libtcod.sky, id_number=1, slot='Right Hand', weight=30, weapon_type='Bladed', item=item_component)
    inventorylist[0].append(obj)
    obj.always_visible = False

    item_component = Item(defense_bonus=0, weapon_min=15, weapon_max=50, weapon_agi=0, worth=10,
                          weapon_str=0, proc_chanse=20, hit_effect=Earth_Splitter,
                          weapon_type='Hammer', name='Spirit Breaker', rarity='Artifact', slot='Right Hand', use_function=None, eat_function=None)
    obj = Object(0, 0, '/', 'Spirit Breaker', libtcod.sky, id_number=1, slot='Right Hand', weight=30, weapon_type='Blunt', item=item_component)
    inventorylist[0].append(obj)
    obj.always_visible = False
    
    
    item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)),
                      defense_bonus=0, weapon_min=3, weapon_max=5, weapon_agi=int(round(player.fighter.Base_Agility/4)),
    weapon_str=int(round(player.fighter.Base_Strength/5)), proc_chanse=20, hit_effect=Earth_Splitter, weapon_type='Axe', name='Earth Splitter', slot='Left Hand',
    rarity="Artifact", use_function=None, eat_function=None)
    obj = Object(0, 0, '/', 'Earth Splitter', libtcod.sky, slot='Left Hand', weight=30, weapon_type='Bladed', item=item_component)
    inventorylist[0].append(obj)
    obj.always_visible = False

    item_component = Item(defense_bonus=0, weapon_min=3, weapon_max=5, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                          weapon_str=int(round(player.fighter.Base_Strength/5)), weapon_type='Axe', name='Strange Key', slot='Right Hand', use_function=None, eat_function=None)
    obj = Object(0, 0, '/', 'Strange Key', libtcod.sky, id_number=1, slot='Right Hand', weight=30, weapon_type='Axe', item=item_component)
    inventorylist[0].append(obj)
    obj.always_visible = False

    

    item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)), weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                      weapon_str=int(round(player.fighter.Base_Strength/5)), worth=10, quantity=10, rarity='Material',
                      weapon_type='Axe', name='Bloodthistle', slot='Left Hand', use_function=None, eat_function=None)
    obj = Object(0, 0, '#', 'Bloodthistle', libtcod.grey, id_number=1, slot='Left Hand', weight=0, weapon_type='Axe', item=item_component)
    Dungeon.materials.append(obj)
    obj.always_visible = False

    item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)), weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                      weapon_str=int(round(player.fighter.Base_Strength/5)), worth=10, quantity=1, rarity='Material',
                      weapon_type='Axe', name='Shade Moss', slot='Left Hand', use_function=None, eat_function=None)
    obj = Object(0, 0, '#', 'Shade Moss', libtcod.grey, id_number=1, slot='Left Hand', weight=0, weapon_type='Axe', item=item_component)
    Dungeon.materials.append(obj)
    obj.always_visible = False

    item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)), weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                      weapon_str=int(round(player.fighter.Base_Strength/5)), worth=10, quantity=1, rarity='Material',
                      weapon_type='Axe', name='Water', slot='Left Hand', use_function=None, eat_function=None)
    obj = Object(0, 0, '#', 'Water', libtcod.grey, id_number=1, slot='Left Hand', weight=0, weapon_type='Axe', item=item_component)
    Dungeon.materials.append(obj)
    obj.always_visible = False

    
    item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)), weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                      weapon_str=int(round(player.fighter.Base_Strength/5)), worth=10, quantity=10, rarity='Material',
                      weapon_type='Axe', name='Iron Ore', slot='Left Hand', use_function=None, eat_function=None)
    obj = Object(0, 0, '#', 'Iron Ore', libtcod.grey, id_number=1, slot='Left Hand', weight=0, weapon_type='Axe', item=item_component)
    Dungeon.materials.append(obj)
    obj.always_visible = False

    item_component = Item(to_crit=(libtcod.random_get_int(0, 7, 10) + (player.fighter.Base_Agility)), weapon_min=5, weapon_max=6, weapon_agi=int(round(player.fighter.Base_Agility/4)),
                      weapon_str=int(round(player.fighter.Base_Strength/5)), worth=10, quantity=10, amount=3, rarity='Material',
                      weapon_type='Axe', name= 'Exodium Ore', slot='Left Hand', use_function=None, eat_function=None)
    obj = Object(player.x, player.y, '#', 'Exodium Ore', libtcod.dark_red, id_number=1, slot='Left Hand', currency=True, weight=None, weapon_type='Axe', item=item_component)

    
    
    Dungeon.materials.append(obj)
    objects.append(obj)
    obj.always_visible = False
    

    

    

    

    item_component = Item(block_bonus=0, defense_bonus=1, weight=30, weapon_min=0, weapon_max=0, weapon_agi=0,
                          weapon_str=0, weapon_type='Helm', name='Iron Helm', slot='Head', use_function=None, eat_function=None)
    obj = Object(0, 0, '/', 'Iron Helm', libtcod.sky, id_number=5, slot='Head', weight=30, weapon_type='helm', item=item_component)
    inventorylist[0].append(obj)
    obj.always_visible = False

    item_component = Item(block_bonus=0, defense_bonus=-20, weight=45, weapon_min=0, Conceal_Bonus=50, weapon_max=0, weapon_agi=0,
                          weapon_str=0, weapon_type='Helm', name='Mithril Helm', slot='Head', use_function=None, eat_function=None)
    obj = Object(0, 0, '/', 'Mithril Helm', libtcod.sky, id_number=5, slot='Head', weight=30, Conceal_Bonus=50, weapon_type='helm', item=item_component)
    inventorylist[0].append(obj)
    obj.always_visible = False

    item_component = Item(defense_bonus=0, name='Minor Healing potion', use_function='minor', eat_function=None)
    obj = Object(player.x, player.y, '!', 'Minor Healing potion', libtcod.violet, weight=1, item=item_component)
    inventorylist[0].append(obj)
    obj.always_visible = False
    
    item_component = Item(block_bonus=0, defense_bonus=-14, weight=30, weapon_min=0, weapon_max=0, weapon_agi=0,
                          weapon_str=0, rarity='Rare', weapon_type='Helm', name='Shit Helm', slot='Head', use_function=None, eat_function=None)
    obj = Object(0, 0, '/', 'Shit Helm', libtcod.sky, id_number=5, slot='Head', weight=30, weapon_type='helm', item=item_component)
    inventorylist[0].append(obj)
    obj.always_visible = False

    

    

    item_component = Item(block_bonus=0, defense_bonus=10, weight=3, weapon_min=0, weapon_max=0, weapon_agi=0,
                          weapon_str=0, weapon_type='Neck', name='Heater Shield', slot='Neck', use_function=None, eat_function=None)
    obj = Object(0, 0, '/', 'Heater Shield', libtcod.sky, id_number=5, slot='Neck', weight=30, weapon_type='Neck', item=item_component)
    inventorylist[0].append(obj)
    obj.always_visible = False

    









    if Dungeon.Terrain_type == 'Pits of Despair':
        message('You wake up in a dark and cold cave..', libtcod.light_blue)

        message('You hear voices in the distance..', libtcod.light_blue)
        message('The Old Orc greets you.', libtcod.green)

        


    scalings()

def Earth_Splitter():
    global player, map, objects
    message('Lava spews forth from The Earth Splitter!', libtcod.red)
    for i in range(10):
        x = libtcod.random_get_int(0, -2, 2)
        y = libtcod.random_get_int(0, -2, 2)
        if(Blocked_Stuff(x, y)):
            Spawn_Lava(x,y)
        

def Blocked_Stuff(x,y):
    global player, map, fov_map
    
    if map[player.x + x][player.y + y].block_sight and map[player.x + x][player.y + y].blocked and not libtcod.map_is_in_fov(fov_map, player.x + x, player.y + y):
        return False
    elif map[player.x + x][player.y + y].block_sight and map[player.x + x][player.y + y].blocked:
        return False
    else:
        return True

def Spawn_Lava(x, y):
    global player, map, objects

    lavax = player.x + x
    lavay = player.y + y
    
    
    item_component = Item(decoration=True, name= 'Lava', use_function=None, eat_function=None) 
    obj = Object(player.x + x, player.y + y, '~', 'Lava', libtcod.dark_red, id_number=0, slot='None', currency=False, weight=None, env=TEST_LAVA, item=item_component)
    objects.append(obj)
    obj.send_to_back()

def TEST_LAVA(x, y): #For walking out of lava, already have walking into lava function
    global player, map, objects

    

    
    if(x == player.x and y == player.y):
        damage = libtcod.random_get_int(0, 1, 4)
        combat_message(22, 10, "The lava burns you for " + str(damage) + " ", libtcod.red)
        combat_message(22+len("The lava burns you for " + str(damage) + " "), 9, "Hellfire Damage",libtcod.red, True)
        player.fighter.hp -= damage
        if((player.fighter.hp - damage) < 0):
            player_death(player)
        
    
         
    
    
         

def previous_level(thing=False):
    global dungeon_level, stairs_count, map, objects, player, MAP_HEIGHT, MAP_WIDTH
    if thing == True:
        message('You head out into the Wilderness!', libtcod.green)
        
        
    elif thing == False:
        if Dungeon.Terrain_type != 'The Descent':
        
            message('You return from whince you came.', libtcod.light_violet)
        else:
            message('The stairs collapse behind you..', libtcod.light_violet)


    if thing == True:
        s = 'Wilderness.txt'

        FILE = open(s, 'r')
        map = cPickle.load(FILE)
        
        objects = cPickle.load(FILE)
        FILE.close()

        for i in objects:
            if i.name == 'player':
                objects.remove(i)
                break

##        count = 1
##
##        for i in list_to_save:
##            try:
##                x = list_to_save[count-1]
##                y = list_to_save[count+1]
##
##                map[x][y].explored = True
##                count += 2
##            except:
##                break
            
            
                

        

        
    if Dungeon.Terrain_type == 'Random' and Dungeon.dungeon_level >= 1:
        s = "random" + str(Dungeon.dungeon_level) + ".txt"
        
        try:
            FILE = open(s, 'r')
            map = cPickle.load(FILE)
            objects = cPickle.load(FILE)
            FILE.close()
            message('Previous level loaded successfully')
            
        except:
            make_map()


        s2 = "randomassets" + str(Dungeon.dungeon_level) + ".txt"
        
        
        try:
            
            FILE = open(s2, 'r')
            number = cPickle.load(FILE)
            number2 = cPickle.load(FILE)
            FILE.close()

            player.x = number
            player.y = number2

            stairs_in.x = number
            stairs_in.y = number2
        except:
            message('No stairs')
    elif Dungeon.Terrain_type == 'The Descent' and Dungeon.dungeon_level >= 2:
        make_map()
        

    for i in objects:
        if i.x == player.x and i.y == player.y and i.name == 'player':
            objects.remove(i)
            break

    Dungeon.dungeon_level -= 1
        
    
    initialize_fov()
    

def dungeon_start():

    player.fighter.past_first_level = False
    make_map() #create a fresh new level!
    initialize_fov()

def next_level():
    #advance to the next level
    global dungeon_level, stairs_count, objects, map, player
    message('You press on.', libtcod.light_violet)

    Dungeon.dungeon_level += 1





     #create a fresh new level!
    
    
    if Dungeon.Terrain_type == 'Random':
        s = "random" + str(Dungeon.dungeon_level) + ".txt"
        
        try:
            FILE = open(s, 'r')
            map = cPickle.load(FILE)
            objects = cPickle.load(FILE)
            FILE.close()

            message('Next level loaded successfully')

            s = "random" + str(Dungeon.dungeon_level) + ".txt"

            s2 = "randomassets" + str(Dungeon.dungeon_level) + ".txt"

            s3 = "randomassetsthree" + str(Dungeon.dungeon_level) + ".txt"
            

            try:
                
                
                FILE = open(s3, 'r')
                number3 = cPickle.load(FILE)
                number4 = cPickle.load(FILE)
                
                FILE.close()

                player.x = number3
                player.y = number4
            except:
                pass

            for i in objects:
                if i.x == player.x and i.y == player.y and i.name == 'player':
                    objects.remove(i)
                    break
            
        except:
            make_map()
    else:
        make_map()

    initialize_fov()

def initialize_fov():
    global fov_recompute, fov_map
    fov_recompute = True

    #create the FOV map, according to the generated map
    fov_map = libtcod.map_new(MAP_WIDTH, MAP_HEIGHT)
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            libtcod.map_set_properties(fov_map, x, y, not map[x][y].block_sight, not map[x][y].blocked)

    libtcod.console_clear(con)  #unexplored areas start black (which is the default background color)

def play_game():
    global key, mouse, fov_recompute, TURN, burn, corrupted1, corruption1, MINUTE, HOUR, moved, Tutorial, name_tutorial, inventory
    global TORCH_RADIUS, game_state, game_msgs, shop_msgs, game_msgs2, combat_msgs, combat_log

    if player.fighter.Race == 'Human':
        player.fighter.levels = {'1':'300', '2':'500', '3':'700', '4':'900', '5':'1100', '6':'1300', '7':'1500', '8':'1700', '9':'1900', '10':'2100'}
    elif player.fighter.Race == 'Dwarf':
        player.fighter.levels = {'1':'100', '2':'300', '3':'500', '4':'700', '5':'900', '6':'1100', '7':'1200', '8':'1500', '9':'1800', '10':'2100'}

    

    if 'Block Talent 4' in player.fighter.event:
        player.fighter.skill4 = 'Stone Form'
                

    if 'Block Talent 8' in player.fighter.event:
        if 'Max Stam Talent' not in player.fighter.event and player.fighter.Class == 'Warrior':
            player.fighter.event.append('Max Stam Talent')
            
            player.fighter.Max_stamina += 30
            player.fighter.Stamina += 30

    if 'Block Talent 2' in player.fighter.event:
        if 'Res Talent' not in player.fighter.event and player.fighter.Class == 'Warrior':
            player.fighter.event.append('Res Talent')
            player.fighter.fire_res += 15
            player.fighter.cold_res += 15
            player.fighter.lightning_res += 15
            player.fighter.spirit_res += 15
                               
            

    if player.fighter.Sub_race == 'Braahks':
        player.fighter.Base_Agility -= 3

    elif player.fighter.Sub_race == 'Shaduriens':
        player.fighter.Base_Agility += 4
        player.fighter.max_hp -= 7
        player.fighter.hp -= 7

    elif player.fighter.Sub_race == 'Sons of the Stone':
        player.fighter.defense = int(round(player.fighter.stat_defense + (player.fighter.Base_Endurance*0.2)))

        player.fighter.Base_Agility -= 5
        player.fighter.Base_Spirit -= 3

    elif player.fighter.Sub_race == 'Child of the Order':
        player.fighter.Intellect = int(round(player.fighter.Base_Intellect*0.85))
        player.fighter.defense = int(round(player.fighter.stat_defense + player.fighter.Base_Spirit*0.20))

    elif player.fighter.Sub_race == 'Mumuh-khan':
        player.fighter.defense = int(round(player.fighter.stat_defense*0.75))

    elif player.fighter.Sub_race == 'Nizerd':
        player.fighter.Base_Intellect += 5
        player.fighter.Base_Spirit -= 4

    player.fighter.name_state = 'chosen'


    Dungeon.dungeon_level = 1
    message('So be it, ' + player.fighter.Name + '!')

    player_action = None

    mouse = libtcod.Mouse()
    key = libtcod.Key()
    #main loop

    
    while not libtcod.console_is_window_closed():

        if Tutorial == False:
            with open('derp.rtf') as f:
                lines = list(islice(f, 16, 37))
            inspect_menu('Welcome to Rise of the Shatm: From the Ashes v 1.0!', lines, 60)
            
        Tutorial = True

        if name_tutorial == False:
            with open('derp.rtf') as f:
                line = list(islice(f, 38, 54))
            inspect_menu('Name Selection', line, 80)
            name_tutorial = True

        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS | libtcod.EVENT_MOUSE, key, mouse)
        #render the screen
        render_all()

        libtcod.console_flush()

        #level up if needed
        check_level_up()






        #erase all objects at their old locations, before they move
        for object in objects:
            object.clear()

        #handle keys and exit game if needed

        player_action = handle_keys()


        if player.x == 19 and player.y == 10 and Dungeon.Terrain_type == 'Pits of Despair':
            if 'Arena Event' not in player.fighter.event:
                player.fighter.event.append('Arena Event')

                with open('derp.rtf') as f:
                    line = list(islice(f, 138, 152))
                inspect_menu('A Voice Speaks', line, 68)

                if 'A Voice Speaks' not in Quest.Quest_name:
                    message('Quest added!', libtcod.green)
                    Quest.Quest_name.append('A Voice Speaks')
                if 'Find the Strange Key Secondary' not in Quest.Quest_Main:
                    Quest.Quest_Main.append('Find the Strange Key')
                
                
                if 'Kill Captain Dalmer' not in Quest.Quest_Second:
                    Quest.Quest_Second.append('Kill Captain Dalmer')

        if player.x == 25 and player.y == 21 and Dungeon.Terrain_type == 'Pits of Despair':


            if 'Captains Arena Event and Journal' not in player.fighter.event and 'Captain Arena Event First' not in player.fighter.event:





                with open('derp.rtf') as f:
                    line = list(islice(f, 155, 179))
                inspect_menu('A Captains Burden', line, 68)
                player.fighter.event.append('Captain Arena Event First')








        

        if player.x == 28 and player.y == 37 and Dungeon.Terrain_type == 'Pits of Despair':
            if "Enter Arena" not in player.fighter.event:
                message('You hear voices from up ahead..')
                

                
                message('???: Ah, you survived..', libtcod.cyan)
                message('???: You betrayed us all..!', libtcod.red)
                message('???: I did what had to be done.', libtcod.cyan)
                message('???: And what had they done to deserve this?!', libtcod.red)
                message('???: You live by the Order, You die by the law.', libtcod.cyan)
                message('???: They were mere children and civilians!', libtcod.red)
                message('???: And that excuses them?', libtcod.cyan)
                    
                    

                player.fighter.event.append("Enter Arena")

                fighter_component = Monster(hp=12, defense=1, Strength=2, agility=7, current_energy=0, energy=500, max_energy=100, xp=0, level=1,
                                    min_dam=1, max_dam=5, minimum_hit=100,race='Human', death_function=monster_death)

                ai_component = None

                monster = Object(38, 35, '@', 'Dying Man', libtcod.red, blocks=True, fighter=fighter_component, ai=ai_component)

                objects.append(monster)

                

                

                











        if player_action == 'exit':
            #save_map()
            
            choise = 'Done'
            main_menu()

        if game_state == 'playing':
            if len(player.fighter.Buffs) > 0:
                for i in player.fighter.Buffs:
                    if i.name == 'Armor':
                        if 'Armor Pot' not in player.fighter.event:
                            player.fighter.defense += i.effect
                            player.fighter.event.append('Armor Pot')
                    elif i.name == 'Agility':
                        if 'Agility Pot' not in player.fighter.event:
                            player.fighter.Agility += i.effect
                            player.fighter.Base_Agility += i.effect
                            player.fighter.event.append('Agility Pot')

                    elif i.name == 'Strength':
                        if 'Strength Pot' not in player.fighter.event:
                            player.fighter.Strength += i.effect
                            player.fighter.Base_Strength += i.effect
                            player.fighter.event.append('Strength Pot')
                    elif i.name == 'Intellect':
                        if 'Intellect Pot' not in player.fighter.event:
                            player.fighter.Intellect += i.effect
                            player.fighter.Base_Intellect += i.effect
                            player.fighter.event.append('Intellect Pot')

                    elif i.name == 'Spirit':
                        if 'Spirit Pot' not in player.fighter.event:
                            player.fighter.Spirit += i.effect
                            player.fighter.Base_Spirit += i.effect
                            player.fighter.event.append('Spirit Pot')

                    elif i.name == 'Luck':
                        if 'Luck Pot' not in player.fighter.event:
                            player.fighter.Luck += i.effect
                            player.fighter.Base_Luck += i.effect
                            player.fighter.event.append('Luck Pot')
                    


        #let monsters take their turn
        if game_state == 'playing' and player_action != 'didnt-take-turn':

            if Dungeon.Terrain_type == 'West Gate':
                for i in Dungeon.stuff:
                    try:
                        if i.cook_turns != None:
                            if i.cook_turns >= -(i.cook_turns*5):
                                i.cook_turns -= 1
                                
                                if i.cook_turns >= 1:
                                    sizzle = libtcod.random_get_int(0, 1, 10)

                                    if sizzle >= 5:
                                        sizzle = libtcod.random_get_int(0, 1, 4)

                                        if sizzle == 1:
                                            message('The ' + i.name + ' starts to cook from the heat...', libtcod.green)
                                        if sizzle == 2:
                                            message('The ' + i.name + ' is slowly getting roasted..', libtcod.green)
                                        if sizzle == 3:
                                            message('The ' + i.name + ' starts to smell like it is cooked..', libtcod.green)
                                        if sizzle == 4:
                                            message('The ' + i.name + ' is starting to get some colour..', libtcod.green)


                            if i.cook_turns <= 0 and i.cooked == False:
                                message('The ' + i.name + ' is cooked!', libtcod.green)
                                save = i.name
                                x = i.x
                                y = i.y
                                objects.remove(i)
                                Dungeon.stuff.remove(i)

                                item_component = Item(block_bonus=0, defense_bonus=-30, weight=30, weapon_min=0, weapon_max=0, weapon_agi=0,
                                  weapon_str=0, rarity='Rare', weapon_type='None', name='Raw Meat', slot='None', use_function=None, eat_function=monkey)
                                obj = Object(x, y, '%', 'Cooked ' + save, libtcod.red, id_number=5, cook_turns=5, slot='None', weight=30, weapon_type='None', item=item_component)
                                objects.append(obj)
                                Dungeon.stuff.append(obj)
                                obj.always_visible = False
                                obj.cooked = True

                                
                                
                                i.cook_turns -= 1

                    except:
                        pass

            for i in player.fighter.Buffs:
                i.duration -= 1

            for i in player.fighter.Buffs:
                if i.duration == 0:
                    if i.name == 'Armor':
                        try:
                            player.fighter.event.remove("Armor Pot")
                            player.fighter.defense -= i.effect
                        except:
                            pass

                    elif i.name == 'Agility':
                        try:
                            player.fighter.event.remove("Agility Pot")
                            player.fighter.Agility -= i.effect
                            player.fighter.Base_Agility -= i.effect
                        except:
                            pass
                    elif i.name == 'Strength':
                        try:
                            player.fighter.event.remove("Strength Pot")
                            player.fighter.Strength -= i.effect
                            player.fighter.Base_Strength -= i.effect
                        except:
                            pass

                    elif i.name == 'Intellect':
                        try:
                            player.fighter.event.remove("Intellect Pot")
                            player.fighter.Intellect -= i.effect
                            player.fighter.Base_Intellect -= i.effect
                        except:
                            pass

                    elif i.name == 'Spirit':
                        try:
                            player.fighter.event.remove("Spirit Pot")
                            player.fighter.Spirit -= i.effect
                            player.fighter.Base_Spirit -= i.effect
                        except:
                            pass

                    elif i.name == 'Luck':
                        try:
                            player.fighter.event.remove("Luck Pot")
                            player.fighter.Luck -= i.effect
                            player.fighter.Base_Luck -= i.effect
                        except:
                            pass
                    player.fighter.Buffs.remove(i)
                    
                    
                
                
                    
                        
                    
                
                    
            
            
            


            
            if Energy.energy >= 1000:
                
                
                

                for object in objects:
                    
                    if object.ai:
                        object.ai.take_turn()
                        
                        for i in range(1,30):
                            if object.tale_told == 'Stunned' + str(i):
                                
                                object.tale_told = 'Stunned' + str(i-1)
                                if object.tale_told == 'Stunned'+str(0):
                                    object.tale_told = 'Attacked'

                                break
                            
                            
                        if object.tale_told == 'Stunned':
                            object.tale_told = 'Attacked'
                        fov_recompute = True

                    if object.ai and Energy.energy >= 2000:
                        object.ai.take_turn()

                        for i in range(1,6):
                            if object.tale_told == 'Stunned' + str(i):
                                
                                object.tale_told = 'Stunned' + str(i-1)
                                if object.tale_told == 'Stunned'+str(0):
                                    object.tale_told = 'Attacked'

                                break
                        
                        if object.tale_told == 'Stunned':
                            object.tale_told = 'Attacked'
                        fov_recompute = True

                    if object.ai and Energy.energy >= 3000:
                        object.ai.take_turn()

                        for i in range(1,6):
                            if object.tale_told == 'Stunned' + str(i):
                                
                                object.tale_told = 'Stunned' + str(i-1)
                                if object.tale_told == 'Stunned'+str(0):
                                    object.tale_told = 'Attacked'

                                break
                        
                        if object.tale_told == 'Stunned':
                            object.tale_told = 'Attacked'
                        fov_recompute = True

                Energy.energy = 0
                        
                
                    
            

            if player.fighter.Class == 'Warrior' and player.fighter.Stamina < player.fighter.Max_stamina:
                if player.fighter.Max_stamina - player.fighter.Stamina >= 9 and 'Block Talent 1' in player.fighter.event and 'Off Talent 4' in player.fighter.event:
                    player.fighter.Stamina += 9
                    
                elif player.fighter.Max_stamina - player.fighter.Stamina >= 8 and 'Block Talent 1' in player.fighter.event and 'Off Talent 4' in player.fighter.event:
                    player.fighter.Stamina += 8
                    
                elif player.fighter.Max_stamina - player.fighter.Stamina >= 7 and 'Block Talent 1' in player.fighter.event or 'Off Talent 4' in player.fighter.event:
                    player.fighter.Stamina += 7

                elif player.fighter.Max_stamina - player.fighter.Stamina >= 6 and 'Block Talent 1' in player.fighter.event or 'Off Talent 4' in player.fighter.event:
                    player.fighter.Stamina += 6
                    
                elif player.fighter.Max_stamina - player.fighter.Stamina >= 5:
                    player.fighter.Stamina += 5


                elif player.fighter.Max_stamina - player.fighter.Stamina == 4:
                    player.fighter.Stamina += 4

                elif player.fighter.Max_stamina - player.fighter.Stamina == 3:
                    player.fighter.Stamina += 3

                elif player.fighter.Max_stamina - player.fighter.Stamina == 2:
                    player.fighter.Stamina += 2

                elif player.fighter.Max_stamina - player.fighter.Stamina == 1:
                    player.fighter.Stamina += 1

            if player.fighter.Block_Duration >= 1:
                player.fighter.Block_Duration -= 1
                if player.fighter.Block_Duration == 0:
                    if 'Shield Slam Hit' in player.fighter.event:
                        player.fighter.event.remove('Shield Slam Hit')

                    message('You lower your shield.', libtcod.yellow)
                    
                    player.fighter.defense -= player.fighter.Block_Bonus
            TURN += 4
            if TURN >= 60:
                TURN -= 60
                MINUTE += 1
            if MINUTE == 60:
                HOUR += 1
                MINUTE = 0
            if HOUR == 24:
                HOUR = 0

            if Dungeon.Terrain_type == 'Cave':
                TORCH_RADIUS = 3

            player.fighter.satiation -= player.fighter.metabolism

            x = player.x

            y = player.y

            if player.x == 19 and player.y == 15 and Dungeon.Terrain_type == 'Pits of Despair':



                map[18][15] = Tile(True)
                map[18][15].block_sight = True

            if player.x == 15 and player.y == 16 and Dungeon.Terrain_type == 'Pits of Despair':

                map[16][16] = Tile(True)
                map[16][16].block_sight = True





            if player.fighter.corruption >= 50 and corrupted1 == False:
                message('You feel corrupted.')
                corruption1 = True
                if corruption1 == True:
                    corruption()
                    corrupted1 = True

            

##            Energy.energy -= Energy.breakpoint

def Acrobatics(requirement, obstacle):
    #Allows you to Explore certain regions and allows you to Climb Ledges that you would normally not be able to reach.
    #Also gives a passive chanse of dodging projectiles or Traps or Spells
    if 'Acrobatics' in player.fighter.Skills:
        if requirement <= player.fighter.skill_numbers[0]:
            if obstacle == 'Ledge':
                message('You climb up the ledge!', libtcod.green)
            elif obstacle == 'Drop':
                message('You carefully lower yourself from the Drop', libtcod.green)
            elif obstacle == 'Rubble':
                message('You overcome the rubble!', libtcod.green)
            elif obstacle == 'Hole':
                message('You jump over the hole!', libtcod.green)
        else:
            message('Requires ' + str(requirement) + ' Acrobatics to surmount!', libtcod.red)
            
    pass

def Alchemy(): 
    #Allows you to make different potions and reagents for using in Enchantments for your weapons. Goes with Foraging.
  
    Dungeon.pot_list = ['Minor Strength Potion: Dark Root x 2, Water x 1', 'Minor Agility Potion: Shadow Leaf x 2, Water x 1',
                    'Minor Armor Potion: Tough Bark x 2, Water x 1', 'Minor Speed Potion: Black Grass x 2, Water x 1', 'Minor Intellect Potion: Shade Thistle x 2, Water x 1',
                        'Lesser Strength Potion: Pale Root x 2, Water x 1', 'Lesser Agility Potion: Grey Leaf x 2, Water x 1',
                    'Lesser Armor Potion: Frozen Bark x 2, Water x 1', 'Lesser Speed Potion: Snow Grass x 2, Water x 1', 'Lesser Intellect Potion: Winter Thistle x 2, Water x 1',
                        'Medium Strength Potion: Ember Root x 2, Water x 1', 'Medium Agility Potion: Firespirit Leaf x 2, Water x 1',
                        'Medium Armor Potion: Seared Bark x 2, Water x 1', 'Medium Speed Potion: Charred Fire Grass x 2, Water x 1',
                        'Medium Intellect Potion: Fire Thistle x 2, Water x 1', 'Large Strength Potion: Mud Root x 2, Water x 1',
                        'Large Agility Potion: Slipstream Leaf x 2, Water x 1', 'Large Armor Potion: Thin Bark x 2, Water x 1', 'Large Speed Potion: Fresh Lake Grass x 2, Water x 1',
                        'Large Intellect Potion: Special Thistle x 2, Water x 1', 'Major Strength Potion: Sand Root x 2, Water x 1', 'Major Agility Potion: Old Oak Leaf x 2, Water x 1',
                        'Major Armor Potion: Resillient Bark x 2, Water x 1', 'Major Speed Potion: Tough Grass x 2, Water x 1', 'Major Intellect Potion: Earth Thistle x 2, Water x 1',
                        'Great Strength Potion: Cursed Root x 2, Water x 1', 'Great Agility Potion: Oblivion Leaf x 2, Water x 1', 'Great Armor Potion: Demonic Bark x 2, Water x 1',
                        'Great Speed Potion: Void Grass x 2, Water x 1', 'Great Intellect Potion: Corrupted Thistle x 2, Water x 1']

##    if player.fighter.Class == 'Warlock':
##        number = 1
##        Dungeon.skill_numbers[number] = 100

    number = 1

    thingy = Dungeon.skill_numbers[number]
    factor = 0
    count = 0
    
    for i in Dungeon.pot_list:
        count += 3
        if count > thingy or count > 90:
            break
        if i not in Dungeon.recipies:
            Dungeon.recipies.append(i)

##    if 'Major Healing Potion:  Bloodroot x 5, Water x 1' not in Dungeon.recipies:
##        Dungeon.recipies.append('Major Healing Potion:  Bloodroot x 5, Water x 1')

    if thingy >= 100 and 'Great Healing Potion: Great Bloodroot x 3, Water x 1' not in Dungeon.recipies:
        Dungeon.recipies.append('Great Healing Potion: Great Bloodroot x 3, Water x 1')

    if thingy >= 80 and 'Major Healing Potion:  Bloodroot x 5, Water x 1' not in Dungeon.recipies:
        Dungeon.recipies.append('Major Healing Potion:  Bloodroot x 5, Water x 1')

    if thingy >= 60 and 'Large Healing Potion: Bloodroot x 3, Water x 1' not in Dungeon.recipies:
        Dungeon.recipies.append('Large Healing Potion: Bloodroot x 3, Water x 1')
        

    if thingy >= 40 and 'Medium Healing Potion: Bloodroot x 1, Water x 1' not in Dungeon.recipies:
        Dungeon.recipies.append('Medium Healing Potion: Bloodroot x 1, Water x 1')

    if thingy >= 20 and 'Lesser Healing Potion: Bloodthistle x 3, Water x 1' not in Dungeon.recipies:
        Dungeon.recipies.append('Lesser Healing Potion: Bloodthistle x 3, Water x 1')
            
    if 'Minor Healing Potion: Bloodthistle x 1, Water x 1' not in Dungeon.recipies:
        Dungeon.recipies.append('Minor Healing Potion: Bloodthistle x 1, Water x 1')
    power_menu(alchemy=True, strength = 'Minor')

def Bluffing():
    #Allows you to Bluff NPCs and convince them of things that are not true.
    pass

def Climbing():
    #Allows you to Climb mountains on the World Map, allows you to explore certain Dungeons that would be unaccesible otherwise.
    #Requirement can be reduced by having Climbing Tools
    pass

def Disguise():
    #Allows you to take the guise of someone else, tricking other people into thinking that you are something that you are not. 
    #allows you to infiltrate areas and the likes.
    #higher levels allow you to imitate higher up people and allow you to trigger events
    pass

def Cooking():
    #Allows you to cook meals and gain buffs from food that you would not otherwise be able to get.
    #Also can be combined with poison that makes you able to assasinate people silently.

    
    
    pass

def Gathering():
    #Allows you to enter Special Random generated Dungeons that can drop Materials related to that specific Dungeon theme.
    #Each Dungeon has it's own Theme, that is related to the tier of the Material.
    #Dungeons scale up to a certain level, based on the Tier. After that level, Thoose Dungeons won't spawn monsters with Relevant XP anymore,
    #They will instead spawn monsters that are set to a certain cap of that levle of the Gathering Dungeon.
    #A Gathering Dungeon always has a Random Boss, there is a very wide array of what kind of Boss there is, at the end of said Gathering Dungeon.
    #Killing the Boss, will gain you a lot more Materials, and you will have a chanse at getting a Special artifact, bound to that level and Dungeon.
    #Different Bosses drop different artifacts, related to the Theme of the Gathering Dungeon.
    #These kinds of monsters have a Reduced drop rate for normal items and a increased Drop rate of Materials.
    #They also have a reduced Xp rate, compared to normal monsters.
    #The amount of skill you have in it, also defines the amount of Materials you get.

    if player.fighter.Class == 'Warlock':
        number = 1

    if Dungeon.skill_numbers[number] >= 20:
        if 'Lesser Dungeon Spawn' not in player.fighter.event:
            player.fighter.event.append('Lesser Dungeon Spawn')
            

    elif Dungeon.skill_numbers[number] >= 40:
        if 'Medium Dungeon Spawn' not in player.fighter.event:
            
            player.fighter.event.append('Medium Dungeon Spawn')

    elif Dungeon.skill_numbers[number] >= 60:
        if 'Large Dungeon Spawn' not in player.fighter.event:
            
            player.fighter.event.append('Large Dungeon Spawn')
        

    elif Dungeon.skill_numbers[number] >= 80:
        if 'Major Dungeon Spawn' not in player.fighter.event:
            
            player.fighter.event.append('Major Dungeon Spawn')

    elif Dungeon.skill_numbers[number] >= 100:
        if 'Great Dungeon Spawn' not in player.fighter.event:
            
            player.fighter.event.append('Great Dungeon Spawn')


def Lockpicking():
    #Allows you to lockpick doors or to lock them after you.
    pass

def Stealth():
    #Allows you to reduce the range of which enemies can see you at. if you go close to them, you have a chanse of not being detected, depending on light levels.
    pass

def Sleight_of_Hand():
    #allows you to pick pocket things and to put things in other peoples pockets, such as poisons or framing someone with stuff that would be condoned illegal.
    pass

def Perception():
    #allows you to detect things that you would otherwise not be able to detect.
    pass

def Diplomacy():
    #Allows you to convince people of peaceful solutions or allows you to resolve situations without conflict. can also calm monsters that understand.
    pass

def Intimidate():
    #Allows you to convince people of violent solutions or force them to do things that they don't want to do by the virtue of threatening them.
    pass

def Poisons():
    #allows you to craft poisons that have interactions with other things.
    pass

def Writing():
    #Allows you to write Scrolls and Books
    pass

def Swimming():
    #Allows you to dive into Areas and allows you to swim in bodies of Water
    pass

def Tracking():
    #Allows you to track down enemies and allows you to go on Hunts for greater beasts that exclusive loot
    pass

def Runes():
    #Allows you to involve Runes in your enchantments and allows you to Read runes that could give buffs/bonuses
    pass

def Conditioning():
    #Allows you to have more Stamina and can increase your stamina regen on higher levels. Also, can allow the user to Run for stamina.
    pass

def Recovery():
    #Allows you to Regenerate faster and on higher ranks, allows you to be able to remove some Debuffs. 
    pass

def Healing_Arts():
    #Allows you to Cure some debuffs, allows you to interact in some quests with other people and allows you to Heal yourself a slight bit
    pass

def Gambling():
    #Allows you to Gamble on all kinds of things and allows you to complete some quests that require gambling
    pass

def Piety():
    #Allows you to make Sacrifices to the gods and allows you to affiliate with Religious establishments
    pass

def Packing():
    #Allows you to have increase carrying capacity
    pass

def Knowledge_Dragons():
    #Allows you to apply your knowledge about dragons to different situations. Also allows you to speak with dragons
    pass

def Salvage():
    #Allows you to Salvage items for materials. Also allows you to complete some quests.
    pass

def Spellweaving():
    #allows you to add secondary modifications on spells
    pass

def Siphon():
    #You can siphon the power out of Artifacts
    pass

def Quick_Feet():
    #You can move quicker and can on higher ranks, move on Terrain unhindered
    pass

def Warcries():
    #You can cast Warcries
    pass

def Throwing():
    #You can throw things further and heavier things. On higher ranks, you can throw some enemies.
    pass

def Expel_Corruption():
    #You can reduce your overall corruption faster by expelling it, and on higher ranks you get less drawbacks from doing it.
    pass

def Sense_Demons():
    #Allows you to Detect the presence of demons and allows you to Speak to certain demons on higher levels.
    pass

def Shady_Dealings():
    #Allows you to get access to certain items that you would otherwise not be able to get.
    pass


def Knowledge_Arcane():
    #Allows you to find Different Arcane Materials and allows further Spellmodification with Spellweaving
    pass

def Knowledge_Demons():
    #Allows you to find Demonic Materials and allows further Spellmodification with Spellweaving
    pass

def Knowledge_Dungeons():
    #Allows you to find Dungeon Materials and increases the chanse of getting certain Dungeons.
    #At certain threshholds, you are guaranteed to get extra Dungeons
    pass

def Knowledge_Nature():
    #Allows you to find Nature-related materials and increases your chanse of getting higher tier stuff from Foraging.
    pass


def Knowledge_Tribes():
    #Allows you to find Tribe-related materials and you can interact with tribes in unique matters.
    pass





    

#['Acrobatics (Str + Agi)', 'Alchemy (Int + Spi)', 'Bluffing (Int + Lu)', 'Climbing (Str + End)', 'Disguise (Int + Lu)',  'Cooking (Lu)', 'Foraging (Int)',
##                      'Lockpicking (Agi + Lu)', 'Stealth (Agi)', 'Sleight of Hand (Agi + Lu)', 'Perception (Int)',
##                      'Diplomacy (Int + Spi)', 'Intimidate (Str + End)',
##                      'Poisons (Agi)', 'Writing (Int)', 'Swimming (Str + Agi)', 'Tracking (Lu)', 'Runes (Int)', 'Conditioning (End)',
##                      'Recovery (End + Spi)', 'Healing Arts (Int)', 'Gambling (Int)', 'Piety (Spi)', 'Packing (Int)', 'Knowledge- Dragons (Int)',
##                      'Salvage (Lu)', 'Spellweaving (Int)', 'Siphon (Spi)', 'Quick Feet (Agi)', 'Warcries (End)', 'Throwing (Agi)', 'Expel Corruption (Spi)', 'Sense Demons (Spi)', 
##                      'Shady Dealings (Lu)', 'Knowledge- Arcane (Int)', 'Knowledge- Demons (Int)',  'Knowledge- Dungeons (Int)', 'Knowledge- Nature (Int)', 'Knowledge- Tribes (Int)']

def skill_tree(thing):
    
    if player.fighter.Class == 'Warlock':
        
        if thing == 0:
            Acrobatics()
        if thing == 1:
            Alchemy()
            
            
        if thing == 2:
            Bluffing()
        if thing == 3:
            Climbing()
        if thing == 4:
            Cooking()
        if thing == 5:
            Diplomacy()
        if thing == 6:
            Disguise()
        if thing == 7:
            Expel_Corruption()
        if thing == 8:
            Gathering()
        if thing == 9:
            Gambling()
        if thing == 10:
            Intimidate()
        if thing == 11:
            Knowledge_Arcane()
        if thing == 12:
            Knowledge_Demons()
        if thing == 13:
            Perception()
        if thing == 14:
            Runes()
        if thing == 15:
            Sense_Demons()
        if thing == 16:
            Siphon()
        if thing == 17:
            Spellweaving()
        if thing == 18:
            Stealth()
        if thing == 19:
            Swimming()
        if thing == 20:
            Throwing()
        if thing == 21:
            Writing()
        
    if player.fighter.Class == 'Warrior':
        if thing == 0:
            Acrobatics()
        if thing == 1:
            Bluffing()
        if thing == 2:
            Climbing()
        if thing == 3:
            Conditioning()
        if thing == 4:
            Cooking()
        if thing == 5:
            Diplomacy()
        if thing == 6:
            Disguise()
        if thing == 7:
            Gathering()
        if thing == 8:
            Gambling()
        if thing == 9:
            Healing_Arts()
        if thing == 10:
            Intimidate()
        if thing == 11:
            Knowledge_Dragons()
        if thing == 12:
            Knowledge_Dungeons()
        if thing == 13:
            Knowledge_Tribes()
        if thing == 14:
            Packing()
        if thing == 15:
            Perception()
        if thing == 16:
            Piety()
        if thing == 17:
            Recovery()
        if thing == 18:
            Salvage()
        if thing == 19:
            Swimming()
        if thing == 20:
            Throwing()
        if thing == 21:
            Tracking()
        if thing == 22:
            Warcries()
        


def name_menu():
    global game_state
    choice = None

    while choice == None:



        window = libtcod.console_new(90, 90)

        #print the header, with auto-wrap


        libtcod.console_print_rect_ex(window, 30, 25, 50, 1, libtcod.white, libtcod.LEFT, 'What is your name:' + player.fighter.Name)
        libtcod.console_print_rect_ex(window, 25, 28, 50, 1, libtcod.white, libtcod.LEFT, 'To erase Characters in your name, press Backspace.')
        libtcod.console_print_rect_ex(window, 25, 31, 50, 1, libtcod.white, libtcod.LEFT, 'To finish name selection, press Enter.')
        libtcod.console_print_rect_ex(window, 25, 34, 50, 1, libtcod.white, libtcod.LEFT, "Your name can only be 32 characters.")
        libtcod.console_print_rect_ex(window, 25, 37, 50, 1, libtcod.white, libtcod.LEFT, "Your name may contain Letters ' - or Space.")

        #print all the options


        #blit the contents of "window" to the root console
        x = SCREEN_WIDTH/2 - 30
        y = SCREEN_HEIGHT/2 - 15
        libtcod.console_blit(window, 0, 0, 100, 100, 0, 0, 0, 1.0, 1.0)

        #present the root console to the player and wait for a key-press
        libtcod.console_flush()
        key = libtcod.Key()

        mouse = libtcod.Mouse()





        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS | libtcod.EVENT_MOUSE, key, mouse)


        #render the background first



        if key.vk == libtcod.KEY_ENTER and player.fighter.name_state != 'chosen':
            


            power_menu(Crafting=False)

        elif key.vk == libtcod.KEY_ENTER and player.fighter.name_state == 'chosen':
            choice = 1
            message('So be it, ' + player.fighter.Name + '!')


        if key.vk == libtcod.KEY_BACKSPACE and len(player.fighter.Name) >= 1:
            player.fighter.Name = player.fighter.Name[:-1]


        else:
            key_char = chr(key.c)

            if len(player.fighter.Name) <= 31:
                if key_char == 'a':
                    player.fighter.Name += 'a'



                elif key_char == 'A':
                    player.fighter.Name += 'A'

                elif key_char == 'b':
                    player.fighter.Name += 'b'

                elif key_char == 'B':
                    player.fighter.Name += 'B'

                elif key_char == 'C':
                    player.fighter.Name += 'C'

                elif key_char == 'c':
                    player.fighter.Name += 'c'

                elif key_char == 'D':
                    player.fighter.Name += 'D'

                elif key_char == 'd':
                    player.fighter.Name += 'd'

                elif key_char == 'E':
                    player.fighter.Name += 'E'

                elif key_char == 'e':
                    player.fighter.Name += 'e'

                elif key_char == 'F':
                    player.fighter.Name += 'F'

                elif key_char == 'f':
                    player.fighter.Name += 'f'

                elif key_char == 'G':
                    player.fighter.Name += 'G'

                elif key_char == 'g':
                    player.fighter.Name += 'g'

                elif key_char == 'H':
                    player.fighter.Name += 'H'

                elif key_char == 'h':
                    player.fighter.Name += 'h'

                elif key_char == 'I':
                    player.fighter.Name += 'I'

                elif key_char == 'i':
                    player.fighter.Name += 'i'

                elif key_char == 'J':
                    player.fighter.Name += 'J'

                elif key_char == 'j':
                    player.fighter.Name += 'j'

                elif key_char == 'K':
                    player.fighter.Name += 'K'

                elif key_char == 'k':
                    player.fighter.Name += 'k'

                elif key_char == 'L':
                    player.fighter.Name += 'L'

                elif key_char == 'l':
                    player.fighter.Name += 'l'

                elif key_char == 'M':
                    player.fighter.Name += 'M'

                elif key_char == 'm':
                    player.fighter.Name += 'm'

                elif key_char == 'N':
                    player.fighter.Name += 'N'

                elif key_char == 'n':
                    player.fighter.Name += 'n'

                elif key_char == 'O':
                    player.fighter.Name += 'O'

                elif key_char == 'o':
                    player.fighter.Name += 'o'

                elif key_char == 'P':
                    player.fighter.Name += 'P'

                elif key_char == 'p':
                    player.fighter.Name += 'p'

                elif key_char == 'Q':
                    player.fighter.Name += 'Q'

                elif key_char == 'q':
                    player.fighter.Name += 'q'

                elif key_char == 'R':
                    player.fighter.Name += 'R'

                elif key_char == 'r':
                    player.fighter.Name += 'r'

                elif key_char == 'S':
                    player.fighter.Name += 'S'

                elif key_char == 's':
                    player.fighter.Name += 's'

                elif key_char == 'T':
                    player.fighter.Name += 'T'

                elif key_char == 't':
                    player.fighter.Name += 't'

                elif key_char == 'U':
                    player.fighter.Name += 'U'

                elif key_char == 'u':
                    player.fighter.Name += 'u'

                elif key_char == 'V':
                    player.fighter.Name += 'V'

                elif key_char == 'v':
                    player.fighter.Name += 'v'

                elif key_char == 'W':
                    player.fighter.Name += 'W'

                elif key_char == 'w':
                    player.fighter.Name += 'w'

                elif key_char == 'X':
                    player.fighter.Name += 'X'

                elif key_char == 'x':
                    player.fighter.Name += 'x'

                elif key_char == 'Y':
                    player.fighter.Name += 'Y'

                elif key_char == 'y':
                    player.fighter.Name += 'y'

                elif key_char == 'Z':
                    player.fighter.Name += 'Z'

                elif key_char == 'z':
                    player.fighter.Name += 'z'



                elif key_char == "'":
                    player.fighter.Name += "'"

                elif key_char == '-':
                    player.fighter.Name += '-'

                elif key.vk == libtcod.KEY_SPACE:
                    player.fighter.Name += ' '








def main_menu():
    global TORCH_RADIUS, REGEN, ROOM_MAX_SIZE, ROOM_MIN_SIZE, corrupted1, Tutorial, Monk, player, LOAD_FACTOR
    global key;

    img = libtcod.image_load('Rise_Small.png')

    corrupted1 = False

    

    Dungeon.skills = []
    Dungeon.skills.sort()
    Dungeon.skill_numbers = []
    Dungeon.original = []
    Dungeon.skill_buffer = 0

    


    while not libtcod.console_is_window_closed():
        #show the background image, at twice the regular console resolution
        libtcod.image_blit_2x(img, 0, 15, 0, sx=0, sy=0, w=-1, h=-1)

        libtcod.console_set_default_foreground(0, libtcod.white)
        
        libtcod.console_print(0,SCREEN_WIDTH/2-13, SCREEN_HEIGHT-8,"%c%c%c%cCreated By%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_STOP))
        libtcod.console_print(0,SCREEN_WIDTH/2-14, SCREEN_HEIGHT-6,"%c%c%c%cMikael Rusin%c"%(libtcod.COLCTRL_FORE_RGB,255,1,1,libtcod.COLCTRL_STOP))


        #show options and wait for the player's choice
        choice = menu('', ['New Game', 'Continue', 'Options', 'Credits', 'Quit'], 12)



        if choice == 0:
            img = libtcod.image_load('black_background.png')
            libtcod.image_blit_2x(img, 0, 10, 0, sx=0, sy=0, w=-1, h=-1)
            choice = None
            while choice == None:
                choice = menu('Which class are you?', ['Warrior', 'Warlock', 'Monk', "Paladin", "Scavenger", "Survivalist", "Merchant",
                                        "Archer", "Necromancer", "Pyromancer", "Geomancer", "Hydromancer", "Aeromancer", "Thief", "Assasin",
                                        "Berserker", "Alchemist", "Arena Fighter", "Blood Mage", "Zealot", "Inquisitor", "Flagelant", "Death Knight", 'Random'], 50, main=True)

              #  'Acrobatics (Str + Agi)', 'Alchemy (Int + Spi)', 'Bluffing (Int + Lu)', 'Climbing (Str + End)', 'Disguise (Int + Lu)',  'Cooking (Lu)', 'Gathering (Int)',
              #        'Lockpicking (Agi + Lu)', 'Stealth (Agi)', 'Sleight of Hand (Agi + Lu)', 'Perception (Int)',
              #        'Diplomacy (Int + Spi)', 'Intimidate (Str + End)',
              #        'Poisons (Agi)', 'Writing (Int)', 'Swimming (Str + Agi)', 'Tracking (Lu)', 'Runes (Int)', 'Conditioning (End)',
              #        'Recovery (End + Spi)', 'Healing Arts (Int)', 'Gambling (Int)', 'Piety (Spi)', 'Packing (Int)', 'Knowledge- Dragons (Int)',
              #        'Salvage (Lu)', 'Spellweaving (Int)', 'Siphon (Spi)', 'Quick Feet (Agi)', 'Warcries (End)', 'Throwing (Agi)', 'Expel Corruption (Spi)', 'Sense Demons (Spi)', 
              #        'Shady Dealings (Lu)', 'Knowledge- Arcane (Int)', 'Knowledge- Demons (Int)',  'Knowledge- Dungeons (Int)', 'Knowledge- Nature (Int)', 'Knowledge- Tribes (Int)'

                SkillsCatalog = {"Warrior": ['Acrobatics (Str + Agi)', 'Climbing (Str + End)', 'Disguise (Int + Lu)',  'Cooking (Lu)', 'Perception (Int)',
                      'Diplomacy (Int + Spi)', 'Intimidate (Str + End)', 'Swimming (Str + Agi)','Conditioning (End)',
                      'Recovery (End + Spi)', 'Healing Arts (Int)', 'Quick Feet (Agi)', 'Warcries (End)', 'Throwing (Agi)'], 

                      'Warlock': [ 'Alchemy (Int + Spi)', 'Bluffing (Int + Lu)', 'Disguise (Int + Lu)',  'Cooking (Lu)', 'Gathering (Int)',
                        'Perception (Int)', 'Intimidate (Str + End)', 'Writing (Int)', 'Swimming (Str + Agi)', 'Runes (Int)'
                      'Recovery (End + Spi)', 'Piety (Spi)', 'Packing (Int)', 'Spellweaving (Int)', 'Siphon (Spi)',
                         'Expel Corruption (Spi)', 'Sense Demons (Spi)', 'Knowledge- Arcane (Int)', 'Knowledge- Demons (Int)'],
                    
                     'Monk': [ 'Acrobatics (Str + Agi)', 'Climbing (Str + End)', 'Disguise (Int + Lu)',  'Cooking (Lu)', 'Gathering (Int)',
                     'Sleight of Hand (Agi + Lu)', 'Perception (Int)',
                      'Diplomacy (Int + Spi)', 
                       'Writing (Int)', 'Swimming (Str + Agi)', 'Tracking (Lu)', 'Conditioning (End)',
                      'Recovery (End + Spi)', 'Healing Arts (Int)', 'Piety (Spi)', 'Packing (Int)', 'Knowledge- Dragons (Int)',
                      'Salvage (Lu)', 'Quick Feet (Agi)', 'Throwing (Agi)',  
                     'Knowledge- Demons (Int)',  'Knowledge- Dungeons (Int)', 'Knowledge- Nature (Int)', 'Knowledge- Tribes (Int)']}


                colors = [libtcod.Color(153, 76, 0), libtcod.Color(127, 0, 255), libtcod.Color(153, 255, 255), libtcod.Color(255, 255, 51), libtcod.Color(153, 76, 0), libtcod.Color(255, 128, 0),
                 libtcod.Color(255, 102, 102), libtcod.Color(0, 153, 0), libtcod.Color(96, 96, 96), libtcod.Color(153, 0, 0),
                libtcod.Color(51, 25, 0), libtcod.Color(0, 102, 204), libtcod.Color(153, 204, 255), libtcod.Color(32, 32, 32),
                libtcod.Color(224, 224, 224), libtcod.Color(255, 0, 0), libtcod.Color(153, 153, 255), libtcod.Color(51, 25, 0), libtcod.Color(51, 0, 25),
                libtcod.Color(255, 255, 204), libtcod.Color(255, 178, 102), libtcod.Color(0, 51, 51), libtcod.Color(64, 64, 64)]
                classes_components = [Fighter(hp=30, max_hp = 30, Race=None, Sub_race=None, Base_Endurance=15, Endurance=15, Base_Strength=13,
                                                Strength=13, Base_Intellect=8, Intellect=8, Base_Spirit=13, Spirit=13, Base_Luck=10,
                                                Luck=10, Base_Agility=8, Agility=8, Life_regen=2, Stamina=100, Max_stamina=100,
                                                Ki=1, Max_Ki=1, stat_defense=1, defense=1, xp=0, corruption=0, Life_leech=0, satiation=5000,
                                                max_satiation=10000, metabolism=3, max_corruption=1, Class='Warrior', death_function=player_death),

                                                Fighter(hp=20, max_hp = 20, Race=None, Sub_race=None, Base_Endurance=15, Endurance=13, Base_Strength=10, Strength=8,
                                                Base_Intellect=14, Intellect=14, Base_Spirit=9, Spirit=9, Base_Luck=10, Luck=10, Base_Agility=13, Agility=13, Life_regen=2,
                                                Stamina=1, Max_stamina=1,
                                                Ki=1, Max_Ki=1, stat_defense=0, defense=0, xp=0, corruption=0, Life_leech=0,
                                                satiation=5000, max_satiation=10000, metabolism=3, max_corruption=100, Class='Warlock', death_function=player_death)]
                player = Object(0, 0, '@', 'player', colors[choice], blocks=True, fighter=classes_components[choice])

                listofdoom = [0, 1, 2]
                if choice not in listofdoom:
                    whatclass = libtcod.random_get_int(0, 0, 2)

                    if whatclass == 0:




                        fighter_component = Fighter(hp=30, max_hp = 30, Race=None, Sub_race=None, Base_Endurance=15, Endurance=15, Base_Strength=10,
                                                    Strength=10, Base_Intellect=8, Intellect=8, Base_Spirit=13, Spirit=13, Base_Luck=10,
                                                    Luck=10, Base_Agility=8, Agility=8, Life_regen=2, Stamina=100, Max_stamina=100,
                                                    Ki=1, Max_Ki=1, stat_defense=3, defense=3, xp=0, corruption=0, Life_leech=0, satiation=5000,
                                                    max_satiation=10000, metabolism=3, max_corruption=1, Class='Warrior', death_function=player_death)
                        player = Object(0, 0, '@', 'player', libtcod.white, blocks=True, fighter=fighter_component)

                    if whatclass == 1:


                        fighter_component = Fighter(hp=20, max_hp = 20, Race=None, Sub_race=None, Base_Endurance=15, Endurance=13, Base_Strength=10, Strength=8,
                                                    Base_Intellect=14, Intellect=14, Base_Spirit=9, Spirit=9, Base_Luck=10, Luck=10, Base_Agility=13, Agility=13, Life_regen=2,
                                                    Stamina=1, Max_stamina=1,
                                                    Ki=1, Max_Ki=1, stat_defense=0, defense=0, xp=0, corruption=0, Life_leech=0,
                                                    satiation=5000, max_satiation=10000, metabolism=3, max_corruption=100, Class='Warlock', death_function=player_death)
                        player = Object(0, 0, '@', 'player', libtcod.purple, blocks=True, fighter=fighter_component)

                    if whatclass == 2:


                        fighter_component = Fighter(hp=27, max_hp = 27, Race=None, Sub_race=None, Base_Endurance=15, Endurance=15,
                                                    Base_Strength=17, Strength=17, Base_Intellect=8, Intellect=8, Base_Spirit=13, Spirit=13, Base_Luck=10, Luck=10,
                                                    Base_Agility=8, Agility=8, Life_regen=3,
                                                    Stamina=1, Max_stamina=1,
                                                    Ki=100, Max_Ki=100, stat_defense=3,
                                                    defense=3, xp=0, corruption=0, Life_leech=0, satiation=5000,
                                                    max_satiation=10000, metabolism=3, max_corruption=1, Class='Monk', death_function=player_death)
                        player = Object(0, 0, '@', 'player', libtcod.cyan, blocks=True, fighter=fighter_component)


                choice = None
                while choice == None:
                    img = libtcod.image_load('black_background.png')
                    libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)
                    choice = menu('What gender are you?', ['Male', 'Female', 'Random'] , 35)
                    if choice == 0:
                        player.fighter.Gender = 'Male'

                    if choice == 1:
                        player.fighter.Gender = 'Female'

                    if choice == 2:
                        gender = libtcod.random_get_int(0, 1, 2)

                        if gender == 1:
                            player.fighter.Gender = 'Male'

                        if gender == 2:
                            player.fighter.Gender = 'Female'

                    listofdoom = [0, 1, 2]

                    if choice not in listofdoom:
                        whatgender = libtcod.random_get_int(0, 0, 2)

                        if whatgender == 0:
                            player.fighter.Gender = 'Male'

                        if whatgender == 1:
                            player.fighter.Gender = 'Female'

                        if whatgender == 2:
                            gender = libtcod.random_get_int(0, 1, 2)

                            if gender == 1:
                                player.fighter.Gender = 'Male'

                            if gender == 2:
                                player.fighter.Gender = 'Female'





                    choice = None

                    while choice == None:
                        img = libtcod.image_load('black_background.png')
                        libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)
                        choice = menu('What race are you?', ['Human', 'Dwarf', 'Elf', 'Orc', 'Demonkin', 'Undead', 'Ogre', 'Random'], 35)

                        if choice == 0:
                            global key
                            player.fighter.Race = 'Human'

                            choice = None

                            while choice == None:

                                img = libtcod.image_load('black_background.png')
                                libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)
                                choice = menu('What sub-race are you?', ['Child of the Order', 'Mumuh-khan', 'Kameerian', 'Braahks', 'Shaduriens', 'Random'], 50)

                                if choice == 0:
                                    player.fighter.Sub_race = 'Child of the Order'

                                if choice == 1:
                                    player.fighter.Sub_race = 'Mumuh-khan'

                                if choice == 2:
                                    player.fighter.Sub_race = 'Kameerian'
                                if choice == 3:
                                    player.fighter.Sub_race = 'Braahks'

                                if choice == 4:
                                    player.fighter.Sub_race = 'Shaduriens'


                                listofdoom = [0, 1, 2, 3, 4]

                                if choice not in listofdoom:
                                    whatrace = libtcod.random_get_int(0, 0, 4)

                                    if whatrace == 0:
                                        player.fighter.Sub_race = 'Child of the Order'
                                    if whatrace == 1:
                                        player.fighter.Sub_race = 'Mumuh-khan'
                                    if whatrace == 2:
                                        player.fighter.Sub_race = 'Kameerian'
                                    if whatrace == 3:
                                        player.fighter.Sub_race = 'Braahks'
                                    if whatrace == 4:
                                        player.fighter.Sub_race = 'Shaduriens'

                                name_menu()




                        if choice == 1:
                            player.fighter.Race = 'Dwarf'

                            choice = None

                            while choice == None:

                                img = libtcod.image_load('black_background.png')
                                libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)
                                choice = menu('What sub-race are you?', ['Sons of the Stone', 'Rahgon', 'Nizerd', 'Rohg', 'Xinutur', 'Random'], 35)

                                if choice == 0:
                                    player.fighter.Sub_race = 'Sons of the Stone'


                                if choice == 1:
                                    player.fighter.Sub_race = 'Rahgon'
                                if choice == 2:
                                    player.fighter.Sub_race = 'Nizerd'


                                if choice == 3:
                                    player.fighter.Sub_race = 'Rohg'
                                if choice == 4:
                                    player.fighter.Sub_race = 'Xinutur'


                                listofdoom = [0, 1, 2, 3, 4]

                                if choice not in listofdoom:
                                    whatrace = libtcod.random_get_int(0, 0, 4)

                                    if whatrace == 0:
                                        player.fighter.Sub_race = 'Sons of the Stone'
                                    if whatrace == 1:
                                        player.fighter.Sub_race = 'Rahgon'
                                    if whatrace == 2:
                                        player.fighter.Sub_race = 'Nizerd'
                                    if whatrace == 3:
                                        player.fighter.Sub_race = 'Rohg'
                                    if whatrace == 4:
                                        player.fighter.Sub_race = 'Xinutur'

                                name_menu()


                        if choice == 2:
                            player.fighter.Race = 'Elf'


                            choice = None

                            while choice == None:

                                img = libtcod.image_load('black_background.png')
                                libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)
                                choice = menu('What sub-race are you?', ['Ashen', 'Thismur', 'Leariim', 'Ishmur', 'Pyaritis', 'Random'], 35)

                                if choice == 0:
                                    player.fighter.Sub_race = 'Ashen'
                                if choice == 1:
                                    player.fighter.Sub_race = 'Thismur'
                                if choice == 2:
                                    player.fighter.Sub_race = 'Leariim'
                                if choice == 3:
                                    player.fighter.Sub_race = 'Ishmur'
                                if choice == 4:
                                    player.fighter.Sub_race = 'Pyaritis'

                                listofdoom = [0, 1, 2, 3, 4]

                                if choice not in listofdoom:
                                    whatrace = libtcod.random_get_int(0, 0, 4)

                                    if whatrace == 0:
                                        player.fighter.Sub_race = 'Ashen'
                                    if whatrace == 1:
                                        player.fighter.Sub_race = 'Thismur'
                                    if whatrace == 2:
                                        player.fighter.Sub_race = 'Leariim'
                                    if whatrace == 3:
                                        player.fighter.Sub_race = 'Ishmur'
                                    if whatrace == 4:
                                        player.fighter.Sub_race = 'Pyaritis'

                                name_menu()

                        if choice == 3:
                            player.fighter.Race = 'Orc'

                            choice = None

                            while choice == None:

                                img = libtcod.image_load('black_background.png')
                                libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)
                                choice = menu('What sub-race are you?', ['Bleak ones', 'Grim-Skull', 'Flame-bathed', 'Lost Brethren', 'Gravewalker', 'Random'], 35)

                                if choice == 0:
                                    player.fighter.Sub_race = 'Bleak ones'
                                if choice == 1:
                                    player.fighter.Sub_race = 'Grim-Skull'
                                if choice == 2:
                                    player.fighter.Sub_race = 'Flame-bathed'
                                if choice == 3:
                                    player.fighter.Sub_race = 'Lost Brethren'
                                if choice == 4:
                                    player.fighter.Sub_race = 'Gravewalker'

                                listofdoom = [0, 1, 2, 3, 4]

                                if choice not in listofdoom:
                                    whatrace = libtcod.random_get_int(0, 0, 4)

                                    if whatrace == 0:
                                        player.fighter.Sub_race = 'Bleak ones'
                                    if whatrace == 1:
                                        player.fighter.Sub_race = 'Grim-Skull'
                                    if whatrace == 2:
                                        player.fighter.Sub_race = 'Flame-bathed'
                                    if whatrace == 3:
                                        player.fighter.Sub_race = 'Lost Brethren'
                                    if whatrace == 4:
                                        player.fighter.Sub_race = 'Gravewalker'

                                name_menu()

                        if choice == 4:
                            player.fighter.Race = 'Demonkin'

                            choice = None

                            while choice == None:

                                img = libtcod.image_load('black_background.png')
                                libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)
                                choice = menu('What sub-race are you?', ['Soul Marked', 'Half-blood', 'Full-blood', 'Firstborn', "Sra'shir", 'random'], 35)

                                if choice == 0:
                                    player.fighter.Sub_race = 'Soul Marked'
                                if choice == 1:
                                    player.fighter.Sub_race = 'Half-blood'
                                if choice == 2:
                                    player.fighter.Sub_race = 'Full-blood'
                                if choice == 3:
                                    player.fighter.Sub_race = 'Firstborn'
                                if choice == 4:
                                    player.fighter.Sub_race = "Sra'shir"

                                listofdoom = [0, 1, 2, 3, 4]

                                if choice not in listofdoom:
                                    whatrace = libtcod.random_get_int(0, 0, 4)

                                    if whatrace == 0:
                                        player.fighter.Sub_race = 'Soul Marked'
                                    if whatrace == 1:
                                        player.fighter.Sub_race = 'Half-blood'
                                    if whatrace == 2:
                                        player.fighter.Sub_race = 'Full-blood'
                                    if whatrace == 3:
                                        player.fighter.Sub_race = 'Firstborn'
                                    if whatrace == 4:
                                        player.fighter.Sub_race = "Sra'shir"

                                name_menu()

                        if choice == 5:
                            player.fighter.Race = 'Undead'

                            choice = None

                            while choice == None:

                                img = libtcod.image_load('black_background.png')
                                libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)
                                choice = menu('What sub-race are you?', ['Risen', 'Lich', 'Skeleton', 'Grave Stalker', "Xanthu", 'Random'], 35)

                                if choice == 0:
                                    player.fighter.Sub_race = 'Risen'
                                if choice == 1:
                                    player.fighter.Sub_race = 'Lich'
                                if choice == 2:
                                    player.fighter.Sub_race = 'Skeleton'
                                if choice == 3:
                                    player.fighter.Sub_race = 'Grave Stalker'
                                if choice == 4:
                                    player.fighter.Sub_race = "Xanthu"

                                listofdoom = [0, 1, 2, 3, 4]

                                if choice not in listofdoom:
                                    whatrace = libtcod.random_get_int(0, 0, 4)

                                    if whatrace == 0:
                                        player.fighter.Sub_race = 'Risen'
                                    if whatrace == 1:
                                        player.fighter.Sub_race = 'Lich'
                                    if whatrace == 2:
                                        player.fighter.Sub_race = 'Skeleton'
                                    if whatrace == 3:
                                        player.fighter.Sub_race = 'Grave Stalker'
                                    if whatrace == 4:
                                        player.fighter.Sub_race = "Xanthu"

                                name_menu()

                        if choice == 6:
                            player.fighter.Race = 'Ogre'

                            choice = None

                            while choice == None:

                                img = libtcod.image_load('black_background.png')
                                libtcod.image_blit_2x(img, 0, 1, 0, sx=0, sy=0, w=-1, h=-1)
                                choice = menu('What sub-race are you?', ['Half-Demon/Half-Ogre', 'Mechanicos', 'Warmongers', 'Lurkers', "Godspawn", 'Random'], 35)

                                if choice == 0:
                                    player.fighter.Sub_race = 'Half-Demon/Half-Ogre'
                                if choice == 1:
                                    player.fighter.Sub_race = 'Mechanicos'
                                if choice == 2:
                                    player.fighter.Sub_race = 'Warmongers'
                                if choice == 3:
                                    player.fighter.Sub_race = 'Lurkers'
                                if choice == 4:
                                    player.fighter.Sub_race = "Godspawn"



                                listofdoom = [0, 1, 2, 3, 4]

                                if choice not in listofdoom:
                                    whatrace = libtcod.random_get_int(0, 0, 4)

                                    if whatrace == 0:
                                        player.fighter.Sub_race = 'Half-Demon/Half-Ogre'
                                    if whatrace == 1:
                                        player.fighter.Sub_race = 'Mechanicos'
                                    if whatrace == 2:
                                        player.fighter.Sub_race = 'Warmongers'
                                    if whatrace == 3:
                                        player.fighter.Sub_race = 'Lurkers'
                                    if whatrace == 4:
                                        player.fighter.Sub_race = "Godspawn"

                                name_menu()



                        listofdoom = [0, 1, 2, 3, 4, 5, 6]

                        if choice not in listofdoom:
                            whatrace = libtcod.random_get_int(0, 0, 6)

                            if whatrace == 0:
                                player.fighter.race = 'Human'
                                whatrace = libtcod.random_get_int(0, 0, 4)

                                if whatrace == 0:
                                    player.fighter.Sub_race = 'Child of the Order'
                                if whatrace == 1:
                                    player.fighter.Sub_race = 'Mumuh-khan'
                                if whatrace == 2:
                                    player.fighter.Sub_race = 'Kameerian'
                                if whatrace == 3:
                                    player.fighter.Sub_race = 'Braahks'
                                if whatrace == 4:
                                    player.fighter.Sub_race = 'Shaduriens'

                            if whatrace == 1:
                                player.fighter.race = 'Dwarf'

                                whatrace = libtcod.random_get_int(0, 0, 4)

                                if whatrace == 0:
                                    player.fighter.Sub_race = 'Sons of the Stone'
                                if whatrace == 1:
                                    player.fighter.Sub_race = 'Rahgon'
                                if whatrace == 2:
                                    player.fighter.Sub_race = 'Nizerd'
                                if whatrace == 3:
                                    player.fighter.Sub_race = 'Rohg'
                                if whatrace == 4:
                                    player.fighter.Sub_race = 'Xinutur'

                            if whatrace == 2:
                                player.fighter.race = 'Elf'

                                whatrace = libtcod.random_get_int(0, 0, 4)

                                if whatrace == 0:
                                    player.fighter.Sub_race = 'Ashen'
                                if whatrace == 1:
                                    player.fighter.Sub_race = 'Thismur'
                                if whatrace == 2:
                                    player.fighter.Sub_race = 'Leariim'
                                if whatrace == 3:
                                    player.fighter.Sub_race = 'Ishmur'
                                if whatrace == 4:
                                    player.fighter.Sub_race = 'Pyaritis'

                            if whatrace == 3:
                                player.fighter.race = 'Orc'

                                whatrace = libtcod.random_get_int(0, 0, 4)

                                if whatrace == 0:
                                    player.fighter.Sub_race = 'Bleak ones'
                                if whatrace == 1:
                                    player.fighter.Sub_race = 'Grim-Skull'
                                if whatrace == 2:
                                    player.fighter.Sub_race = 'Flame-bathed'
                                if whatrace == 3:
                                    player.fighter.Sub_race = 'Lost Brethren'
                                if whatrace == 4:
                                    player.fighter.Sub_race = 'Gravewalker'

                            if whatrace == 4:
                                player.fighter.race = 'Demonkin'

                                whatrace = libtcod.random_get_int(0, 0, 4)

                                if whatrace == 0:
                                    player.fighter.Sub_race = 'Soul Marked'
                                if whatrace == 1:
                                    player.fighter.Sub_race = 'Half-blood'
                                if whatrace == 2:
                                    player.fighter.Sub_race = 'Full-blood'
                                if whatrace == 3:
                                    player.fighter.Sub_race = 'Firstborn'
                                if whatrace == 4:
                                    player.fighter.Sub_race = "Sra'shir"

                            if whatrace == 5:
                                player.fighter.race = 'Undead'

                                whatrace = libtcod.random_get_int(0, 0, 4)

                                if whatrace == 0:
                                    player.fighter.Sub_race = 'Risen'
                                if whatrace == 1:
                                    player.fighter.Sub_race = 'Lich'
                                if whatrace == 2:
                                    player.fighter.Sub_race = 'Skeleton'
                                if whatrace == 3:
                                    player.fighter.Sub_race = 'Grave Stalker'
                                if whatrace == 4:
                                    player.fighter.Sub_race = "Xanthu"

                            if whatrace == 6:
                                player.fighter.race = 'Ogre'

                                whatrace = libtcod.random_get_int(0, 0, 4)

                                if whatrace == 0:
                                    player.fighter.Sub_race = 'Half-Demon/Half-Ogre'
                                if whatrace == 1:
                                    player.fighter.Sub_race = 'Mechanicos'
                                if whatrace == 2:
                                    player.fighter.Sub_race = 'Warmongers'
                                if whatrace == 3:
                                    player.fighter.Sub_race = 'Lurkers'
                                if whatrace == 4:
                                    player.fighter.Sub_race = "Godspawn"

                            name_menu()



        if choice == 1:  #load last game

            

            fighter_component = Fighter(hp=500, max_hp = 500, Race=None, Sub_race=None, Base_Endurance=15, Endurance=15, Base_Strength=10,
                                                Strength=10, Base_Intellect=8, Intellect=8, Base_Spirit=13, Spirit=13, Base_Luck=10,
                                                Luck=10, Base_Agility=8, Agility=8, Life_regen=2, Stamina=100, Max_stamina=100,
                                                Ki=1, Max_Ki=1, stat_defense=3, defense=3, xp=0, corruption=0, Life_leech=0, satiation=5000,
                                                max_satiation=10000, metabolism=3, max_corruption=1, Class='Warrior', death_function=player_death)
            player = Object(0, 0, '@', 'player', libtcod.white, blocks=True, fighter=fighter_component)
            
            
           
            try:
                load_game()
                load_stats()
                
            
            
                

            except:
                with open('derp.rtf') as f:
                    line = list(islice(f, 947, 959))
                inspect_menu('Error Loading Game', line, 68)

                

            if LOAD_FACTOR == 1:
                play_game()

            

            
            
            
        elif choice == 2: #options menu
            OPTIONS = True
            while OPTIONS == True:  #keep asking until a choice is made
                choice = menu('OPTIONS',
                ['Torch radius +1. Current: ' + str(TORCH_RADIUS), 'Torch radius -1.', 'Regen/10 turns +1. Current: ' + str(REGEN), 'Regen/10 turns -1', 'Room max size +1. Current max size: ' + str(ROOM_MAX_SIZE),\
                 'Room Max size -1', 'Room Min size +1. Current min size: ' + str(ROOM_MIN_SIZE), 'Room Min Size -1', 'Tutorial: On. Current state: ' + str(Tutorial), 'Tutorial: Off.', 'Back'],70)
                if choice == 0:
                    TORCH_RADIUS += 1
                if choice == 1:
                    TORCH_RADIUS -= 1
                if choice == 2:
                    REGEN += 1
                if choice == 3:
                    REGEN -= 1
                if choice == 4:
                    ROOM_MAX_SIZE += 1
                if choice == 5:
                    ROOM_MAX_SIZE -= 1
                if choice == 6:
                    ROOM_MIN_SIZE += 1
                if choice == 7:
                    ROOM_MIN_SIZE -= 1
                if choice == 8:
                    Tutorial = False
                if choice == 9:
                    Tutorial = True
                if choice == 10:
                    break
                if choice == None:
                    break
        elif choice == 3: #Credits/Shoutouts
            with open('derp.rtf') as f:
                line = list(islice(f, 53, 68))
            inspect_menu('Credits/Shoutouts', line, 68)
        elif choice == 4:  #quit
            
            sys.exit()
            return

libtcod.console_set_custom_font('arial10x10.png', libtcod.FONT_TYPE_GREYSCALE | libtcod.FONT_LAYOUT_TCOD)
libtcod.console_init_root(SCREEN_WIDTH, SCREEN_HEIGHT, 'Rise of the Shatm', False)
libtcod.sys_set_fps(LIMIT_FPS)
con = libtcod.console_new(MAP_WIDTH, MAP_HEIGHT)
panel = libtcod.console_new(SCREEN_WIDTH, PANEL_HEIGHT)

main_menu()
